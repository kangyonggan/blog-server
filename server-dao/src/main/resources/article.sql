USE server;

INSERT INTO `tb_article`
(id, title, content, status, created_time, updated_time)
VALUES (1, 'Ubuntu14.0.4安装及配置系列-dubbo-admin的安装配置',
                                 '## 上传本地dubbo-admin到Ubuntu服务器\n```\n$ scp dubbo-admin.war root@121.40.66.176:/root/soft/\n```\n\n## 解压dubbo-monitor到tomcat/webapps/ROOT/目录下\n```\n$ unzip dubbo-admin.war -d /root/install/apache-tomcat-8.5.6/webapps/ROOT/\n```\n\n<!-- more -->\n\n## 配置\n修改`webapps/ROOT/WEB-INF/dubbo.properties`中`dubbo.registry.address`的值：\n\n```\ndubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181\n```\n\n修改tomcat的server.xml：\n\n```\n<Connector port=\"9090\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" ></Connector>\n```\n\n## 启动\n```\n$ sh bin/startup.sh\n```\n\n## 停止\n```\n$ sh bin/shutdown.sh\n```\n\n## 访问\nhttp://localhost:9090/\n\n',
                                 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (2, 'Ubuntu14.0.4安装及配置系列-dubbo-monitor2.5.3的安装配置', '## 下载[dubbo-monitor2.5.3](http://download.csdn.net/detail/liweifengwf/7864009)到本地\n\n## 上传本地dubbo-monitor到Ubuntu服务器\n```\n$ scp dubbo-monitor-simple-2.5.3-assembly.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压dubbo-monitor到指定目录\n```\n$ tar -zxvf dubbo-monitor-simple-2.5.3-assembly.tar.gz -C /root/install/\n```\n\n## 配置\n修改`conf/dubbo.properties`中`dubbo.registry.address`的值：\n\n```\ndubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181\n```\n\n<!-- more -->\n\n## 启动\n```\n# ./bin/start.sh\n```\n\n## 停止\n```\n$ ./bin/stop.sh\n```\n\n## 重启\n```\n$ ./bin/restart.sh\n```\n\n## 访问\nhttp://localhost:8080/\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (3, 'Ubuntu14.0.4安装及配置系列-git1.9.1的安装配置', '## 更新apt-get\n```\n$ apt-get update\n```\n\n## 下载git\n```\n$ apt-get install git\n```\n\n## 测试git是否生效\n```\n$ git --version\n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (4, 'Ubuntu14.0.4安装及配置系列-jdk1.8的安装配', '## 下载[jdk1.8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)到本地\n\n## 上传本地jdk到Ubuntu服务器\n```\n$ scp jdk-8u111-linux-x64.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压jdk到指定目录\n```\n$ tar -zxvf jdk-8u111-linux-x64.tar.gz -C /root/install/\n```\n\n## 配置jdk的环境变量\n在`/etc/profile`文件尾追加下面的配置:\n\n```\nexport JAVA_HOME=/root/install/jdk1.8.0_111\nexport JRE_HOME=/root/install/jdk1.8.0_111/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n\n<!-- more -->\n\n之后，重新加载配置，让配置生效:\n\n```\n$ source profile\n```\n\n## 测试环境变量是否生效\n```\n$ java -version\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (5, 'Ubuntu14.0.4安装及配置系列-jenkins的安装配置', '## 下载[jenkins](https://jenkins.io/index.html)到本地\n\n## 上传本地jenkins到Ubuntu服务器\n\n```\n$ scp jenkins.war root@121.40.66.176:/root/soft/\n```\n\n## 直接把war包放入tomcat的webapps目录下并重启tomcat即可\n\n<!-- more -->\n\n## 安装maven插件\n去这个地址[http://updates.jenkins-ci.org/download/plugins/](http://updates.jenkins-ci.org/download/plugins/)下载maven插件到本地\n\n然后在jenkins-->系统管理-->管理插件-->高级-->上传插件-->选择maven插件(maven-plugin.hpi)-->上传-->重启\n\n## jenkins执行shell重启tomcat无效\n需要在Post steps中执行`export BUILD_ID=BUILD_BLOG`,如:\n\n```\nexport BUILD_ID=BUILD_BLOG\nsh /home/kyg/shell/deploy-blog.sh\n```\n\n## 构建时， 需要指定maven配置\n如果没指定， 会使用默认配置，会联网下载依赖到.m2文件夹下，所以需要指定`settings.xml`配置文件的位置, 如下图:\n\n![jenkins-maven](https://kangyonggan.com/upload/20170101020115076.png)\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (6, 'Ubuntu14.0.4安装及配置系列-maven3.3.9', '## 下载[maven3.3.9](http://maven.apache.org/download.cgi)到本地\n\n## 上传本地maven到Ubuntu服务器\n```\n$ scp apache-maven-3.3.9-bin.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压maven到指定目录\n```\n$ tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /root/install/\n```\n\n## 配置maven的环境变量\n在`/etc/profile`文件尾追加下面的配置:\n\n```\nexport M2_HOME=/root/install/apache-maven-3.3.9\nexport PATH=$PATH:$M2_HOME/bin\n```\n\n<!-- more -->\n\n之后，重新加载配置，让配置生效:\n\n```\n$ source profile\n```\n\n## 5. 测试环境变量是否生效\n```\n$ mvn -version\n```\n\n## 6. 配置本地仓库路径\n在`/root/install/apache-maven-3.3.9/conf/settings.xml`文件中配置:\n\n```\n<localRepository>/root/data/repository</localRepository>\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (7, 'Ubuntu14.0.4安装及配置系列-mysql5.6的安装配置', '\n## 安装\n```\n$ apt-get install mysql-server-5.6\n```\n\n## 启动\n```\n$ /etc/init.d/mysql start\n```\n\n## 停止\n```\n$ /etc/init.d/mysql stop\n```\n\n## 重启\n```\n$ /etc/init.d/mysql restart\n```\n\n## 调整内存\n修改`/etc/mysql/my.cnf`,在`[mysqld]`后面追加\n\n```\nperformance_schema_max_table_instances=200\ntable_definition_cache=200\ntable_open_cache=128\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (8, 'Ubuntu14.0.4安装及配置系列-nexus3.1.0的安装配置', '\n## 下载[nexus3.1.0](https://www.sonatype.com/download-oss-sonatype)到本地\n\n## 上传本地nexus到Ubuntu服务器\n```\n$ scp nexus-3.1.0-04-unix.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压nexus到指定目录\n```\n$ tar -zxvf nexus-3.1.0-04-unix.tar.gz -C /root/install/\n```\n\n## 启动\n```\n$ ./nexus start\n```\n\n<!-- more -->\n\n## 停止\n```\n$ ./nexus stop\n```\n\n## 访问\nhttp://localhost:8081/\n\n- 用户名:admin\n- 密码:admin123\n\n## 使用\n\n配置`settings.xml`\n\n```\n<servers>\n    <server>\n      <id>releases</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>\n    <server>\n      <id>snapshots</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>\n  </servers>\n```\n\n配置`pom.xml`\n\n```\n<distributionManagement>\n    <repository>\n        <id>releases</id>\n        <name>nexus releases</name>\n        <url>http://kangyonggan.com:8081/repository/maven-releases/</url>\n    </repository>\n\n    <snapshotRepository>\n        <id>snapshots</id>\n        <name>nexus snapshots</name>\n        <url>http://kangyonggan.com:8081/repository/maven-snapshots/</url>\n    </snapshotRepository>\n</distributionManagement>\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (9, 'Ubuntu14.0.4安装及配置系列-tomcat8.5.6的安装配置', '## 下载[tomcat8.5.6](http://tomcat.apache.org/download-80.cgi)到本地\n\n## 上传本地tomcat到Ubuntu服务器\n```\n$ scp apache-tomcat-8.5.6.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压tomcat到指定目录\n```\n$ tar -zxvf apache-tomcat-8.5.6.tar.gz -C /root/install/\n```\n\n## 启动\n```\n$ sh startup.sh\n```\n\n## 停止\n```\n$ sh shutdown.sh\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (10, 'Ubuntu14.0.4安装及配置系列-zookeeper3.4.9的安装配置', '## 下载[zookeeper3.4.9](http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.9/)到本地\n\n## 上传本地zookeeper到Ubuntu服务器\n```\n$ scp zookeeper-3.4.9.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压zookeeper到指定目录\n\n```\n$ mkdir /root/install/server1\n$ tar zxvf zookeeper-3.4.9.tar.gz -C /root/install/server1/\n```\n\n<!-- more -->\n\n## 配置（集群）\n在`server1`目录下创建两个目录，分别是`data`和`logs`\n\n```\n$ cd /root/install/server1/\n$ mkdir data\n$ mkdir logs\n```\n\n此时，server1目录下有三个文件\n\n```\nroot@iZ23ldh8kudZ:~/install/server1# pwd\n/root/install/server1\nroot@iZ23ldh8kudZ:~/install/server1# ll\ntotal 20\ndrwxr-xr-x  5 root root 4096 Dec 17 15:43 ./\ndrwxr-xr-x  8 root root 4096 Dec 17 15:39 ../\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 data/\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 logs/\ndrwxr-xr-x 10 1001 1001 4096 Aug 23 15:42 zookeeper-3.4.9/\n```\n\n在`data`目录下创建文件`myid`,其内容为`1`\n\n```\nvi /data/myid\n内容为1\n```\n\n复制配置文件`zookeeper-3.4.9/conf/zoo_sample.cfg`到`zookeeper-3.4.9/conf/zoo.cfg`, 并修改其内容:\n\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/root/install/server1/data\ndataLogsDir=/root/install/server1/logs\nclientPort=2181\n\nserver.1=121.40.66.176:2888:3888\nserver.2=139.196.28.125:2888:3888\n```\n\n> 每台服务器都要有类似的配置\n\n## 环境变量\n\n在`/etc/profile`文件最后追加:\n\n```\nexport PATH=$PATH:/root/install/server1/zookeeper-3.4.9/bin\n```\n\n立即生效\n\n```\n$ source /etc/profile\n```\n\n## 启动\n\n```\n$ zkServer.sh start\n```\n\n## 查看是否启动\n\n```\nroot@iZ23ldh8kudZ:~/install/server1/zookeeper-3.4.9# jps\n7096 QuorumPeerMain\n7114 Jps\n```\n\n看到`QuorumPeerMain`就说明启动成功了\n\n## 停止\n\n```\n$ zkServer.sh stop\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (11, 'Ubuntu14.04下配置ftp服务器', '## 下载并安装\n```\napt-get install vsftpd\n```\n\n## ftp服务器启动和重启\n- 启动:`/etc/init.d/vsftpd start`\n- 重启:`/etc/init.d/vsftpd restart`\n\n<!-- more -->\n\n## 创建ftp用户\nftp用户需满足下面条件：\n\n- 此用户只是用来使用ftp服务的\n- 此用户不可登录服务器\n- 此用户不能访问ftp指定文件夹之外的文件\n\n## 创建用户\n```\nuseradd -d /home/ftp0 -m ftp0\npasswd ftp0\n```\n\n## 修改ftp配置\n修改`/etc/vsftpd.conf`的几个关键配置:\n\n```\nanonymous_enable=NO cal_user=YES# 只能访问自身的目录，此处有坑，需加上下面一行\nallow_writeable_chroot=YES# 允许写自身发目录\n```\n\n## 让用户不能登录\n```\nusermod -s /sbin/nologin ftp0\n```\n\n注意，ubuntu下还需要在`/etc/shells`最后加上：`/sbin/nologin`\n\n> 最后需要重启ftp服务器\n\n## 测试\n```\nftp> open 192.168.1.100\nuser:ftp0\npwd:xxxxx\nsuccess!\n```\n\n## 附javaftp上传代码\n```\npackage com.kangyonggan.api.biz;\n\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPReply;\n\nimport java.io.File;\nimport java.io.FileInputStream;\n\n/**\n * @author kangyonggan\n * @since 2016/12/25\n */\npublic class TestFtp {\n\n    private FTPClient ftp;\n\n    /**\n     * @param path     上传到ftp服务器哪个路径下\n     * @param addr     地址\n     * @param port     端口号\n     * @param username 用户名\n     * @param password 密码\n     * @return\n     * @throws Exception\n     */\n    private boolean connect(String path, String addr, int port, String username, String password) throws Exception {\n        boolean result = false;\n        ftp = new FTPClient();\n        int reply;\n        ftp.connect(addr, port);\n        ftp.login(username, password);\n        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\n        reply = ftp.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply)) {\n            ftp.disconnect();\n            return result;\n        }\n        ftp.changeWorkingDirectory(path);\n        result = true;\n        return result;\n    }\n\n    /**\n     * @param file 上传的文件或文件夹\n     * @throws Exception\n     */\n    private void upload(File file) throws Exception {\n        if (file.isDirectory()) {\n            ftp.makeDirectory(file.getName());\n            ftp.changeWorkingDirectory(file.getName());\n            String[] files = file.list();\n            for (int i = 0; i < files.length; i++) {\n                File file1 = new File(file.getPath() + \"\\\" + files[i]);\n                if (file1.isDirectory()) {\n                    upload(file1);\n                    ftp.changeToParentDirectory();\n                } else {\n                    File file2 = new File(file.getPath() + \"\\\" + files[i]);\n                    FileInputStream input = new FileInputStream(file2);\n                    ftp.storeFile(file2.getName(), input);\n                    input.close();\n                }\n            }\n        } else {\n            File file2 = new File(file.getPath());\n            FileInputStream input = new FileInputStream(file2);\n            ftp.storeFile(file2.getName(), input);\n            input.close();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        TestFtp t = new TestFtp();\n        t.connect(\"/home/ftp0/\", \"192.168.1.100\", 21, \"ftp0\", \"123456\");\n        File file = new File(\"/Users/kyg/Downloads/blog.sql\");\n        t.upload(file);\n    }\n\n}\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (12, 'Ubuntu14.04从命令行启动', '## 修改配置 /etc/default/grub\n- 注释此行：`#GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"`\n- `GRUB_CMDLINE_LINUX=\"\"` 改为 `GRUB_CMDLINE_LINUX=\"text\"`\n- `#GRUB_TERMINAL=console` 的注释干掉\n\n## 更新配置\n```\nupdate-grub\n```\n\n## 重启\n不出意外会从命令行启动， 意外会发生在ubuntu16.04上\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (13, 'Ubuntu14.04盒盖不休眠', '## 修改配置 /etc/systemd/logind.conf\n然后将其中的：`#HandleLidSwitch=suspend` 改成： `HandleLidSwitch=ignore`\n\n## 然后重启服务：\n```\nsudo restart systemd-logind\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (14, 'Ubuntu14.0.4安装及配置系列-redis3.2.0的安装配置', '## 下载[redis3.2](https://redis.io/)到本地\n\n## 上传本地redis到Ubuntu服务器\n```\n$ scp redis-3.2.0.tar.gz root@121.40.66.176:/root/soft/\n```\n\n## 解压redis到指定目录\n```\n$ tar -zxvf redis-3.2.0.tar.gz -C /root/install/\n```\n\n## 安装\n```\nmake & make install\n```\n\n<!-- more -->\n\n## 配置\n在`/root/install/redis-3.2.0/redis.conf`后面追加下面的配置:\n\n```\nrequirepass 123456\n```\n\n## 启动\n```\n$ redis-server redis.conf &\n```\n\n## 测试\n\n```\n$ redis-cli -a 123456\n> ping\n```\n\n输出:`PONG`\n\n## 停止\n```\n$ redis-cli -a 123456 shutdown\n```\n\n## 清空所有缓存\n```\n$ redis-cli -a 123456 KEYS \"*\" | xargs redis-cli -a 123456 DEL\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (15, 'Ubuntu16.0.4启动zookeeper报错', '\n## 报错信息\n```\nbin/zkServer.sh: 81: /home/kyg/install/server1/zookeeper-3.4.9/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\n```\n\n## 解决方案\n```\nls -l /bin/sh\nlrwxrwxrwx 1 root root 4 12月 24 17:22 /bin/sh -> dash\nls -l /bin/sh\nlrwxrwxrwx 1 root root 4 12月 24 20:01 /bin/sh -> bash\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (16, 'Ubuntu下mysql数据库恢复', '## 备份数据\nmysql数据是放在/var/lib/mysql下面的，需要备份的内容有：\n\n- ibdata1\n- performance_schema\n- blog文件夹 （对应数据库blog）\n- 其他你需要恢复的数据库\n\n<!-- more -->\n\n## 重装mysql\n重装教程网上一堆， 这里就不再赘述。\n\n## 恢复\n把备份的几个文件， 替换回去， 然后重启mysql， 这时候会报错， 查看mysql日志后发现是权限不足导致。\n\n原因是：备份与恢复数据的用户一般都需要比较高的权限才能操作， 比如root，所以替换后的文件的所有者是root， 而不再是mysql， 因此需要改变文件拥有者和赋权：\n\n```\ncd /var/lib/mysql\nchown mysql *\n\nchmod 700 blog;\nchmod 700 ibdata1;\nchmod 700 performance_schema;\n```\n\n必要时还需要删除这两个日志文件`ib_logfile0`和`ib_logfile1`：\n\n```\nrm ib_logfile*\n```\n\n重启， 不出意外应该是可以登录mysql了， `show databases`能看到已经恢复的blog数据库了， `use blog;show tables`能看见article表了。\n\n但是，在查询article表的时候，又会报权限不足的错， 道理是相同的， 我们去`/var/lib/mysql/blog`目录下，重新改变拥有者:\n\n```\ncd /var/lib/mysql/blog\nchown mysql *\n```\n\n重启，验证， 成功！', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (17, 'Ubuntu下方向键不好使的解决方案', '## 先卸载vim-tiny\n\n```\n$ sudo apt-get remove vim-common\n```\n\n## 再安装vim full：\n\n```\n$ sudo apt-get install vim\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (18, 'Ubuntu下防火墙的一些简单使用', '## 安装防火墙\n```\napt-get install firewalld\n```\n\n<!-- more -->\n\n## 查看开放的端口\n```\nfirewall-cmd --list-all\n```\n\n## 把一个端口开放\n```\nfirewall-cmd --permanent --add-port=8080/tcp\n```\n\n## 端口开放之后要重新加载\n```\nfirewall-cmd --reload\n```\n\n## 移除一个开放的端口\n```\nfirewall-cmd --permanent --remove-port=8080/tcp\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (19, 'Ubuntu配置DNS服务器', '## 安装并配置\n\n```\nkyg@kyg-Latitude-5450:~$ sudo apt-get bind9\n```\n\n<!-- more -->\n\n检查是否安装成功\n\n```\nkyg@kyg-Latitude-5450:~$ cd /etc/bind/\nkyg@kyg-Latitude-5450:/etc/bind$ ll\ntotal 68\ndrwxr-sr-x   2 root bind  4096  2月 19 12:25 ./\ndrwxr-xr-x 129 root root 12288  2月 19 12:25 ../\n-rw-r--r--   1 root root  2389  2月 16 00:33 bind.keys\n-rw-r--r--   1 root root   237  2月 16 00:33 db.0\n-rw-r--r--   1 root root   271  2月 16 00:33 db.127\n-rw-r--r--   1 root root   237  2月 16 00:33 db.255\n-rw-r--r--   1 root root   353  2月 16 00:33 db.empty\n-rw-r--r--   1 root root   270  2月 16 00:33 db.local\n-rw-r--r--   1 root root  3048  2月 16 00:33 db.root\n-rw-r--r--   1 root bind   463  2月 16 00:33 named.conf\n-rw-r--r--   1 root bind   490  2月 16 00:33 named.conf.default-zones\n-rw-r--r--   1 root bind   165  2月 16 00:33 named.conf.local\n-rw-r--r--   1 root bind   890  2月 19 12:25 named.conf.options\n-rw-r-----   1 bind bind    77  2月 19 12:25 rndc.key\n-rw-r--r--   1 root root  1317  2月 16 00:33 zones.rfc1918\n```\n\n在实验之前先ping一下百度，好做个对比\n\n```\nkyg@kyg-Latitude-5450:~$ ping baidu.com\nPING baidu.com (123.125.114.144) 56(84) bytes of data.\n64 bytes from 123.125.114.144: icmp_seq=1 ttl=54 time=33.4 ms\n64 bytes from 123.125.114.144: icmp_seq=2 ttl=54 time=42.4 ms\n64 bytes from 123.125.114.144: icmp_seq=3 ttl=54 time=37.3 ms\n```\n\n可以看到dns把baidu.com解析成的ip是123.125.114.144\n现在我就搭建一个简单的dns，让自己的dns把baidu.com解析成192.168.2.112\n这是自己的服务器，然后就可以把xxx展现给用户了。\n\n配置dns：\n\n```\nkyg@kyg-Latitude-5450:~$ sudo vim /etc/bind/named.conf.local\n添加如下内容:\n\nzone \"baidu.com\" { type master; file \"/etc/bind/db.baidu.com\"; };\n```\n\n修改db的配置文件:\n\n```\nkyg@kyg-Latitude-5450:~$ cd /etc/bind/\nkyg@kyg-Latitude-5450:/etc/bind# sudo cp db.local db.baidu.com\nkyg@kyg-Latitude-5450:/etc/bind# vi db.baidu.com\n\n内容如下：\n\n;\n; BIND data file for local loopback interface\n;\n$TTL604800\n@INSOAlocalhost. root.localhost. (\no      2; Serial\no 604800; Refresh\no  86400; Retry\no2419200; Expire\no 604800 ); Negative Cache TTL\n;\n@INNSlocalhost.\n@INA192.168.2.112\n@INAAAA::1\n```\n\n最后重启服务！\n\n```\nkyg@kyg-Latitude-5450:/etc/bind# sudo /etc/init.d/bind9 restart\n * Stopping domain name service... bind9                                                waiting for pid 5141 to die\n                                                                                 [ OK ]\n * Starting domain name service... bind9\n```\n\n如果启动失败，可以运行`named -g`查看错误原因.\n\n## 测试\n```\nkyg@kyg-Latitude-5450:/etc/bind$ ping baidu.com\nPING baidu.com (192.168.2.112) 56(84) bytes of data.\n64 bytes from 192.168.2.112: icmp_seq=1 ttl=63 time=4.73 ms\n64 bytes from 192.168.2.112: icmp_seq=2 ttl=63 time=2.12 ms\n64 bytes from 192.168.2.112: icmp_seq=3 ttl=63 time=2.22 ms\n64 bytes from 192.168.2.112: icmp_seq=4 ttl=63 time=5.15 ms\n64 bytes from 192.168.2.112: icmp_seq=5 ttl=63 time=18.8 ms\n64 bytes from 192.168.2.112: icmp_seq=6 ttl=63 time=2.11 ms\n64 bytes from 192.168.2.112: icmp_seq=7 ttl=63 time=2.81 ms\n64 bytes from 192.168.2.112: icmp_seq=8 ttl=63 time=2.79 ms\n```\n\n## 感悟\n其实在我们没有安装DNS服务之前，可以将/etc/hosts文件比作一个DNS服务配置文件，因为它实现和DNS类似。\n\n之所以会独立出DNS服务，是因为因特网主机多，如果每个主机都靠/etc/hosts文件来维护主机名到ip的映射，那么工作量非常大，对本地更新、网络资源占用都很浪费，所以出现了DNS。\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (20, '用jdk自带的keytool导入查看删除证书', '\n## 导入证书\n```\nsudo keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -alias sh2_test -file /Users/kyg/Downloads/sh2_test.cer\n```\n\n## 删除证书\n```\nsudo keytool -delete -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\n```\n\n## 查看证书\n```\nkeytool -list -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\n```\n\n## 提示\n- 使用时，jdk路径请自行替换\n- 一般cacerts的密码默认为changit\n- keytool命令在bin目录下\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (21, '给自己的博客生成rss订阅源', '## 目的\n1. 把我的所有博客全部变成rss订阅源，以便别人订阅。\n2. 当我有博客更新时，会自定更新订阅源，或者省事一点每隔30分钟自动更新一次。\n\n## 大致步骤\n1. 查询所有博客。\n2. 遍历所有博客，按`rss规范`组装成xml。\n3. 把组装好的xml写入服务器某个位置，比如放在:`/rss/blog.xml`\n4. 在rss阅读器中添加订阅源，url为:`https://kangyonggan.com/upload/rss/blog.xml`\n5. 订阅成功，阅读器会把所有博客缓存到本地，离线也可阅读。\n\n<!-- more -->\n\n## 按照rss规范组装xml\n使用第三方jar包`rsslibj`，它依赖`exml`,如下:\n\n```\n<rsslibj.version>1.0RC2</rsslibj.version>\n<exml.version>7.0</exml.version>\n\n<dependency>\n    <groupId>rsslibj</groupId>\n    <artifactId>rsslibj</artifactId>\n    <version>${rsslibj.version}</version>\n</dependency>\n<dependency>\n    <groupId>exml</groupId>\n    <artifactId>exml</artifactId>\n    <version>${exml.version}</version>\n</dependency>\n```\n\n代码如下:\n\n```\nChannel channel = new Channel();\nchannel.setTitle(\"朕的博客\");\nchannel.setLink(\"http://kangyonggan.com\");\n\nString baseUrl = \"http://kangyonggan.com/#article/\";\nString rssName = \"blog.xml\";\n\ntry {\n    List<Article> list = articleService.findAllArticles();\n    log.info(\"一共{}篇文章\", list.size());\n\n    for (int i = 0; i < list.size(); i++) {\n        Article article = list.get(i);\n        Item item = new Item();\n        item.setTitle(article.getTitle());\n        item.setLink(baseUrl + article.getId());\n        item.setDcDate(article.getUpdatedTime());\n        item.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));\n\n        channel.addItem(i, item);\n    }\n\n    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);\n\n    if (!file.exists()) {\n        file.createNewFile();\n    }\n\n    PrintWriter writer = new PrintWriter(new FileWriter(file));\n    writer.write(channel.getFeed(\"rss\"));\n    writer.flush();\n    writer.close();\n\n    FtpUtil.upload(rssName, \"rss/\");\n\n    log.info(\"rss刷新成功\");\n    return \"success\";\n} catch (Exception e) {\n    log.error(\"查询所有文章失败\", e);\n}\n```\n\n但是有个问题，那就是`Item`不能设置发布时间，订阅后在阅读器里看不到文章的发布时间或者更新时间，所以我就从网上重新找了一个，它不去用任何jar包。\n\n## 解决发布时间问题\n### Feed.java\n\n```\npackage com.kangyonggan.blog.model.rss;\n\nimport lombok.Data;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @since 2017/1/24\n */\n@Data\npublic class Feed {\n    String title;\n    String link;\n    String description;\n    String language;\n    String copyright;\n    String pubDate;\n    List<FeedMessage> feedMessages = new ArrayList();\n\n}\n```\n\n### FeedMessage.java\n\n```\npackage com.kangyonggan.blog.model.rss;\n\nimport lombok.Data;\n\n/**\n * @author kangyonggan\n * @since 2017/1/24\n */\n@Data\npublic class FeedMessage {\n\n    String title;\n\n    String description;\n\n    String link;\n\n    String author;\n\n    String guid;\n\n    String pubDate;\n\n}\n```\n\n### RSSFeedWriter.java\n\n```\npackage com.kangyonggan.blog.biz.util;\n\n\nimport com.kangyonggan.blog.model.rss.Feed;\nimport com.kangyonggan.blog.model.rss.FeedMessage;\n\nimport javax.xml.stream.XMLEventFactory;\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.events.*;\nimport java.io.FileOutputStream;\n\n/**\n * @author kangyonggan\n * @since 2017/1/24\n */\npublic class RSSFeedWriter {\n\n    private String outputFile;\n    private Feed feed;\n\n    public RSSFeedWriter(Feed feed, String outputFile) {\n        this.feed = feed;\n        this.outputFile = outputFile;\n    }\n\n    public void write() throws Exception {\n        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\n\n        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(new FileOutputStream(outputFile));\n\n        XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n        XMLEvent end = eventFactory.createDTD(\"\n\");\n\n        // Create and write Start Tag\n\n        StartDocument startDocument = eventFactory.createStartDocument();\n\n        eventWriter.add(startDocument);\n\n        // Create open tag\n        eventWriter.add(end);\n\n        StartElement rssStart = eventFactory.createStartElement(\"\", \"\", \"rss\");\n        eventWriter.add(rssStart);\n        eventWriter.add(eventFactory.createAttribute(\"version\", \"2.0\"));\n        eventWriter.add(end);\n\n        eventWriter.add(eventFactory.createStartElement(\"\", \"\", \"channel\"));\n        eventWriter.add(end);\n\n        // Write the different nodes\n\n        createNode(eventWriter, \"title\", feed.getTitle());\n\n        createNode(eventWriter, \"link\", feed.getLink());\n\n        createNode(eventWriter, \"description\", feed.getDescription());\n\n        createNode(eventWriter, \"language\", feed.getLanguage());\n\n        createNode(eventWriter, \"copyright\", feed.getCopyright());\n\n        createNode(eventWriter, \"pubdate\", feed.getPubDate());\n\n        for (FeedMessage entry : feed.getFeedMessages()) {\n            eventWriter.add(eventFactory.createStartElement(\"\", \"\", \"item\"));\n            eventWriter.add(end);\n            createNode(eventWriter, \"title\", entry.getTitle());\n            createNode(eventWriter, \"description\", entry.getDescription());\n            createNode(eventWriter, \"link\", entry.getLink());\n            createNode(eventWriter, \"author\", entry.getAuthor());\n            createNode(eventWriter, \"guid\", entry.getGuid());\n            createNode(eventWriter, \"pubDate\", entry.getPubDate());\n            eventWriter.add(end);\n            eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"item\"));\n            eventWriter.add(end);\n\n        }\n\n        eventWriter.add(end);\n        eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"channel\"));\n        eventWriter.add(end);\n        eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"rss\"));\n\n        eventWriter.add(end);\n\n        eventWriter.add(eventFactory.createEndDocument());\n\n        eventWriter.close();\n    }\n\n    private void createNode(XMLEventWriter eventWriter, String name,\n\n                            String value) throws XMLStreamException {\n        XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n        XMLEvent end = eventFactory.createDTD(\"\n\");\n        XMLEvent tab = eventFactory.createDTD(\" \");\n        // Create Start node\n        StartElement sElement = eventFactory.createStartElement(\"\", \"\", name);\n        eventWriter.add(tab);\n        eventWriter.add(sElement);\n        // Create Content\n        Characters characters = eventFactory.createCharacters(value);\n        eventWriter.add(characters);\n        // Create End node\n        EndElement eElement = eventFactory.createEndElement(\"\", \"\", name);\n        eventWriter.add(eElement);\n        eventWriter.add(end);\n    }\n}\n```\n\n使用如下：\n\n```\nFeed feed = new Feed();\nfeed.setDescription(\"记录生活、工作和学习时的笔记心得等\");\nfeed.setLink(\"http://kangyonggan.com\");\nfeed.setTitle(\"朕的博客\");\nList<FeedMessage> feedMessages = feed.getFeedMessages();\n\nString baseUrl = \"http://kangyonggan.com/#article/\";\nString rssName = \"blog.xml\";\n\ntry {\n    List<Article> list = articleService.findAllArticles();\n    log.info(\"一共{}篇文章\", list.size());\n\n    for (int i = 0; i < list.size(); i++) {\n        Article article = list.get(i);\n        FeedMessage feedMessage = new FeedMessage();\n\n        feedMessage.setTitle(article.getTitle());\n        feedMessage.setLink(baseUrl + article.getId());\n        feedMessage.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));\n        Date date = article.getUpdatedTime();\n        date.setTime(date.getTime() - 8 * 60 * 60 * 1000);\n        feedMessage.setPubDate(format.format(date));\n        feedMessages.add(feedMessage);\n    }\n\n    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);\n\n    if (!file.exists()) {\n        file.createNewFile();\n    }\n\n    new RSSFeedWriter(feed, file.getPath()).write();\n\n    FtpUtil.upload(rssName, \"rss/\");\n\n    log.info(\"rss刷新成功\");\n    return \"success\";\n} catch (Exception e) {\n    log.error(\"查询所有文章失败\", e);\n}\n```\n\n## 附rss订阅源和订阅效果\n\n![rss](https://kangyonggan.com/upload/20170125103534094.png)\n\n![reeder](https://kangyonggan.com/upload/20170125103943826.png)\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (22, '查询引擎优化方案', '## 现状\n- 每分钟去查N次数据库，每一次都会扫描几千行，其中N=通道的数量。\n- 查的非常频繁，但线上状态为I或E的交易很少很少，有一种杀鸡用牛刀的感觉。\n- 第一次查询时间区间太大（30s~90s之间）。\n- 查询高峰堆在一个时间点上，不均衡。\n- 每分钟启动一个线程，但一此只能启动一个线程。\n\n<!-- more -->\n\n## 优化后\n- 不用查数据库。\n- 只处理状态为I或E的交易。\n- 每次查询时间的区间可以精确到秒, 粒度可自由调控。\n- 均衡分布。\n- 可以使用线程池，可以N个线程协同处理。\n\n## 具体步骤\n创建一个数组`task[List]`，一个时钟线程Thread-timer，长度为12，每5秒走一步，如下图：\n\n![task-arr.png](https://kangyonggan.com/upload/20170315215531865.png)\n\n如果有状态为I或E的交易，就把BankCommand放入task[current_index + 6]的list中【此处有并发问题，加锁即可解决，后面讨论】，并把他的`loop_count`标记为0。\n\n6 * 5s=30s之后，时钟走到刚刚上面那个交易存放的位置，另起线程取出List中loop\\_count等于0的交易之后去查询，再更新beCommand表，并把此list中所有交易的loop\\_count减1，然后清除list中loop\\_count小于0的交易。【另起线程时可以使用线程池】\n\n如果某银行通道的查询需要延迟3分钟后才查询，只需要在放入task中的时候，让loop\\_count等于3。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (23, '手动安装本地jar包到仓库', '\n```\nmvn install:install-file -DgroupId=com.kangyonggan.app -DartifactId=simclient -Dversion=1.0-SNAPSHOT -Dpackaging=jar -Dfile=/home/kyg/data/jar/simclient-1.0-SNAPSHOT.jar\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (24, '手写前端单页面路由SimPage', '## simpage.js\n\n```\n/**\n * 单页面路由\n *\n * @author kangyonggan\n * @since 2017/3/21\n */\n(function ($) {\n    /**\n     * 获取内容的url\n     *\n     * @param hash\n     * @returns {string}\n     */\n    function getContentUrl(hash) {\n        return window.location.origin + window.location.pathname + hash\n    }\n\n    /**\n     * 加载成功\n     */\n    function onSuccess() {\n    }\n\n    /**\n     * 加载失败\n     */\n    function onError() {\n    }\n\n    /**\n     * 总入口\n     *\n     * @param contentArea\n     * @param settings\n     */\n    function simPage(contentArea, settings) {\n        var $contentArea = $(contentArea);\n        var $overlay = $();//empty set\n        var loadingTimer;\n        // 把settings的属性合并到defaults，并且不改变defaults\n        settings = $.extend(true, $.fn.simPage.defaults, settings);\n        /**\n         * 开始加载\n         */\n        function startLoading() {\n            // 清除定时器\n            clearInterval(loadingTimer);\n            $overlay.remove();\n            $overlay = $(\'<div>\' + settings.loadingText + \'</div>\').css({\n                position: \"absolute\",\n                left: 0,\n                top: 0,\n                bottom: 0,\n                right: 0,\n                zIndex: 9999,\n                textAlign: \"center\",\n                marginTop: \"100px\"\n            }).addClass(\"sim-page-loading\");\n            $contentArea.append($overlay);\n            var text = $overlay.html();\n            var count = 0;\n            // 定时输出正在加载...\n            loadingTimer = setInterval(function () {\n                var temp = \".\";\n                for (var i = 0; i < count; i++) {\n                    temp += \".\";\n                }\n                $overlay.html(text + temp);\n                count++;\n                count %= 3;\n            }, 1000);\n        }\n\n        /**\n         * 停止加载\n         *\n         * @param isSuccess\n         */\n        function stopLoading(isSuccess) {\n            // 清除定时器\n            clearInterval(loadingTimer);\n            $overlay.remove();\n            if (isSuccess) {\n                onSuccess();\n            } else {\n                onError();\n            }\n        }\n\n        /**\n         * 加载url\n         *\n         * @param url\n         * @param method\n         * @param data\n         */\n        function getUrl(url, method, data) {\n            if (!method) {\n                method = \"get\";\n            }\n\n            // 开始加载\n            startLoading();\n            $.ajax({\n                \'url\': url,\n                \'cache\': false,\n                \"method\": method,\n                \"data\": data\n            }).error(function () {\n                // 停止加载\n                stopLoading(false);\n                getUrl(getContentUrl(\"404\"));\n            }).done(function (result) {\n                // 停止加载\n                stopLoading(true);\n                // 内容替换\n                $contentArea.empty().html(result);\n            });\n        }\n\n        /**\n         * 异步加载url\n         *\n         * @param hash\n         * @param cache\n         */\n        function loadUrl(hash) {\n            hash = hash.replace(/^(#!)?#/, \'\');\n            var url = settings.contentUrl(hash);\n            if (typeof url === \'string\') {\n                getUrl(url);\n            }\n        };\n        // 监听hash改变\n        $(window).off(\'hashchange\').on(\'hashchange\', function (e, manual_trigger) {\n            var hash = $.trim(window.location.hash);\n            if (!hash || hash.length == 0) {\n                return;\n            }\n\n            // 异步加载url\n            loadUrl(hash);\n        });\n        // 是否使用默认URL\n        var hash = $.trim(window.location.hash);\n        if (!hash && settings.defaultUrl) {\n            window.location.hash = settings.defaultUrl;\n        }\n        loadUrl(hash);\n        // 相对定位，给【加载中...】使用\n        $contentArea.css(\"position\", \"relative\");\n\n        // 监听表单提交\n        $(document).on(\"submit\", \"form\", function (e) {\n            var $form = $(this);\n\n            var hash = $form.attr(\"action\");\n            var method = $form.attr(\"method\");\n\n            if (hash.substring(0, 1) == \"#\") {\n                e.preventDefault();\n            } else {\n                return true;\n            }\n\n            // 处理get方法\n            if (method.toLowerCase() == \"get\") {\n                var params = $form.serialize();\n                var url = window.location.origin + window.location.pathname + hash + \"?\" + params;\n\n                window.location.href = url;\n            } else if (method.toLowerCase() == \"post\") {\n                var url = window.location.origin + window.location.pathname + hash.substring(1);\n\n                getUrl(url, \"post\", $form.serialize());\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * 单页面路由\n     *\n     * @param option\n     * @returns {*}\n     */\n    $.fn.simPage = function (option) {\n        return this.each(function () {\n            $(this).data(\'simPage\', new simPage(this, option));\n        });\n    };\n    /**\n     * 默认配置\n     *\n     * @type {{defaultUrl: string, contentUrl: getContentUrl, loadingText: string, success: onSuccess, error: onError}}\n     */\n    $.fn.simPage.defaults = {\n        // 默认URL（默认index）\n        defaultUrl: \'#index\',\n        // 内容URL（一般默认即可）\n        contentUrl: getContentUrl,\n        // 加载中的文字\n        loadingText: \'正在加载\',\n        // success回调方法\n        success: onSuccess,\n        // error回调方法\n        error: onError\n    }\n})(window.jQuery);\n```\n\n## 用法\n```\nhtml\n<div class=\"sim-page\"></div>\n\njs\n$(\".sim-page\").simPage();\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (25, '实现前端markdown编辑器', '## 准备工作\n- 下载bootstrap [http://v3.bootcss.com](http://v3.bootcss.com)\n- 下载jquery [http://jquery.com/download](http://jquery.com/download)\n- 下载marked [https://github.com/chjj/marked](https://github.com/chjj/marked)\n- 下载bootstrap-markdown [http://www.codingdrama.com/bootstrap-markdown](http://www.codingdrama.com/bootstrap-markdown/)\n\n<!-- more -->\n\n## 使用方法\n### 引入css\n```\n<div class=\"hidden ajax-append-link\" rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.min.css\">\n<div class=\"hidden ajax-append-link\" rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap-markdown.min.css\">\n```\n\n### 引入js\n\n```\n<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/bootstrap.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/marked.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/bootstrap-markdown.min.js\"></script>\n```\n\n### 文本域\n```\n<textarea name=\"content\" id=\"content\" rows=\"10\"><textarea>\n```\n\n### 把文本域变为markdown编辑器\n```\n$(\"#content\").markdown({resize: \'vertical\'});\n```\n\n## 更多用法请参考\n[http://www.codingdrama.com/bootstrap-markdown](http://www.codingdrama.com/bootstrap-markdown/)\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (26, '实现全文检索-基于MySQL', '## 把关键字拆分为一组词\n例子：搜索`懒人快乐`， 后台程序就会把`懒人快乐`拆分成两个词`懒人,快乐`。\n\n说明：可以使用`jieba-analysis`结巴分词， 用法如下：\n\n```\n<dependency>\n    <groupId>com.huaban</groupId>\n    <artifactId>jieba-analysis</artifactId>\n    <version>1.0.2</version>\n</dependency>\n```\n\n<!-- more -->\n\n```\npackage com.kangyonggan.blog.util;\n\n\nimport com.huaban.analysis.jieba.JiebaSegmenter;\nimport com.huaban.analysis.jieba.SegToken;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @since 16/7/22\n */\npublic class FenCi {\n\n    /**\n     * 分词器\n     */\n    private static final JiebaSegmenter segmenter = new JiebaSegmenter();\n\n    /**\n     * 中文分词, 并转成拼音\n     *\n     * @param data\n     * @return\n     */\n    public static String process(String data) {\n        if (StringUtils.isEmpty(data)) {\n            return \"\";\n        }\n\n        data = data.replaceAll(\"\\s\", \" \");\n        data = data.replaceAll(\"\'\", \" \");\n\n        List<SegToken> list = segmenter.process(data, JiebaSegmenter.SegMode.INDEX);\n\n        StringBuilder sb = new StringBuilder();\n        list.forEach(segToken -> sb.append(PinYin.converterToSpellWithMuti(segToken.word)).append(\",\"));\n        sb.deleteCharAt(sb.lastIndexOf(\",\"));\n\n        return sb.toString();\n    }\n\n}\n```\n\n## 把词转化为拼音\n例子：`懒人,快乐`会被后台程序转化为`lanren,kuaile,kuaiyue`，之所以不是`lanren,kuaile`而是`lanren,kuaile,kuaiyue`， 是因为`乐`是多音字。\n\n说明：可以使用`pinyin4j`把汉字转化为拼音， 用法如下：\n\n```\n<dependency>\n     <groupId>com.belerweb</groupId>\n     <artifactId>pinyin4j</artifactId>\n     <version>2.5.1</version>\n</dependency>\n```\n\n```\npackage com.kangyonggan.blog.util;\n\nimport net.sourceforge.pinyin4j.PinyinHelper;\nimport net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;\nimport net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;\nimport net.sourceforge.pinyin4j.format.HanyuPinyinToneType;\nimport net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;\n\nimport java.util.ArrayList;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author kangyonggan\n * @since 16/7/22\n */\npublic class PinYin {\n\n    /**\n     * 汉字转换位汉语拼音首字母，英文字符不变，特殊字符丢失 支持多音字，生成方式如（长沙市长:cssc,zssz,zssc,cssz）\n     *\n     * @param chines 汉字\n     * @return 拼音\n     */\n    public static String converterToFirstSpell(String chines) {\n        StringBuffer pinyinName = new StringBuffer();\n        char[] nameChar = chines.toCharArray();\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\n        for (int i = 0; i < nameChar.length; i++) {\n            if (nameChar[i] > 128) {\n                try {\n                    // 取得当前汉字的所有全拼\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\n                            nameChar[i], defaultFormat);\n                    if (strs != null) {\n                        for (int j = 0; j < strs.length; j++) {\n                            // 取首字母\n                            pinyinName.append(strs[j].charAt(0));\n                            if (j != strs.length - 1) {\n                                pinyinName.append(\",\");\n                            }\n                        }\n                    }\n                    // else {\n                    // pinyinName.append(nameChar[i]);\n                    // }\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\n                    e.printStackTrace();\n                }\n            } else {\n                pinyinName.append(nameChar[i]);\n            }\n            pinyinName.append(\" \");\n        }\n        // return pinyinName.toString();\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\n    }\n\n    /**\n     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失\n     * 不支持多音字，生成方式如（重当参:zhongdangcen）\n     *\n     * @param chines 汉字\n     * @return 拼音\n     */\n    public static String converterToSpell(String chines) {\n        StringBuffer pinyinName = new StringBuffer();\n        char[] nameChar = chines.toCharArray();\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\n        for (int i = 0; i < nameChar.length; i++) {\n            if (nameChar[i] > 128) {\n                try {\n                    // 取得当前汉字的所有全拼\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\n                            nameChar[i], defaultFormat);\n                    if (strs != null && strs.length > 0) {\n                        pinyinName.append(strs[0]);\n                    }\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\n                    e.printStackTrace();\n                }\n            } else {\n                pinyinName.append(nameChar[i]);\n            }\n            pinyinName.append(\" \");\n        }\n        // return pinyinName.toString();\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\n    }\n\n    /**\n     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失\n     * 支持多音字，生成方式如（重当参:zhongdangcen,zhongdangcan,chongdangcen\n     * ,chongdangshen,zhongdangshen,chongdangcan）\n     *\n     * @param chines 汉字\n     * @return 拼音\n     */\n    public static String converterToSpellWithMuti(String chines) {\n        StringBuffer pinyinName = new StringBuffer();\n        char[] nameChar = chines.toCharArray();\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\n        for (int i = 0; i < nameChar.length; i++) {\n            if (nameChar[i] > 128) {\n                try {\n                    // 取得当前汉字的所有全拼\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\n                            nameChar[i], defaultFormat);\n                    if (strs != null) {\n                        for (int j = 0; j < strs.length; j++) {\n                            pinyinName.append(strs[j]);\n                            if (j != strs.length - 1) {\n                                pinyinName.append(\",\");\n                            }\n                        }\n                    }\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\n                    e.printStackTrace();\n                }\n            } else {\n                pinyinName.append(nameChar[i]);\n            }\n            pinyinName.append(\" \");\n        }\n        // return pinyinName.toString();\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\n    }\n\n    /**\n     * 去除多音字重复数据\n     *\n     * @param theStr\n     * @return\n     */\n    private static List<Map<String, Integer>> discountTheChinese(String theStr) {\n        // 去除重复拼音后的拼音列表\n        List<Map<String, Integer>> mapList = new ArrayList<Map<String, Integer>>();\n        // 用于处理每个字的多音字，去掉重复\n        Map<String, Integer> onlyOne = null;\n        String[] firsts = theStr.split(\" \");\n        // 读出每个汉字的拼音\n        for (String str : firsts) {\n            onlyOne = new Hashtable();\n            String[] china = str.split(\",\");\n            // 多音字处理\n            for (String s : china) {\n                Integer count = onlyOne.get(s);\n                if (count == null) {\n                    onlyOne.put(s, new Integer(1));\n                } else {\n                    onlyOne.remove(s);\n                    count++;\n                    onlyOne.put(s, count);\n                }\n            }\n            mapList.add(onlyOne);\n        }\n        return mapList;\n    }\n\n    /**\n     * 解析并组合拼音，对象合并方案(推荐使用)\n     *\n     * @return\n     */\n    private static String parseTheChineseByObject(\n            List<Map<String, Integer>> list) {\n        Map<String, Integer> first = null; // 用于统计每一次,集合组合数据\n        // 遍历每一组集合\n        for (int i = 0; i < list.size(); i++) {\n            // 每一组集合与上一次组合的Map\n            Map<String, Integer> temp = new Hashtable<String, Integer>();\n            // 第一次循环，first为空\n            if (first != null) {\n                // 取出上次组合与此次集合的字符，并保存\n                for (String s : first.keySet()) {\n                    for (String s1 : list.get(i).keySet()) {\n                        String str = s + s1;\n                        temp.put(str, 1);\n                    }\n                }\n                // 清理上一次组合数据\n                if (temp != null && temp.size() > 0) {\n                    first.clear();\n                }\n            } else {\n                for (String s : list.get(i).keySet()) {\n                    String str = s;\n                    temp.put(str, 1);\n                }\n            }\n            // 保存组合数据以便下次循环使用\n            if (temp != null && temp.size() > 0) {\n                first = temp;\n            }\n        }\n        String returnStr = \"\";\n        if (first != null) {\n            // 遍历取出组合字符串\n            for (String str : first.keySet()) {\n                returnStr += (str + \",\");\n            }\n        }\n        if (returnStr.length() > 0) {\n            returnStr = returnStr.substring(0, returnStr.length() - 1);\n        }\n        return returnStr;\n    }\n}\n```\n\n## 单独创建一个表用于全文检索\n例子：现在有一个文章表`article`, 它有`title`和`body`等字段，我们想要实现的效果是~如果我们检索的关键字在title或body中， 那么我们就把这条文章记录检索出来。\n\n- 创建一个用于检索的表`article_index`， 它有`article_id`，`title`，`body`等字段， 其中title和body字段要给的大一点， 因为这两个字段将要存储文章表的title和body所对应的拼音，具体给多大请自行分析。\n- ALTER TABLE article_index ENGINE = MyISAM; 默认是InnoDB。MyISAM：支持全文索引， 但不支持事务。InnoDB：支持事务， 但不支持全文索引。\n- ALTER TABLE `article_index` ADD FULLTEXT INDEX (`title`, `body`); 给title和body字段添加全文索引。\n- 在发表一篇新的文章时， 把文章的`title`用`结巴分词`分成多个词， 再用`pinyin4j`转化为拼音， `body`字段也做相同处理，最后把转化后的article_id、title和body存储到`article_index`表中，用于全文检索。\n\n说明：关于全文索引的一些常用知识`SHOW VARIABLES LIKE \'ft_min_word_len\';\n`， ` REPAIR TABLE article_index QUICK;\n` 作用以及用法请自行学习。\n\n## 全文检索\n例子：检索的关键字为`懒人快乐`\n\n- 先把分词， 变为`懒人,快乐`。\n- 再把汉字变拼音`lanren,kuaile,kuaiyue`。\n- 检索：`SELECT * FROM article_index WHERE match(title, body) against(\'lanren,kuaile,kuaiyue\' IN BOOLEAN MODE)`\n- 根据检索到article_id去文章表查询对应的文章\n\n说明：此检索是基于MySQL的， 其他数据库的检索请自行学习， 检索语句还有很多模式， 请自行学习。\n\n> 结巴分词的时候会返回偏移量，所以你可以根据偏移量定位到文章中的关键词， 然后变成红色。\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (27, '学习java8中java.time包下的几个类-LocalDate', '\n> 官方文档:[http://docs.oracle.com/javase/8/docs/api/index.html](http://docs.oracle.com/javase/8/docs/api/index.html)\n\n<!-- more -->\n\n## LocalDate类\n### 类的定义\n```\npublic final class LocalDate extends Object implements\n    Temporal, TemporalAdjuster, ChronoLocalDate, Serializable\n```\n\n### 类的描述\n这是一个`不可变`、`线程安全`的日期类，它可以存储年月日，但是不能存储时分秒。\n\n> 常用术语: 日期-年月日，时间-时分秒，日期时间-年月日时分秒\n\n## 获取当前日期\n### 方法定义\n```\npublic static LocalDate now();\n```\n\n### 方法描述\n获取系统当前日期。\n\n### 例子1：\n\n在`pom.xml`中指定使用jdk1.8编译：\n\n```\n<!--compiler plugin -->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.2</version>\n    <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n    </configuration>\n</plugin>\n```\n\n`LocalDateNowDemo.java`:\n\n```\npackage com.kangyonggan.demo.time;\n\nimport java.time.LocalDate;\n\n/**\n * @author kangyonggan\n * @since 2017/3/22\n */\npublic class LocalDateNowDemo {\n\n    public static void main(String[] args) {\n        LocalDate today = LocalDate.now();\n        System.out.println(today);\n    }\n\n}\n```\n\n输出：\n\n```\n2017-03-22\nProcess finished with exit code 0\n```\n\n可以看出它不像java.util.Date那样输出一串乱七八糟的时间，如果我们仅仅使用日期，那会非常爽。\n但是，有时候我们需要`yyyyMMdd`格式的日期。\n\n## 日期格式化\n### 方法定义\n```\npublic String format(DateTimeFormatter formatter);\n```\n\n### 方法描述\n把日期格式化指定的格式。\n\n### 抛异常\n可能会抛运行时异常`DateTimeException`\n\n### 例子2：\n\n```\npublic static void main(String[] args) {\n    LocalDate today = LocalDate.now();\n    System.out.println(today);\n    System.out.println(today.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\")));\n}\n```\n\n输出：\n\n```\n2017-03-22\n20170322\n\nProcess finished with exit code 0\n```\n\n每次都写`yyyyMMdd`感觉很麻烦，而且容易错容易忘，再看下面的写法：\n\n### 例子3：\n\n```\npublic static void main(String[] args) {\n    LocalDate today = LocalDate.now();\n    System.out.println(today);\n    System.out.println(today.format(DateTimeFormatter.BASIC_ISO_DATE));\n}\n```\n\n输出：\n\n```\n2017-03-22\n20170322\n\nProcess finished with exit code 0\n```\n\n输出结果是一样的，这是使用了DateTimeFormatter类中预定义的一些格式器，更多预定义格式器如下：\n\nFormatter | Description  | Example\n--------- | ----------- | ---------\nofLocalizedDate(dateStyle) | Formatter with date style from the locale | \'2011-12-03\'\nofLocalizedTime(timeStyle) | Formatter with time style from the locale | \'10:15:30\'\nofLocalizedDateTime(dateTimeStyle) | Formatter with a style for date and time from the locale | \'3 Jun 2008 11:05:30\'\nofLocalizedDateTime(dateStyle,timeStyle) | Formatter with date and time styles from the locale | \'3 Jun 2008 11:05\'\nBASIC_ISO_DATE | Basic ISO date | \'20111203\'\nISO_LOCAL_DATE | ISO Local Date | \'2011-12-03\'\nISO_OFFSET_DATE | ISO Date with offset | \'2011-12-03+01:00\'\nISO_DATE | ISO Date with or without offset | \'2011-12-03+01:00\'; \'2011-12-03\'\nISO_LOCAL_TIME | Time without offset | \'10:15:30\'\nISO_OFFSET_TIME | Time with offset | \'10:15:30+01:00\'\nISO_TIME | Time with or without offset | \'10:15:30+01:00\'; \'10:15:30\'\nISO_LOCAL_DATE_TIME | ISO Local Date and Time | \'2011-12-03T10:15:30\'\nISO_OFFSET_DATE_TIME | Date Time with Offset | \'2011-12-03T10:15:30+01:00\'\nISO_ZONED_DATE_TIME | Zoned Date Time | \'2011-12-03T10:15:30+01:00[Europe/Paris]\'\nISO_DATE_TIME | Date and time with ZoneId | \'2011-12-03T10:15:30+01:00[Europe/Paris]\'\nISO_ORDINAL_DATE | Year and day of year | \'2012-337\'\nISO_WEEK_DATE | Year and Week | 2012-W48-6\'\nISO_INSTANT | Date and Time of an Instant | \'2011-12-03T10:15:30Z\'\nRFC_1123_DATE_TIME | RFC 1123 / RFC 822 | \'Tue, 3 Jun 2008 11:05:30 GMT\'\n\n刚刚是把日期格式化，下面方法是相反的操作，即把指定格式的字符串解析成日期。\n\n## 日期解析\n### 方法定义\n```\npublic static LocalDate parse(CharSequence text);\n```\n\n### 方法描述\n把`固定格式`的字符串解析成日期，字符串格式必须为:`yyyy-MM-dd`\n\n### 抛异常\n如果字符串不能被解析就会抛异常`DateTimeParseException`\n\n### 例子4：\n\n```\npublic static void main(String[] args) {\n    String dateStr = \"2017-03-22\";\n    LocalDate localDate = LocalDate.parse(dateStr);\n    System.out.println(localDate);\n}\n```\n\n输出：\n\n```\n2017-03-22\n\nProcess finished with exit code 0\n```\n\n### 例子5：\n\n```\npublic static void main(String[] args) {\n    String dateStr = \"2017-3-22\";\n    LocalDate localDate = LocalDate.parse(dateStr);\n    System.out.println(localDate);\n}\n```\n\n输出：\n\n```\nException in thread \"main\" java.time.format.DateTimeParseException: Text \'2017-3-22\' could not be parsed at index 5\n  at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1949)\n  at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1851)\n  at java.time.LocalDate.parse(LocalDate.java:400)\n  at java.time.LocalDate.parse(LocalDate.java:385)\n  at com.kangyonggan.demo.time.LocalDateParseDemo.main(LocalDateParseDemo.java:14)\n\nProcess finished with exit code 1\n```\n\n比较例4和例5，发现parse方法对字符串的要求还是比较严格的，一旦解析不了就会抛异常。\n在实际开发中，我们的字符串不可能都是yyyy-MM-dd型的，LocalDate还提供了另外一个同名方法。\n\n## 日期解析（指定格式）\n### 方法定义\n```\npublic static LocalDate parse(CharSequence text, DateTimeFormatter formatter);\n```\n\n### 方法描述\n把指定格式的字符串解析成日期。\n\n### 抛异常\n如果字符串不能被解析就会抛异常`DateTimeParseException`\n\n### 例子6：\n\n```\npublic static void main(String[] args) {\n    String dateStr = \"20170322\";\n    LocalDate localDate = LocalDate.parse(dateStr, DateTimeFormatter.BASIC_ISO_DATE);\n    System.out.println(localDate);\n}\n```\n\n输出：\n\n```\n2017-03-22\n\nProcess finished with exit code 0\n```\n\n这个例子中我使用的是预定义的格式器，当然你也可以自己定义格式。\n相比SimpleDateFormat，这个方法是线程安全的，且提供了一大批预定义的格式器。\n\n## 其他常用方法\nLocalDate类中还提供了一些其他方法，比如：\n\n方法定义 | 描述\n------- | ------\npublic int getYear() | 获取年\npublic int getMonthValue() | 获取月\npublic int getDayOfMonth() | 获取日\npublic boolean isAfter(ChronoLocalDate other) | 判断是否在other日期之后\npublic boolean isBefore(ChronoLocalDate other) | 判断是否在other日期之前\npublic boolean isEqual(ChronoLocalDate other) | 判断和other日期是否相等\npublic boolean isLeapYear() | 判断是否是闰年\npublic int lengthOfMonth() | 返回一个月有多少天\npublic int lengthOfYear() | 返回一年有多少天\npublic static LocalDate of(int year, int month, int dayOfMonth) | 返回一个日期\npublic LocalDate minusDays(long daysToSubtract) | 减去n天，返回一个新的LocalDate\npublic LocalDate minusWeeks(long weeksToSubtract) | 减去n周，返回一个新的LocalDate\npublic LocalDate minusMonths(long monthsToSubtract) | 减去n月，返回一个新的LocalDate\npublic LocalDate minusYears(long yearsToSubtract) | 减去n年，返回一个新的LocalDate\npublic LocalDate plusDays(long daysToSubtract) | 加上n天，返回一个新的LocalDate\npublic LocalDate plusWeeks(long weeksToSubtract) | 加上n周，返回一个新的LocalDate\npublic LocalDate plusMonths(long monthsToSubtract) | 加上n月，返回一个新的LocalDate\npublic LocalDate plusYears(long yearsToSubtract) | 加上n年，返回一个新的LocalDate\n\n> LocalDate类中远不止这些方法，具体请查看官方文档。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (28, '学习java8中java.time包下的几个类-LocalTime', '\n> 官方文档：[http://docs.oracle.com/javase/8/docs/api/index.html](http://docs.oracle.com/javase/8/docs/api/index.html)\n\n<!-- more -->\n\n## LocalTime类\n### 类的定义\n```\npublic final class LocalTime extends Object implements\n      Temporal, TemporalAdjuster, Comparable<LocalTime>, Serializable\n```\n\n### 类的描述\n这是一个`不可变`、`线程安全`的时间类，它可以存储时分秒（毫秒），但是不能存储年月日。\n\n## 获取当前时间\n### 方法定义\n```\npublic static LocalTime now();\n```\n\n### 方法描述\n获取系统当前时间。\n\n### 例子1：\n\n```\npublic static void main(String[] args) {\n    LocalDate today = LocalDate.now();\n    System.out.println(today);\n}\n```\n\n输出：\n\n```\n15:44:38.220\n\nProcess finished with exit code 0\n```\n\n## 时间格式化\n### 方法定义\n```\npublic String format(DateTimeFormatter formatter);\n```\n\n### 方法描述\n把时间格式化指定的格式。\n\n### 抛异常\n可能会抛运行时异常DateTimeException\n\n### 例子2：\n```\npublic static void main(String[] args) {\n    LocalTime today = LocalTime.now();\n    System.out.println(today);\n    System.out.println(today.format(DateTimeFormatter.ofPattern(\"HHmmss\")));\n    System.out.println(today.format(DateTimeFormatter.ISO_LOCAL_TIME));\n}\n```\n\n输出：\n\n```\n15:51:29.885\n155129\n15:51:29.885\n\nProcess finished with exit code 0\n```\n\n其中，`DateTimeFormatter`类中一些预定义的格式器，请参考上一篇文章:\n[学习java8中java.time包下的几个类-LocalDate](http://kangyonggan.com/2017/03/25/学习java8中java-time包下的几个类-LocalDate/)\n\n## 时间解析\n### 方法定义\n```\npublic static LocalTime parse(CharSequence text);\n```\n\n### 方法描述\n把固定格式的字符串解析成时间，字符串格式必须为一下几种之一（亲测）:\n\n- HH:mm\n- HH:mm:ss\n- HH:mm:ss.S\n- HH:mm:ss.SS\n- HH:mm:ss.SSS\n\n不能为：\n\n- HH\n- HH:m:ss\n\n### 抛异常\n如果字符串不能被解析就会抛异常DateTimeParseException\n\n### 例子4：\n```\npublic static void main(String[] args) {\n    String dateStr = \"15:57:04\";\n    LocalTime localTime = LocalTime.parse(dateStr);\n    System.out.println(localTime);\n}\n```\n\n输出：\n\n```\n15:57:04\n\nProcess finished with exit code 0\n```\n\n### 例子5：\n```\npublic static void main(String[] args) {\n    String dateStr = \"155704\";\n    LocalTime localTime = LocalTime.parse(dateStr, DateTimeFormatter.ofPattern(\"HHmmss\"));\n    System.out.println(localTime);\n}\n```\n\n输出：\n\n```\n15:57:04\n\nProcess finished with exit code 0\n```\n\n## 其他常用方法\n请参考上一篇文章或者官方文档。\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (29, '学习java8中java.time包下的几个类-LocalDateTime', '\n> 官方文档：[http://docs.oracle.com/javase/8/docs/api/index.html](http://docs.oracle.com/javase/8/docs/api/index.html)\n\n\n\n<!-- more -->\n\n## LocalDateTime类\n### 类的定义\n```\npublic final class LocalDateTime extends Object implements\n    Temporal, TemporalAdjuster, ChronoLocalDateTime<LocalDate>, Serializable\n```\n\n### 类的描述\n这是一个`不可变`、`线程安全`的时间类，它可以存储年月日时分秒（毫秒）。\n\n## 获取当前日期时间\n### 方法定义\n```\npublic static LocalDateTime now();\n```\n\n### 方法描述\n获取系统当前日期时间。\n\n### 例子1：\n\n```\npublic static void main(String[] args) {\n    LocalDateTime today = LocalDateTime.now();\n    System.out.println(today);\n}\n```\n\n输出：\n\n```\n2017-03-22T16:10:02.586\n\nProcess finished with exit code 0\n```\n\n## 日期时间格式化\n### 方法定义\n```\npublic String format(DateTimeFormatter formatter);\n```\n\n### 方法描述\n把日期时间格式化指定的格式。\n\n### 抛异常\n可能会抛运行时异常DateTimeException\n\n### 例子2：\n```\npublic static void main(String[] args) {\n    LocalDateTime today = LocalDateTime.now();\n    System.out.println(today);\n    System.out.println(today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\")));\n    System.out.println(today.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n}\n```\n\n输出：\n\n```\n2017-03-22T16:12:51.661\n2017-03-22 16:12:51.661\n2017-03-22T16:12:51.661\n\nProcess finished with exit code 0\n```\n\n其中，`DateTimeFormatter`类中一些预定义的格式器，请参考之前的一篇文章:\n[学习java8中java.time包下的几个类 - LocalDate](http://kangyonggan.com/#article/91)\n\n## 日期时间解析\n### 方法定义\n```\npublic static LocalDateTime parse(CharSequence text);\n```\n\n### 方法描述\n把固定格式的字符串解析成日期时间，字符串格式必须为`2017-03-22T15:57:04`。\n\n### 抛异常\n如果字符串不能被解析就会抛异常DateTimeParseException\n\n### 例子4：\n```\npublic static void main(String[] args) {\n    String dateStr = \"2017-03-22T15:57:04\";\n    LocalDateTime localDateTime = LocalDateTime.parse(dateStr);\n    System.out.println(localDateTime);\n}\n```\n\n输出：\n\n```\n2017-03-22T15:57:04\n\nProcess finished with exit code 0\n```\n\n### 例子5：\n```\npublic static void main(String[] args) {\n    String dateStr = \"2017-03-22 15:57:04\";\n    LocalDateTime localDateTime = LocalDateTime.parse(dateStr, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    System.out.println(localDateTime);\n}\n```\n\n输出：\n\n```\n2017-03-22T15:57:04\n\nProcess finished with exit code 0\n```\n\n## 其他常用方法\n请参考`学习java8中java.time包下的几个类-LocalDate`或者官方文档。\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (30, '如何把内网机器变成外网可以访问的服务器', '\n## 环境准备\n1. 需要一台内网机器（性能越强越好）【192.168.1.100】\n2. 一个有公网IP的路由器，或者移动内网或者电信内网IP都可以【101.245.198.155】\n3. 一个公网服务器（不需要内存太大，1G足够）【121.40.66.176】\n\n> 路由器和公网服务器要能互通，如果不通，可以尝试重启路由器，重启的作用是换一个新的ip，也许就通了\n\n<!-- more -->\n\n## 步骤\n1. 把服务器部署在内网机器上，比如我的博客在内网可以访问:192.168.1.100:8088\n2. 登录路由器，配置“端口转发”，把请求路由器8088端口的请求，转发到请求192.168.1.100:8088\n3. 登录公网服务器，执行远程端口转发命令：\n\n```\nssh -C -f -N -g -L 80:101.245.198.155:8088 kyg@101.245.198.155\n```\n\n表示，请求公网80端口的请求，会被转发到路由器（101.245.198.155）的8088端口\n\n## 保持转发链接不中断（自动重连）\n查看任务\n`crontab -l`\n\n创建任务\n`crontab -e`\n\n每小时重连一次\n`0 * * * * sh conn.sh`\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (31, '多环境下autoconfig使用的小例子', '\n## 为什么使用Autoconfig\n在一个应用中，我们总是会遇到一些参数，例如：\n\n- 数据库服务器IP地址、端口、用户名；\n- 用来保存上传资料的目录。\n- 一些参数，诸如是否打开cache、加密所用的密钥名称等等。\n\n这些参数有一个共性，那就是：它们和应用的逻辑无关，只和当前环境、当前系统用户相关。以下场景很常见：\n\n- 在开发、测试、发布阶段，使用不同的数据库服务器；\n- 在开发阶段，使用Windows的A开发者将用户上传的文件存放在d:my_upload目录中，而使用Linux的B开发者将同样的文件存放在/home/myname/my_upload目录中。\n- 在开发阶段设置cache=off，在生产环境中设置cache=on。\n- 很明显，这些参数不适合被“硬编码”在配置文件或代码中。因为每一个从源码库中取得它们的人，都有可能需要修改它们，使之与自己的环境相匹配, autoconfig就是很好的选择。\n\n<!-- more -->\n\n## 引入插件\n在`pom.xml`中引入插件，下面为多环境配置\n\n```\n<plugin.autoconfig.version>1.2</plugin.autoconfig.version>\n\n...\n\n<!-- autoconfig -->\n<plugin>\n    <groupId>com.alibaba.citrus.tool</groupId>\n    <artifactId>autoconfig-maven-plugin</artifactId>\n    <version>${plugin.autoconfig.version}</version>\n    <executions>\n        <execution>\n            <id>compile</id>\n            <phase>compile</phase>\n            <goals>\n                <goal>autoconfig</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <userProperties>${antx.path}</userProperties>\n    </configuration>\n</plugin>\n\n...\n\n<profiles>\n    <profile>\n        <id>dev</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n            <antx.path>${user.home}/antx-dev.properties</antx.path>\n        </properties>\n    </profile>\n    <profile>\n        <id>prod</id>\n        <properties>\n            <antx.path>${user.home}/antx-prod.properties</antx.path>\n        </properties>\n    </profile>\n</profiles>\n```\n\n## 配置\n在`src/main/resources`下创建目录`Meta-INF/autoconfig`，在目录下创建文件`auto-config.xml`, 下面是我的配置（依个人而定）:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config>\n    <group>\n        <!-- dubbo -->\n        <property name=\"api.dubbo.name\" description=\"项目名字\" defaultValue=\"api\"></property>\n        <property name=\"api.dubbo.registry.address\" description=\"dubbo注册地址\"\n                  defaultValue=\"zookeeper://127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183\"></property>\n        <property name=\"api.dubbo.protocol.port\" description=\"dubbo注册端口\" defaultValue=\"-1\"></property>\n        <property name=\"api.dubbo.timeout\" description=\"dubbo超时时间\" defaultValue=\"10000\"></property>\n        <property name=\"api.dubbo.api.version\" description=\"api提供接口的版本\" defaultValue=\"1.0.0\"></property>\n\n        <!-- redis -->\n        <property name=\"api.redis.maxTotal\" description=\"redis最大连接数\" defaultValue=\"1000\"></property>\n        <property name=\"api.redis.minIdle\" description=\"redis最小等待数\" defaultValue=\"50\"></property>\n        <property name=\"api.redis.maxIdle\" description=\"redis最大等待数\" defaultValue=\"100\"></property>\n        <property name=\"api.redis.testOnBorrow\" description=\"redis测试支持\" defaultValue=\"true\"></property>\n        <property name=\"api.redis.host\" description=\"redis主机ip\" defaultValue=\"127.0.0.1\"></property>\n        <property name=\"api.redis.port\" description=\"redis主机端口\" defaultValue=\"6379\"></property>\n        <property name=\"api.redis.password\" description=\"redis密码\" defaultValue=\"123456\"></property>\n\n        <!--jdbc-->\n        <property name=\"api.jdbc.driver\" description=\"jdbc驱动\" defaultValue=\"com.mysql.jdbc.Driver\"></property>\n        <property name=\"api.jdbc.url\" description=\"jdbc地址\" defaultValue=\"jdbc:mysql://127.0.0.1:3306/api\"></property>\n        <property name=\"api.jdbc.username\" description=\"jdbc用户名\" defaultValue=\"root\"></property>\n        <property name=\"api.jdbc.password\" description=\"jdbc密码\" defaultValue=\"123456\"></property>\n\n        <!-- log4j2 -->\n        <property name=\"api.log4j2.home\" description=\"log4j2日志的文件主目录\" defaultValue=\"/root/logs/api\"></property>\n\n        <property name=\"api.slow.method.time\" description=\"慢方法时间(秒)\" defaultValue=\"10\"></property>\n        <property name=\"api.slow.interface.time\" description=\"慢接口时间(秒)\" defaultValue=\"10\"></property>\n        <property name=\"api.redis.prefix.key\" description=\"redis键的前缀\" defaultValue=\"api\"></property>\n        <property name=\"api.cache.open\" description=\"是否开启缓存,Y:开启,N:不开启\" defaultValue=\"Y\"></property>\n    </group>\n    <script>\n        <generate template=\"app.properties\"></generate>\n        <generate template=\"applicationContext-datasource.xml\"></generate>\n        <generate template=\"applicationContext-provider.xml\"></generate>\n        <generate template=\"applicationContext-redis.xml\"></generate>\n        <generate template=\"log4j2.xml\"></generate>\n    </script>\n</config>\n```\n\n## 使用\n在上一步中可以看到antx将会替换五个文件，下面是其中一个文件的配置`applicationContext-redis.xml`:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nohttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\">\n\n    <bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n        <property name=\"maxTotal\" value=\"${api.redis.maxTotal}\"></property>\n        <property name=\"minIdle\" value=\"${api.redis.minIdle}\"></property>\n        <property name=\"maxIdle\" value=\"${api.redis.maxIdle}\"></property>\n        <property name=\"testOnBorrow\" value=\"${api.redis.testOnBorrow}\"></property>\n    </bean>\n\n    <bean id=\"jedisConnectionFactory\" class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\n          p:hostName=\"${api.redis.host}\" p:port=\"${api.redis.port}\" p:password=\"${api.redis.password}\" p:poolConfig-ref=\"poolConfig\"></bean>\n\n    <bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\">\n        <property name=\"connectionFactory\" ref=\"jedisConnectionFactory\"></property>\n        <property name=\"keySerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" ></bean>\n        </property>\n        <property name=\"valueSerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer\"></bean>\n        </property>\n    </bean>\n</beans>\n```\n\n> 在项目`mvn clean install`的时候，antx会自动替换它所包含的文件，可以再`target`目录下查看指定的文件是否被替换成功\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (32, '在ubuntu14.04下安装nginx服务器', '\n## 下载安装\n```\nsudo apt-get install nginx\n```\n\n安装完成后打开浏览器输入`http://localhost`, 看到下图代表安装成功:\n\n<!-- more -->\n\n![nginx](https://kangyonggan.com/upload/20170101125316443.png)\n\n### 常用命令\n1. 启动: `nginx -c /etc/nginx/nginx.conf`\n2. 停止: `nginx -s stop`\n3. 重新加载（配置）: `nginx -s reload`\n4. 重新打开日志文件: `nginx -s reopen`\n\n## 动静分离反向代理配置\n修改`/etc/nginx/sites-available/default`配置:\n\n```\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        # Make site accessible from http://localhost/\n        server_name localhost;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # try_files $uri $uri/ =404;\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n                proxy_pass http://localhost:8088;\n        }\n\n        # 设定访问静态文件直接读取不经过tomcat\n        location ^~ /static/ {\n                proxy_pass http://localhost:8088;\n                root /WEB-INF/static/;\n        }\n}\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (33, '使用配置中心代替properties', '## 生成一个项目`configcenter`\n用`cms-archetype`生成一个项目，然后在此基础上开发一个模块，用于管理配置信息（CRUD）\n\n我写的配置中心在github上: [https://github.com/kangyonggan/configcenter.git](https://github.com/kangyonggan/configcenter.git)\n\n<!-- more -->\n\n## 原理\n在spring把占位符替换之前，发送http get请求到配置中心读取配置，拿到此项目的所有配置信息后（json），把json数据解析成一对对的名值对，最后把所有的名值对全部放入系统配置中，即:`System.setProperty(name, value);`。\n\n## 具体实现\n\n在`applicationContext.xml`的最上方（也不一定最上，但一定要在所有占位符的上面）添加自定义的`bean`:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/aop\nohttp://www.springframework.org/schema/aop/spring-aop-4.0.xsd\nohttp://www.springframework.org/schema/beans\nohttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\nohttp://www.springframework.org/schema/tx\nohttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\nohttp://www.springframework.org/schema/context\nohttp://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- Activates annotation-based bean configuration -->\n    <context:annotation-config></context:annotation>\n\n    <!-- 读取属性文件，否则 java 类无法直接读取属性 -->\n    <context:property-placeholder location=\"classpath:app.properties\"></context:property>\n\n    <!-- 读取配置中心 -->\n    <bean class=\"com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer\" ></bean>\n\n    ...\n</beans>\n```\n\n`MyPropertyPlaceholderConfigurer.java`的实现:\n\n```\npackage com.kangyonggan.archetype.cmscc.biz.core;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.kangyonggan.archetype.cmscc.biz.util.HttpUtil;\nimport com.kangyonggan.archetype.cmscc.biz.util.PropertiesUtil;\nimport lombok.extern.log4j.Log4j2;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\n\n/**\n * @author kangyonggan\n * @since 2017/1/25\n */\n@Log4j2\npublic class MyPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {\n\n    public MyPropertyPlaceholderConfigurer() {\n        loadConfigs();\n    }\n\n    /**\n     * 加载配置\n     */\n    private void loadConfigs() {\n        String server = PropertiesUtil.getProperties(\"config.center.server\");\n        log.info(\"配置中心服务地址:{}\", server);\n\n        String data = HttpUtil.sendGet(server);\n\n        if (StringUtils.isEmpty(data)) {\n            throw new RuntimeException(\"读取配置中心异常\");\n        }\n\n        log.info(\"已成功获取配置中心的配置\");\n\n        JSONObject jsonObject = JSON.parseObject(data);\n        String errCode = (String) jsonObject.get(\"errCode\");\n        String errMsg = (String) jsonObject.get(\"errMsg\");\n\n        log.info(\"errCode:{}\", errCode);\n        log.info(\"errMsg:{}\", errMsg);\n\n        if (!\"success\".equals(errCode)) {\n            throw new RuntimeException(\"读取配置中心失败\");\n        }\n\n        JSONArray jsonArray = jsonObject.getJSONArray(\"configs\");\n        log.info(\"共有{}项配置!\", jsonArray.size());\n\n        load(jsonArray);\n    }\n\n    /**\n     * 加载配置\n     *\n     * @param jsonArray\n     */\n    public static void load(JSONArray jsonArray) {\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject object = jsonArray.getJSONObject(i);\n            log.info(\"正在存储配置:{}\", object);\n\n            String name = object.getString(\"name\");\n            String value = object.getString(\"value\");\n\n            System.setProperty(name, value);\n            PropertiesUtil.putProperties(name, value);\n        }\n\n        log.info(\"从配置中心加载配置完毕！！！\");\n    }\n\n}\n```\n\n其中`public static void load(JSONArray jsonArray) `之所以写成了`static`是因为我其他地方也想使用, 比如：我发现ftp的ip配置错了，然后修改了ftp的ip，但是又不想重启服务器，这时候我就会在配置中心的控制台上点一下`推送配置`,然后客户端项目就能接收到配置了，然后就需要调用load方法刷新一下内存中的配置，但有些配置刷了也没用，比如jdbc的url等。\n\n接收配置的代码`ConfigcenterController.java`:\n\n```\npackage com.kangyonggan.archetype.cmscc.web.controller.web;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer;\nimport lombok.extern.log4j.Log4j2;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.net.URLDecoder;\n\n/**\n * @author kangyonggan\n * @since 2017/1/27\n */\n@Controller\n@RequestMapping(\"configcenter\")\n@Log4j2\npublic class ConfigcenterController {\n\n    /**\n     * 接收配置中心推送过来的配置\n     *\n     * @param data\n     */\n    @RequestMapping(method = RequestMethod.POST)\n    @ResponseBody\n    public boolean receiver(@RequestParam(\"data\") String data) {\n        try {\n            data = URLDecoder.decode(data, \"UTF-8\");\n            MyPropertyPlaceholderConfigurer.load(JSONArray.parseArray(data));\n        } catch (Exception e) {\n            log.error(\"接收配置失败\", e);\n            return false;\n        }\n        return true;\n    }\n\n}\n```\n\n## 注意\n#### 日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了`pom.xml`, 如：`<log4j2.home>/Users/kyg/logs/cmscc</log4j2.home>`\n#### 配置中心服务器的地址配置在了`app.properties`，因为配置中心的地址是可能变的，所以不能硬编码，如：`app.proerperties`的内容:\n\n```\nconfig.center.server=http://localhost:7777/configuration?proj=${project.parent.artifactId}&env=${env}\n```\n\n其中`${project.parent.artifactId}`会取自`pom.xml`中父模块的artifactId,\n`${env}`指的是环境，比如开发环境，联调环境，生产环境等。我写在了pom.xml中:\n\n```\n<profiles>\n    <profile>\n        <id>local</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n            <env>local</env>\n        </properties>\n    </profile>\n    <profile>\n        <id>dev</id>\n        <properties>\n            <env>local</env>\n        </properties>\n    </profile>\n    <profile>\n        <id>uat</id>\n        <properties>\n            <env>local</env>\n        </properties>\n    </profile>\n    <profile>\n        <id>hd</id>\n        <properties>\n            <env>local</env>\n        </properties>\n    </profile>\n    <profile>\n        <id>prod</id>\n        <properties>\n            <env>local</env>\n        </properties>\n    </profile>\n</profiles>\n```\n\n我把使用配置中心的项目也写了一个项目原型,地址在:[https://github.com/kangyonggan/cmscc-archetype.git](https://github.com/kangyonggan/cmscc-archetype.git)\n\n## 附配置中心推送配置的代码\n```\n/**\n * 推送配置\n *\n * @param id\n * @param env\n * @return\n */\n@RequestMapping(value = \"push\", method = RequestMethod.POST)\n@RequiresPermissions(\"CORE_PROJECT\")\n@ResponseBody\npublic Map<String, Object> push(@RequestParam(\"id\") Long id, @RequestParam(\"env\") String env) {\n    Map<String, Object> resultMap = getResultMap();\n    Project project = projectService.findProjectById(id);\n\n    if (project != null && StringUtils.isNotEmpty(project.getPushUrl())) {\n        List<Configuration> configurations = configurationService.findProjectConfigurations(project.getCode(), env);\n        String json = JSON.toJSONString(configurations);\n        try {\n            String data = URLEncoder.encode(json, \"UTF-8\");\n            String result = HttpUtil.sendPost(project.getPushUrl(), \"data=\" + data);\n            if (!\"true\".equals(result)) {\n                setResultMapFailure(resultMap, \"推送失败，请稍后再试！\");\n            }\n        } catch (Exception e) {\n            log.error(\"推送配置失败\", e);\n            setResultMapFailure(resultMap);\n        }\n    } else {\n        setResultMapFailure(resultMap);\n    }\n\n    return resultMap;\n}\n```\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (34, '使用U盘安装CentOS7最小安装版', '\n## 下载镜像文件和刻录工具\n1. CentOS7最小安装版镜像文件下载地址：[http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso](http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso)\n\n2. 刻录工具下载地址：[https://cn.ultraiso.net/uiso9_cn.exe](https://cn.ultraiso.net/uiso9_cn.exe)\n\n<!-- more -->\n\n## 把系统镜像刻录到U盘\n打开刻录工具`UltraISO`，【文件】-->【打开】-->【选择下载好的镜像CentOS-7-x86_64-Minimal-1611.iso】\n\n![打开镜像](https://kangyonggan.com/upload/centos-001.png)\n\n【启动】-->【写入硬盘映像...】\n\n![写入硬盘映像](https://kangyonggan.com/upload/centos-002.png)\n\n这个过程会格式化U盘，请先备份U盘内的数据，然后点击【写入】，写入过程需要一些时间。\n\n![写入](https://kangyonggan.com/upload/centos-003.png)\n\n一会之后，写入完成！至此，你就完成了准备工作“把系统镜像刻录到U盘”，接下来就是要用U盘安装系统了。\n\n![写入成功](https://kangyonggan.com/upload/centos-004.png)\n\n## 使用U盘启动\n在按开机按钮后，点按F12（大多数品牌的电脑都是按F12进入一次性启动项），进入启动项后，选择带USB字样的那一项进入\n\n![bios-usb](https://kangyonggan.com/upload/centos-005.jpg)\n\n进入CentOS7的安装界面，选择第一行`Install CentOS Linux 7`\n\n![安装CentOS7](https://kangyonggan.com/upload/centos-006.jpg)\n\n## 安装系统\n选择系统语言，这里我选择的是英语（推荐使用英语）。\n\n![选择语言](https://kangyonggan.com/upload/centos-015.jpg)\n\n选择磁盘，点击【SYSTEM】-->【INSTALLION DESTINATION】\n\n![选择磁盘](https://kangyonggan.com/upload/centos-007.jpg)\n\n选中自己电脑的硬盘，点击【Done】\n\n![选中自己电脑的硬盘](https://kangyonggan.com/upload/centos-008.jpg)\n\n释放磁盘空间，点击【Reclaim space】\n\n![释放磁盘空间](https://kangyonggan.com/upload/centos-009.jpg)\n\n删除老系统占用的空间，点击【Delete】\n\n![删除老系统占用的空间](https://kangyonggan.com/upload/centos-010.jpg)\n\n删除后点击【Reclaim space】完成。\n\n![删除老系统占用的空间完成](https://kangyonggan.com/upload/centos-011.jpg)\n\n开始安装，点击【Begin Installation】\n\n![开始安装](https://kangyonggan.com/upload/centos-012.jpg)\n\n此时会进入漫长的安装过程（机器配置好的话会很快），点击【ROOT PASSWORD】设置root的密码。\n\n![设置root的密码](https://kangyonggan.com/upload/centos-013.jpg)\n\nroot密码设置完成后点击【DONE】\n\n![设置root的密码完成](https://kangyonggan.com/upload/centos-014.jpg)\n\n然后就等吧，直到右下角出现【Reboot】，说明安装完毕！\n\n![安装完毕](https://kangyonggan.com/upload/centos-016.jpg)\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (35, '使用openssl生成RSA密钥对', '\n## 生成秘钥对\n### 生成RSA私钥，以X509编码，指定生成的密钥的位数为2048位，该步生成的私钥只是临时文件，以便第二步将私钥转为PKCS#8编码。\n\n```\nopenssl genrsa -out rsa_private_key_2048.pem 2048\n```\n\n<!-- more -->\n\n### 将上一步生成的RSA私钥转换成PKCS#8编码，作为最终使用的私钥。\n\n```\nopenssl pkcs8 -topk8 -in rsa_private_key_2048.pem -out pkcs8_rsa_private_key_2048.pem -nocrypt\n```\n\n### 导出RSA公钥，以X509编码，作为最终交换的公钥。\n\n```\nopenssl rsa -in rsa_private_key_2048.pem -out rsa_public_key_2048.pem -pubout\n```\n\n> 注：一般Linux系统都装有openssl工具，在windows下可以安装OpenSSL工具包。\n\n## 用法\n### 加密工具\n`CryptoUtil.java`:\n\n```\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport lombok.extern.log4j.Log4j2;\nimport java.io.*;\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\n\n/**\n * @author kangyonggan\n * @since 2016/12/27\n */\n@Log4j2\npublic class CryptoUtil {\n\n    /**\n     * 获取公钥对象\n     *\n     * @param inputStream  公钥输入流\n     * @param keyAlgorithm 密钥算法\n     * @return 公钥对象\n     * @throws Exception\n     */\n    public static PublicKey getPublicKey(InputStream inputStream, String keyAlgorithm) throws Exception {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n            StringBuilder sb = new StringBuilder();\n            String readLine;\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == \'-\') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                    sb.append(\'\n\');\n                }\n            }\n            X509EncodedKeySpec pubX509 = new X509EncodedKeySpec(Base64.decodeBase64(sb.toString()));\n            KeyFactory keyFactory = KeyFactory.getInstance(keyAlgorithm);\n            PublicKey publicKey = keyFactory.generatePublic(pubX509);\n\n            return publicKey;\n        } catch (FileNotFoundException e) {\n            throw new Exception(\"公钥路径文件不存在\");\n        } catch (IOException e) {\n            throw new Exception(\"读取公钥异常\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(String.format(\"生成密钥工厂时没有[%s]此类算法\", keyAlgorithm));\n        } catch (InvalidKeySpecException e) {\n            throw new Exception(\"生成公钥对象异常\");\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            } catch (IOException e) {\n                log.error(e);\n            }\n        }\n    }\n\n    /**\n     * 获取私钥对象\n     *\n     * @param inputStream  私钥输入流\n     * @param keyAlgorithm 密钥算法\n     * @return 私钥对象\n     * @throws Exception\n     */\n    public static PrivateKey getPrivateKey(InputStream inputStream, String keyAlgorithm) throws Exception {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n            StringBuilder sb = new StringBuilder();\n            String readLine;\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == \'-\') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                    sb.append(\'\n\');\n                }\n            }\n            PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(Base64.decodeBase64(sb.toString()));\n            KeyFactory keyFactory = KeyFactory.getInstance(keyAlgorithm);\n            PrivateKey privateKey = keyFactory.generatePrivate(priPKCS8);\n\n            return privateKey;\n        } catch (FileNotFoundException e) {\n            throw new Exception(\"私钥路径文件不存在\");\n        } catch (IOException e) {\n            throw new Exception(\"读取私钥异常\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(\"生成私钥对象异常\");\n        } catch (InvalidKeySpecException e) {\n            throw new Exception(\"生成私钥对象异常\");\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            } catch (IOException e) {\n                log.error(e);\n            }\n        }\n    }\n\n    /**\n     * 数字签名函数入口\n     *\n     * @param plainBytes    待签名明文字节数组\n     * @param privateKey    签名使用私钥\n     * @param signAlgorithm 签名算法\n     * @return 签名后的字节数组\n     * @throws Exception\n     */\n    public static byte[] digitalSign(byte[] plainBytes, PrivateKey privateKey, String signAlgorithm) throws Exception {\n        try {\n            Signature signature = Signature.getInstance(signAlgorithm);\n            signature.initSign(privateKey);\n            signature.update(plainBytes);\n            byte[] signBytes = signature.sign();\n\n            return signBytes;\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(String.format(\"数字签名时没有[%s]此类算法\", signAlgorithm));\n        } catch (InvalidKeyException e) {\n            throw new Exception(\"数字签名时私钥无效\");\n        } catch (SignatureException e) {\n            throw new Exception(\"数字签名时出现异常\");\n        }\n    }\n\n    /**\n     * 验证数字签名函数入口\n     *\n     * @param plainBytes    待验签明文字节数组\n     * @param signBytes     待验签签名后字节数组\n     * @param publicKey     验签使用公钥\n     * @param signAlgorithm 签名算法\n     * @return 验签是否通过\n     * @throws Exception\n     */\n    public static boolean verifyDigitalSign(byte[] plainBytes, byte[] signBytes, PublicKey publicKey, String signAlgorithm) throws Exception {\n        boolean isValid;\n        try {\n            Signature signature = Signature.getInstance(signAlgorithm);\n            signature.initVerify(publicKey);\n            signature.update(plainBytes);\n            isValid = signature.verify(signBytes);\n            return isValid;\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(String.format(\"验证数字签名时没有[%s]此类算法\", signAlgorithm));\n        } catch (InvalidKeyException e) {\n            throw new Exception(\"验证数字签名时公钥无效\");\n        } catch (SignatureException e) {\n            throw new Exception(\"验证数字签名时出现异常\");\n        }\n    }\n\n    /**\n     * 加密\n     *\n     * @param plainBytes      明文字节数组\n     * @param publicKey       公钥\n     * @param keyLength       密钥bit长度\n     * @param reserveSize     padding填充字节数，预留11字节\n     * @param cipherAlgorithm 加解密算法，一般为RSA/ECB/PKCS1Padding\n     * @return 加密后字节数组，不经base64编码\n     * @throws Exception\n     */\n    public static byte[] encrypt(byte[] plainBytes, PublicKey publicKey, int keyLength, int reserveSize, String cipherAlgorithm) throws Exception {\n        int keyByteSize = keyLength / 8; // 密钥字节数\n        int encryptBlockSize = keyByteSize - reserveSize; // 加密块大小=密钥字节数-padding填充字节数\n        int nBlock = plainBytes.length / encryptBlockSize;// 计算分段加密的block数，向上取整\n        if ((plainBytes.length % encryptBlockSize) != 0) { // 余数非0，block数再加1\n            nBlock += 1;\n        }\n\n        try {\n            Cipher cipher = Cipher.getInstance(cipherAlgorithm);\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\n            // 输出buffer，大小为nBlock个keyByteSize\n            ByteArrayOutputStream outbuf = new ByteArrayOutputStream(nBlock * keyByteSize);\n            // 分段加密\n            for (int offset = 0; offset < plainBytes.length; offset += encryptBlockSize) {\n                int inputLen = plainBytes.length - offset;\n                if (inputLen > encryptBlockSize) {\n                    inputLen = encryptBlockSize;\n                }\n\n                // 得到分段加密结果\n                byte[] encryptedBlock = cipher.doFinal(plainBytes, offset, inputLen);\n                // 追加结果到输出buffer中\n                outbuf.write(encryptedBlock);\n            }\n\n            outbuf.flush();\n            outbuf.close();\n            return outbuf.toByteArray();\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(String.format(\"没有[%s]此类加密算法\", cipherAlgorithm));\n        } catch (NoSuchPaddingException e) {\n            throw new Exception(String.format(\"没有[%s]此类填充模式\", cipherAlgorithm));\n        } catch (InvalidKeyException e) {\n            throw new Exception(\"无效密钥\");\n        } catch (IllegalBlockSizeException e) {\n            throw new Exception(\"加密块大小不合法\");\n        } catch (BadPaddingException e) {\n            throw new Exception(\"错误填充模式\");\n        } catch (IOException e) {\n            throw new Exception(\"字节输出流异常\");\n        }\n    }\n\n    /**\n     * RSA解密\n     *\n     * @param encryptedBytes  加密后字节数组\n     * @param privateKey      私钥\n     * @param keyLength       密钥bit长度\n     * @param reserveSize     padding填充字节数，预留11字节\n     * @param cipherAlgorithm 加解密算法，一般为RSA/ECB/PKCS1Padding\n     * @return 解密后字节数组，不经base64编码\n     * @throws Exception\n     */\n    public static byte[] decrypt(byte[] encryptedBytes, PrivateKey privateKey, int keyLength, int reserveSize, String cipherAlgorithm) throws Exception {\n        int keyByteSize = keyLength / 8; // 密钥字节数\n        int decryptBlockSize = keyByteSize - reserveSize; // 解密块大小=密钥字节数-padding填充字节数\n        int nBlock = encryptedBytes.length / keyByteSize;// 计算分段解密的block数，理论上能整除\n\n        try {\n            Cipher cipher = Cipher.getInstance(cipherAlgorithm);\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n            // 输出buffer，大小为nBlock个decryptBlockSize\n            ByteArrayOutputStream outbuf = new ByteArrayOutputStream(nBlock * decryptBlockSize);\n            // 分段解密\n            for (int offset = 0; offset < encryptedBytes.length; offset += keyByteSize) {\n                // block大小: decryptBlock 或 剩余字节数\n                int inputLen = encryptedBytes.length - offset;\n                if (inputLen > keyByteSize) {\n                    inputLen = keyByteSize;\n                }\n\n                // 得到分段解密结果\n                byte[] decryptedBlock = cipher.doFinal(encryptedBytes, offset, inputLen);\n                // 追加结果到输出buffer中\n                outbuf.write(decryptedBlock);\n            }\n\n            outbuf.flush();\n            outbuf.close();\n            return outbuf.toByteArray();\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(String.format(\"没有[%s]此类解密算法\", cipherAlgorithm));\n        } catch (NoSuchPaddingException e) {\n            throw new Exception(String.format(\"没有[%s]此类填充模式\", cipherAlgorithm));\n        } catch (InvalidKeyException e) {\n            throw new Exception(\"无效密钥\");\n        } catch (IllegalBlockSizeException e) {\n            throw new Exception(\"解密块大小不合法\");\n        } catch (BadPaddingException e) {\n            throw new Exception(\"错误填充模式\");\n        } catch (IOException e) {\n            throw new Exception(\"字节输出流异常\");\n        }\n    }\n\n    /**\n     * 字符数组转16进制字符串\n     *\n     * @param bytes\n     * @return\n     */\n    public static String bytes2string(byte[] bytes, int radix) {\n        // 2个16进制字符占用1个字节，8个二进制字符占用1个字节\n        int size = 2;\n        if (radix == 2) {\n            size = 8;\n        }\n        StringBuilder sb = new StringBuilder(bytes.length * size);\n        for (int i = 0; i < bytes.length; i++) {\n            int integer = bytes[i];\n            while (integer < 0) {\n                integer = integer + 256;\n            }\n            String str = Integer.toString(integer, radix);\n            sb.append(StringUtils.leftPad(str.toUpperCase(), size, \"0\"));\n        }\n        return sb.toString();\n    }\n}\n```\n\n### 签名\n```\nbyte[] signBytes = CryptoUtil.digitalSign(xml.getBytes(\"UTF-8\"), privateKey, \"SHA1WithRSA\");\n```\n\n### 加密\n```\nbyte[] encryptedBytes = CryptoUtil.encrypt(xmlBytes, publicKey, 2048, 11, \"RSA/ECB/PKCS1Padding\");\n```\n\n### 解密\n```\nbyte[] xmlBytes = CryptoUtil.decrypt(encryptedBytes, privateKey, 2048, 11, \"RSA/ECB/PKCS1Padding\");\n```\n\n### 验签\n```\nboolean isValid = CryptoUtil.verifyDigitalSign(xmlBytes, signBytes, publicKey, \"SHA1WithRSA\");\n```\n\n### 加载私钥\n```\n/**\n * 加载私钥\n */\nprivate void loadPrivateKey() {\n    String privateKeyPath = null;\n    InputStream inputStream = null;\n    try {\n        // TODO\n        privateKeyPath = \"私钥路径\";\n        inputStream = new FileInputStream(privateKeyPath);\n        privateKey = CryptoUtil.getPrivateKey(inputStream, \"RSA\");\n    } catch (Exception e) {\n        log.error(\"无法加载己方私钥[{}]\", privateKeyPath);\n        log.error(e.getMessage(), e);\n    } finally {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        } catch (Exception e) {\n            log.error(e);\n        }\n    }\n}\n```\n\n### 加载公钥\n```\n/**\n * 加载公钥\n */\nprivate void loadPublicKey() {\n    String publicKeyPath = null;\n    InputStream inputStream = null;\n    try {\n        // TODO\n        publicKeyPath = \"公钥路径\";\n        inputStream = new FileInputStream(publicKeyPath);\n        publicKey = CryptoUtil.getPublicKey(inputStream, \"RSA\");\n    } catch (Exception e) {\n        log.error(\"无法加载对方公钥[{}]\", publicKeyPath);\n        log.error(e.getMessage(), e);\n    } finally {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        } catch (Exception e) {\n            log.error(e);\n        }\n    }\n}\n```\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (36, '使用Log4j正则替换功能隐藏敏感信息', '## pom.xml\n```\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.16</version>\n</dependency>\n```\n\n<!-- more -->\n\n## log4j.xml\n```\n<?xml version=\"1.0\" encoding=\"GBK\" ?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n<log4j:configuration>\n\n    <appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\">\n        <!--<layout class=\"org.apache.log4j.PatternLayout\">-->\n        <!--<param name=\"ConversionPattern\" value=\"%d %t [%F:%L] %-5p : %m%n\" />-->\n        <!--</layout>-->\n        <layout class=\"com.kangyonggan.demo.MyPatternLayout\">\n            <param name=\"ConversionPattern\" value=\"%d %t [%F:%L] %-5p : %m%n\"/>\n        </layout>\n    </appender>\n\n    <root>\n        <level value=\"debug\"></level>\n        <appender-ref ref=\"console\"></appender>\n    </root>\n</log4j:configuration>\n```\n\n## MyPatternLayout.java\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.apache.log4j.spi.LoggingEvent;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * @author kangyonggan\n * @since 2017/3/20\n */\npublic class MyPatternLayout extends PatternLayout {\n\n    private static final String HIDDEN = \"$1$2$3****$5$6\";\n    private static final Pattern MOBILE_PATTERN = Pattern.compile(\"(\\D|^)(1)(3\\d|4[57]|5[^4]|7[0137]|8\\d)(\\d{4})(\\d{4})(\\D|$)\");\n\n    @Override\n    public String format(LoggingEvent event) {\n        if (event.getMessage() instanceof String) {\n            String message = event.getRenderedMessage();\n\n            Matcher matcher = MOBILE_PATTERN.matcher(message);\n\n            if (matcher.find()) {\n                String maskedMessage = matcher.replaceAll(HIDDEN);\n\n                Throwable throwable = event.getThrowableInformation() != null ? event.getThrowableInformation().getThrowable() : null;\n\n                LoggingEvent maskedEvent = new LoggingEvent(\n                        event.fqnOfCategoryClass,\n                        Logger.getLogger(event.getLoggerName()),\n                        event.timeStamp,\n                        event.getLevel(),\n                        maskedMessage,\n                        throwable);\n\n                return super.format(maskedEvent);\n            }\n        }\n\n        return super.format(event);\n    }\n}\n```\n\n## Test.java\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.log4j.Logger;\n\n/**\n * @author kangyonggan\n * @since 2017/3/20\n */\npublic class Test {\n\n    private static final Logger logger = Logger.getLogger(Test.class);\n\n    public static void main(String[] args) {\n        logger.info(\"手机号1: 13911119999，姓名：qweqe\");\n        logger.info(\"手机号2: asd13911119999asd\");\n        logger.info(\"假手机号1: 139a11119999\");\n        logger.info(\"假手机号2: 139111199991\");\n        logger.info(\"假手机号3: 139111199991\");\n        logger.info(\"假手机号4: 444139111199991\");\n        logger.info(\"假手机号5: 44413911119999\");\n\n        try {\n            int a = 1 / 0;\n        } catch (Exception e) {\n            logger.error(\"13911110000\", e);\n        }\n    }\n\n}\n```\n\n## 输出\n```\n2017-03-21 15:32:50,163 main [Test.java:14] INFO  : 手机号1: 139****9999，姓名：qweqe\n2017-03-21 15:32:50,166 main [Test.java:15] INFO  : 手机号2: asd139****9999asd\n2017-03-21 15:32:50,166 main [Test.java:16] INFO  : 假手机号1: 139a11119999\n2017-03-21 15:32:50,166 main [Test.java:17] INFO  : 假手机号2: 139111199991\n2017-03-21 15:32:50,166 main [Test.java:18] INFO  : 假手机号3: 139111199991\n2017-03-21 15:32:50,167 main [Test.java:19] INFO  : 假手机号4: 444139111199991\n2017-03-21 15:32:50,167 main [Test.java:20] INFO  : 假手机号5: 44413911119999\n2017-03-21 15:32:50,167 main [Test.java:25] ERROR : 13911110000\njava.lang.ArithmeticException: / by zero\n  at com.kangyonggan.demo.Test.main(Test.java:23)\n\nProcess finished with exit code 0\n```\n\n> 例子中的正则表达式写的比较弱，请根据实际情况自己写。\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (37, '使用Log4j2让项目输出info级别的日志和debug级别的sql', '\n> log4j2的使用方法请参考我之前的一篇文章\n\n让项目输出info级别的日志，让项目输出debug级别的日志，`log4j2.xml`的配置如下:\n\n<!-- more -->\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" monitorInterval=\"300\">\n    <properties>\n        <property name=\"LOG_HOME\">/Users/kyg/logs/simconf</property>\n    </properties>\n\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n        </Console>\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <Async name=\"AsyncAll\">\n            <AppenderRef ref=\"AllFile\"></AppenderRef>\n        </Async>\n        <Async name=\"AsyncError\">\n            <AppenderRef ref=\"ErrorFile\"></AppenderRef>\n        </Async>\n    </Appenders>\n    <Loggers>\n        <Logger name=\"com.kangyonggan.app.simconf.mapper\" level=\"debug\" additivity=\"false\">\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\n        </Logger>\n\n        <Root level=\"info\" additivity=\"true\">\n            <AppenderRef ref=\"Console\"></AppenderRef>\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n只配置log4j2.xml是不够的，因为Mybatis默认使用的不是log4j2，默认使用的顺序如下:\n\n> SLF4J > Apache Commons Logging > Log4j2 > Log4j > JDK logging\n\n所有我们还需要让Mybatis使用log4j2来输出日志:\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    ...\n    <property name=\"configLocation\" value=\"classpath:mybatis.xml\"></property>\n    ...\n</bean>\n```\n\n`mybatis.xml`的内容:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <!--使用log4j2输出日志-->\n        <setting name=\"logImpl\" value=\"LOG4J2\"></setting>\n    </settings>\n</configuration>\n```\n\n小记：本人单线程测试log4j和log4j2的性能，结果如下:\n输出10000个debug+10000个info+10000个error到日志文件，log4j2是log4j速度的1.8倍左右。\n输出100000个debug+100000个info+100000个error到日志文件，log4j2是log4j速度的2.6倍左右。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (38, '使用log4j2的SMTPAppender发送邮件报警', '\n## 目的\n1. 当项目中有`报错时`，要能`自动的`、`及时的`发邮件通知`指定人员`。\n2. 邮件中的错误日志要全面，最好能把当前线程的全部日志输出，不论日志级别。\n3. 仅当日志为error级别时，才发邮件通知。\n4. 可以配置邮件抄送给其他人。\n\n<!-- more -->\n\n## 引入依赖\n```\n<log4j2.api.version>2.5</log4j2.api.version>\n\n<!--Log4j2-->\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n```\n\n## 配置`log4j2.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" monitorInterval=\"300\">\n    <properties>\n        <property name=\"LOG_HOME\">/Users/kyg/logs/cms</property>\n    </properties>\n\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n        </Console>\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <SMTP name=\"Mail\" subject=\"内容管理系统 - 报警通知\" to=\"kangyonggan@gmail.com\" from=\"kangyg2017@163.com\"\n              smtpHost=\"smtp.163.com\" smtpUsername=\"kangyg2017@163.com\" smtpPassword=\"xxxxxxxx\" bufferSize=\"50\" >\n        </SMTP>\n        <Async name=\"AsyncAll\">\n            <AppenderRef ref=\"AllFile\"></AppenderRef>\n        </Async>\n        <Async name=\"AsyncError\">\n            <AppenderRef ref=\"ErrorFile\"></AppenderRef>\n            <AppenderRef ref=\"Mail\" ></AppenderRef>\n        </Async>\n    </Appenders>\n    <Loggers>\n        <Root level=\"debug\" additivity=\"true\">\n            <AppenderRef ref=\"Console\"></AppenderRef>\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n上面的配置中，关于报警的配置有两点:\n\n```\n<AppenderRef ref=\"Mail\" ></AppenderRef>\n```\n\n```\n<SMTP name=\"Mail\" subject=\"内容管理系统 - 报警通知\" to=\"kangyonggan@gmail.com\" from=\"kangyg2017@163.com\"\n      smtpHost=\"smtp.163.com\" smtpUsername=\"kangyg2017@163.com\" smtpPassword=\"xxxxxxxx\" bufferSize=\"50\" >\n</SMTP>\n```\n\n## 附加说明\n- 异步输出日志，不会影响主线程性能\n- error日志单独输出到error.log文件\n- all.log包含所有级别的日志\n- 每天会备份旧的日志文件，产生新的日志文件\n- 如果一天之中有日志文件超出大小限制(上面配的500M)，会存档当前文件，另外再创建一个新的文件\n- 日志文件只保存近期的（上面配置的30天）\n\n> 温馨提示：由于是个人项目，所以没配置多个邮件接收者，如有需要，请参考[官方文档](http://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender)\n\n## 收到的邮件截图\n![mail](https://kangyonggan.com/upload/20170123163536603.png)\n![mail](https://kangyonggan.com/upload/20170123163703359.png)\n![mail](https://kangyonggan.com/upload/20170123163703945.png)\n![mail](https://kangyonggan.com/upload/20170123163704569.png)\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (39, '使用aop和自定义注解打印出参入参日志和方法执行时间', '\n## 自定义注解\n`LogTime.java`:\n\n```\npackage com.kangyonggan.api.common.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * 在方法上加此注解会打印入参和出参，会计算方法消耗的时间\n *\n * @author kangyonggan\n * @since 2016/12/8\n */\n@Documented\n@Inherited\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LogTime {\n}\n```\n\n<!-- more -->\n\n## 主要逻辑：\n\n```\npackage com.kangyonggan.api.common.aop;\n\nimport com.kangyonggan.api.common.annotation.LogTime;\nimport com.kangyonggan.api.common.util.AopUtil;\nimport com.kangyonggan.api.common.util.DateUtils;\nimport com.kangyonggan.api.common.util.PropertiesUtil;\nimport lombok.extern.log4j.Log4j2;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.reflect.MethodSignature;\n\nimport java.lang.reflect.Method;\n\n/**\n * 切于内部service的实现方法上， 需要在方法上手动加上@LogTime注解， 打印入参和出参，打印方法执行时间, 慢方法打印error日志\n *\n * @author kangyonggan\n * @since 2016/11/30\n */\n@Log4j2\npublic class LogAop {\n\n    /**\n     * 设定的方法最大执行时间\n     */\n    private Long slowMethodTime;\n\n    public LogAop() {\n        String val = PropertiesUtil.getPropertiesOrDefault(\"slow.method.time\", \"10\");\n        slowMethodTime = Long.parseLong(val);\n    }\n\n    /**\n     * @param joinPoint\n     * @return\n     * @throws Throwable\n     */\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object args[] = joinPoint.getArgs();\n        Class clazz = joinPoint.getTarget().getClass();\n\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n        String targetName = \"[\" + clazz.getName() + \".\" + method.getName() + \"]\";\n\n        LogTime logTime = method.getAnnotation(LogTime.class);\n        Object result;\n        if (logTime != null) {\n            log.info(\"进入方法:\" + targetName + \" - args:\" + AopUtil.getStringFromRequest(args));\n\n            long beginTime = DateUtils.getNow().getTime();\n            result = joinPoint.proceed(args);\n            long endTime = DateUtils.getNow().getTime();\n            long time = endTime - beginTime;\n\n            log.info(\"离开方法:\" + targetName + \" - return:\" + AopUtil.getStringFromResponse(result));\n            log.info(\"方法耗时:\" + time + \"ms - \" + targetName);\n\n            if (time > slowMethodTime * 1000) {\n                log.error(\"方法执行超过设定时间\" + slowMethodTime + \"s,\" + targetName);\n            }\n        } else {\n            result = joinPoint.proceed(args);\n        }\n\n        return result;\n    }\n}\n```\n\n\n其中用到的`AopUtil.java`:\n\n```\npackage com.kangyonggan.api.common.util;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @since 2016/11/30\n */\npublic class AopUtil {\n    public static String getStringFromRequest(Object[] args) {\n        String req = \"\";\n        for (Object arg : args) {\n            if (arg == null) {\n                req = req + \"null,\";\n                continue;\n            } else if (arg instanceof List == true) {\n                req = req + JSON.toJSONString(arg);\n            } else if (arg.getClass().isArray()) {\n                req = req + JSONArray.toJSONString(arg);\n            } else if (arg instanceof Enum) {\n                req = req + JSON.toJSONString(arg) + \",\";\n            } else if (!(arg instanceof String)\n                    && !(arg instanceof BigDecimal)\n                    && !(arg instanceof Boolean)\n                    && !(arg instanceof Integer)\n                    && (arg instanceof Object)) {\n                req = req + JSON.toJSONString(arg) + \",\";\n            } else {\n                req = req + arg.toString() + \",\";\n            }\n        }\n\n        if (StringUtils.isNotEmpty(req) && req.length() > 100) {\n            return req.hashCode() + \"\";\n        } else {\n            return req;\n        }\n    }\n\n    public static String getStringFromResponse(Object arg) {\n        String rsp = \"\";\n        if (arg == null) {\n            rsp = rsp + \"null,\";\n            return rsp;\n        } else if (arg instanceof List) {\n            rsp = rsp + JSON.toJSONString(arg);\n            return rsp;\n        } else if (arg instanceof Enum) {\n            rsp = rsp + JSON.toJSONString(arg);\n            return rsp;\n        } else if (!(arg instanceof String)\n                && !(arg instanceof BigDecimal)\n                && !(arg instanceof Boolean)\n                && !(arg instanceof Integer)\n                && (arg instanceof Object)) {\n            rsp = rsp + JSON.toJSONString(arg) + \",\";\n        } else {\n            rsp = rsp + arg.toString() + \",\";\n        }\n        return rsp;\n    }\n}\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (40, '使用ace admin搭建单页面网站', '\n## 资料\n- Ace Admin [ace.zip](https://kangyonggan.com/upload/ace.zip)\n- 在线实例（已经没了） [http://kangyonggan.com](http://kangyonggan.com)\n- Github代码（已经没了） [https://github.com/kangyonggan/blog.git](https://github.com/kangyonggan/blog.git)\n\n> 网上很少有ace admin相关的资料，如需使用和学习，只能去看源代码...\n\n<!-- more -->\n\n## 目的\n做出一个类似cms后台管理系统的单页面网站，效果如下:\n\n![加载中](https://kangyonggan.com/upload/20170109223706060.png)\n\n![地址](https://kangyonggan.com/upload/20170109223708522.png)\n\n## 步骤\n由于关于ace admin的文档很少，尤其是ace admin ajax的！所以这就要我们自己来读源代码，看实例来学习了。\n\n### 搭建本地demo\n下载ace.zip并解压\n![下载](https://kangyonggan.com/upload/20170109223701593.png)\n\n拷贝到tomcat webapps目录下\n\n![拷贝到tomcat](https://kangyonggan.com/upload/20170109223709211.png)\n\n启动tomcat后，打开浏览器即可查看demo\n\n![查看demo](https://kangyonggan.com/upload/20170109223706510.png)\n\n可以先进入`Ajax Demo Pages`提前感受一下单页面的好处。\n\n### 拷贝源码+修改\n查看源码：右键-->查看源代码\n\n![源码](https://kangyonggan.com/upload/20170109223707758.png)\n\n把ace的一些核心css和js拷贝到你的html中，由于我们是要做单页面，从`Ajax Demo Pages`中可以看出，关键词是`ajax`\n所以你需要格外的关注源码中出现的`ajax`,经过搜索后发现有用的是下面两点\n\n![ajax](https://kangyonggan.com/upload/20170109223702751.png)\n![ajax](https://kangyonggan.com/upload/20170109223704068.png)\n\n点开`ace.ajax-content.js`, 如下：\n\n![ajax-content](https://kangyonggan.com/upload/20170109223702338.png)\n\n发现他是一个典型的jquery插件（不会jquery插件的看着会比较难，最好先去恶补一下），大致看一下这个插件，会发现它实现单页面的核心代码是:\n\n![geturl](https://kangyonggan.com/upload/20170109223704715.png)\n\n当用户点击超链接或者按钮时，插件代替你发起异步请求，服务器返回一个“页面”，插件拿到页面后，用下面红框框的核心代码把内容局部清空并替换，实现类似iframe的效果，给人一种我是单页面的错觉\n\n![replace](https://kangyonggan.com/upload/20170109223707144.png)\n\n对源码有个大致的了解就行，下面就可以动手搭建了。\n\n## 解读源码\n基础web环境搭建过程不再演示，我使用的freemarker模板，下面是我的html布局：\n\n```html\n<#assign ctx=\"${(rca.contextPath)!\'\'}\">\n\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"description\" content=\"\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\"/>\n\n    <div class=\"hidden ajax-append-link\" rel=\"shortcut icon\" href=\"${ctx}/static/app/images/favicon.ico\" type=\"image/x-icon\">\n    <!-- bootstrap & fontawesome -->\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/bootstrap.min.css\"></div>\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/font-awesome.min.css\"></div>\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/jquery.gritter.min.css\"></div>\n\n    <!-- page specific plugin styles -->\n\n    <!-- text fonts -->\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-fonts.min.css\"></div>\n\n    <#--skin-->\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-skins.min.css\"></div>\n\n    <!-- ace styles -->\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace.min.css\" class=\"ace-main-stylesheet\"\n          id=\"main-ace-style\"></div>\n\n    <!--[if lte IE 9]>\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-part2.min.css\" class=\"ace-main-stylesheet\"></div>\n    <![endif]-->\n\n    <!--[if lte IE 9]>\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-ie.min.css\"></div>\n    <![endif]-->\n\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/app/css/app.css\"></div>\n\n    <script src=\"${ctx}/static/ace/dist/js/jquery.min.js\"></script>\n\n    <!--[if lte IE 8]>\n    <script src=\"${ctx}/static/ace/dist/js/html5shiv.js\"></script>\n    <script src=\"${ctx}/static/ace/dist/js/respond.min.js\"></script>\n    <![endif]-->\n<@block name=\"app-style\"/>\n</head>\n<body class=\"skin-3\">\n<#include \"navbar.ftl\"/>\n\n<div class=\"main-container\" id=\"main-container\">\n\n<#if hasSidebar?? && hasSidebar==true>\n    <#include \"sidebar.ftl\"/>\n</#if>\n\n    <div class=\"main-content\">\n        <div class=\"main-content-inner\">\n        <#if home_name?? && home_name!=\'\'>\n            <div class=\"breadcrumbs\" id=\"breadcrumbs\">\n                <ul class=\"breadcrumb\">\n                    <li>\n                        <i class=\"ace-icon fa fa-tachometer home-icon\"></i>\n                        <a data-url=\"index\" href=\"#index\">${home_name}</a>\n                    </li>\n                </ul>\n            </div>\n        </#if>\n\n            <div class=\"page-content\">\n                <div class=\"page-content-area\"></div>\n            </div>\n        </div>\n    </div>\n\n<#include \"footer.ftl\"/>\n\n<#include \"modal.ftl\"/>\n\n    <a href=\"javascript:\" id=\"btn-scroll-up\" class=\"btn-scroll-up btn btn-sm btn-inverse\">\n        <i class=\"ace-icon fa fa-angle-double-up icon-only bigger-110\"></i>\n    </a>\n</div>\n\n<script>var ctx = \'${ctx}\';</script>\n<script src=\"${ctx}/static/ace/dist/js/bootstrap.min.js\"></script>\n<script src=\"${ctx}/static/libs/jquery/jquery.bootstrap.min.js\"></script>\n<script src=\"${ctx}/static/ace/dist/js/jquery.gritter.min.js\"></script>\n<script src=\"${ctx}/static/ace/dist/js/ace-extra.min.js\"></script>\n<script src=\"${ctx}/static/ace/dist/js/ace-elements.min.js\"></script>\n<script src=\"${ctx}/static/ace/dist/js/ace.min.js\"></script>\n<script src=\"${ctx}/static/app/js/app.js\"></script>\n<@block name=\"app-script\"/>\n</body>\n</html>\n```\n\n其中，`navbar.flt` `sidebar.ftl` `footer.ftl` 都是demo中的。\n如果之前使用的就是freemarker+ace admin，那么你要重点关注下面两处代码:\n\n```html\n<div class=\"page-content\">\n   <div class=\"page-content-area\"></div>\n</div>\n```\n\n核心js`app.js`\n\n```js\n$(function () {\n    // 异步加载界面\n    var $ajaxContent = $(\".page-content-area\");\n    $ajaxContent.ace_ajax({\n        \'default_url\': \'#index\',\n        \'content_url\': function (hash) {\n            return window.location.origin + window.location.pathname + \"/\" + hash;\n        },\n        \'update_active\': updateMenuActive,\n        \'update_breadcrumbs\': updateBreadcrumbs,\n        \'update_title\': updateTitle,\n        \'loading_text\': \'<span class=\"loading\">正在加载, 请稍等...</span>\'\n    });\n\n    // 监听异步加载失败事件\n    $ajaxContent.on(\"ajaxloaderror\", function (e, data) {\n        window.location.href = ctx + \'/#500\';\n    });\n});\n\n\n/**\n * 更新菜单激活状态\n *\n * @param hash\n */\nfunction updateMenuActive(hash) {\n    //  当前菜单\n    var $menu = $($(\'a[data-url=\"\' + hash + \'\"]\')[0]).parent(\"li\");\n\n    // 所有菜单\n    var $all_menus = $menu.parents(\"ul.nav-list\").find(\"li\");\n\n    // 清除所有菜单状态\n    $all_menus.removeClass(\"open\");\n    $all_menus.removeClass(\"active\");\n\n    // 父菜单\n    var $parent = $menu.parents(\"li\");\n    if ($parent.length > 0) {\n        $parent.addClass(\"open\");\n    }\n    $menu.addClass(\"active\");\n}\n\n/**\n * 更新面包屑\n *\n * @param hash\n */\nfunction updateBreadcrumbs(hash) {\n    var $menu = $(\'a[data-url=\"\' + hash + \'\"]\');\n\n    // 下面这坨代码摘自ace.ajax-content.js\n    var $breadcrumbs = $(\'.breadcrumb\');\n    if ($breadcrumbs.length > 0 && $breadcrumbs.is(\':visible\')) {\n        $breadcrumbs.find(\'> li:not(:first-child)\').remove();\n\n        var i = 0;\n        $menu.parents(\'.nav li\').each(function () {\n            var $link = $(this).find(\'> a\');\n\n            var $link_clone = $link.clone();\n            $link_clone.find(\'i,.fa,.glyphicon,.ace-icon,.menu-icon,.badge,.label\').remove();\n            var text = $link_clone.text();\n            $link_clone.remove();\n\n            var href = $link.attr(\'href\');\n\n            if (i == 0) {\n                var li = $(\'<li class=\"active\"></li>\').appendTo($breadcrumbs);\n                li.text(text);\n            } else {\n                var li = $(\'<li><a ></a></li>\').insertAfter($breadcrumbs.find(\'> li:first-child\'));\n                li.find(\'a\').attr(\'href\', href).text(text);\n            }\n            i++;\n        })\n    }\n}\n\n/**\n * 更新标题\n *\n * @param hash\n */\nfunction updateTitle(hash) {\n    var $menu = $($(\'a[data-url=\"\' + hash + \'\"]\')[0]);\n    var title = $.trim($menu.text());\n\n    if (title != \'\') {\n        document.title = title;\n    }\n}\n\n/**\n * 更新状态\n *\n * @param hash\n */\nfunction updateState(hash) {\n    updateBreadcrumbs(hash);\n    updateMenuActive(hash);\n    updateTitle(hash);\n}\n```\n\n如果你对jquery插件了解的不多，估计很难去使用`ace_ajax`，因为网上和demo中都没有使用教程，我这是根据`ace.ajax-content.js`源代码中的jquery插件反推出来的插件使用方法。\n\n在插件源代码的最后暴露出插件有哪些公共属性和方法可被你覆写和调用\n\n```js\n$.fn.aceAjax = $.fn.ace_ajax = function (option, value, value2, value3) {\n var method_call;\n\n var $set = this.each(function () {\n var $this = $(this);\n var data = $this.data(\'ace_ajax\');\n var options = typeof option === \'object\' && option;\n\n if (!data) $this.data(\'ace_ajax\', (data = new AceAjax(this, options)));\n if (typeof option === \'string\' && typeof data[option] === \'function\') {\n if(value3 != undefined) method_call = data[option](value, value2, value3);\n else if(value2 != undefined) method_call = data[option](value, value2);\n else method_call = data[option](value);\n }\n });\n\n return (method_call === undefined) ? $set : method_call;\n}\n\n$.fn.aceAjax.defaults = $.fn.ace_ajax.defaults = {\n content_url: false,\n default_url: false,\n loading_icon: \'fa fa-spin fa-spinner fa-2x orange\',\n loading_text: \'\',\n loading_overlay: null,\n update_breadcrumbs: true,\n update_title: true,\n update_active: true,\n close_active: false,\n max_load_wait: false\n}\n```\n\n比如`loading_text`,看名称就大概猜出是在异步加载界面时，给用户的提示信息，例如`正在加载, 请稍等...`， 当然这只是大概的猜测，我们要真想使用它，肯定要读相应的源代码并且动手去验证一下。\n\n过程中难免会遇到各种问题，只要耐心解读源码，一定会攻破的，我也遇到了好多坑，昨天花了一整天的时间才把我原本的博客给变成了单页面的，这主要是因为我的聪明才智和之前就使用的ace admin。\n\n> 温馨提示: `ace.ajax-content.js`文件被包含在了`ace.min.js`中，因此只需要引入`ace.min.js`即可\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (41, 'windows防火墙导致ftp文件上传异常', '```\n[INFO ] 2017-01-21 21:24:03.388 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:53] - 连接文件服务器成功, 上传路径path:upload/\n[ERROR] 2017-01-21 21:24:22.899 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:75] - 文件上传异常\njava.net.SocketException: Software caused connection abort: socket write error\noat java.net.SocketOutputStream.socketWrite0(Native Method) ~[?:1.8.0_111]\noat java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[?:1.8.0_111]\noat java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[?:1.8.0_111]\n\n...\n```\n\n<!-- more -->\n\n原因是win7防火墙的问题，关闭防火墙后一切就正常了。\n\n![关闭防火墙](https://kangyonggan.com/upload/20170121214431475.png)\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (42, '.gitignore的内容', '\n```\n# Maven #\ntarget/\n\n# IDEA #\n.idea/\n*.iml\n\n# Eclipse #\n.settings/\n.metadata/\n.classpath\n.project\nServers/\n```\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (43, 'HashMap实现原理分析', '\n> 参考：[http://blog.csdn.net/vking_wang/article/details/14166593](http://blog.csdn.net/vking_wang/article/details/14166593)\n\n## HashMap的数据结构\n在数据结构中，有`数组`和`链表`来实现对数据的存储，但这两者是两个极端。\n\n### 数组\n数组的存储区间是连续的，空间复杂度大，时间复杂度小。特点是：`查找容易，插入和删除困难`。\n\n### 链表\n链表的存储区间是离散的，空间复杂度小，时间复杂度大。特点是：`查找困难，插入和删除容易`。\n\n### 哈希表\n哈希表是综合了数组和链表的优点，既满足了查找方便，同时也不占用太多空间，使用也很方便。\n\n<!-- more -->\n\n哈希表有很多实现方式，下面讲解最常用的拉链发，可以理解为链表的数组：\n\n![la](https://kangyonggan.com/upload/20170309210540154.jpeg)\n\n从上图中总可以看出，哈希表是由`数组+链表`组成的，HashMap里面实现了一个静态内部类`Entity`,其重要属性有`key`、`value`和`next`，从属性可以看出Entity是HashMap键值对实现的一个基础Bean，上面我们说到HashMap的基础就是一个线性数组，即Entity[],Map里面的内容都保存在数组Entity[]中, 下面是个demo：\n\n![lan](https://kangyonggan.com/upload/20170309210548825.png)\n\n这个链表是一个长度为16的数组，左边数字是数组的下标，右边的数字是key的hash值，数组中的每一个元素都是一个链表的头节点，那么这些元素是按照什么规则存储的呢？又是按照什么规则查找的呢？\n\n### 存取规则`hash(key)%len`\n比如上图中，key的hash值为31的元素，模上数组长度16，结果是15，那么它就存储在arr[15]所在的链表中。查找时就是先计算hash(key)%len，找出元素所在的链表位于数组的位置，然后遍历链表即可。\n\n### 几个注意点\n1. 不同的Hash可能有相同的index，相同的index不一定有相同的Hash。\n2. 对于`hash(key)%len`计算得到相同index的元素，采用`头插法`，即后来的插到链表的头部，也就是说数组中存储的那个头元素是最后插进来的。\n3. HashMap允许key为null的元素存入，key为null的元素永远存储在链表头部，即数组中。\n4. Entity[]的长度固定后，随着元素的增加，链表会越来越长，这时候HashMap中的一个因子就会起到作用，随着map的size越来越大，Entity[]的length会以一定的规则增加。\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (44, 'jdk1.8发送http请求报SSLv3的解决方案', 'SSLv3激活步骤:\n\n切到${java_home}/jre/lib/security目录\n\n```\ncd /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/security\n```\n\n<!-- more -->\n\n修改`java.security`文件\n\n```\nvi java.security\n```\n\n找到`jdk.tls.disabledAlgorithms`属性， 删除`SSLv3`并保存\n\n查找:`/jdk.tls.disabledAlgorithms`\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (45, 'linux下杀死一个进程的常用手段', '```\nps -ef | grep redis-server | cut -c 9-15 | xargs kill -9\n```\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (46, 'log4j2的使用和配置', '\n## 引入依赖\n在`pom.xml`中添加依赖:\n\n```\n<log4j2.api.version>2.5</log4j2.api.version>\n\n...\n\n<!--Log4j2-->\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n```\n\n<!-- more -->\n\n## 配置\n`log4j2.xml`:\n\n1. 异步输出日志，不会影响主线程性能\n2. error日志单独输出到error.log文件\n3. all.log包含所有级别的日志\n4. 每天会备份旧的日志文件，产生新的日志文件\n5. 如果一天之中有日志文件超出大小限制(下面配的500M)，会存档当前文件，另外再创建一个新的文件\n6. 日志文件只保存近期的（下面配置的30天）\n\n这已经可以满足大部分需求了，如果还不满足，那就再改造吧\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" monitorInterval=\"300\">\n    <properties>\n        <property name=\"LOG_HOME\">/Users/kyg/logs/test</property>\n    </properties>\n\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n        </Console>\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <Async name=\"AsyncAll\">\n            <AppenderRef ref=\"AllFile\"></AppenderRef>\n        </Async>\n        <Async name=\"AsyncError\">\n            <AppenderRef ref=\"ErrorFile\"></AppenderRef>\n        </Async>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"debug\" additivity=\"true\">\n            <AppenderRef ref=\"Console\"></AppenderRef>\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (47, 'Log4j2省略输出SQL语句SELECT和FROM中间的字段', '\n## 线上日志中的SQL\n```\nDEBUG : ==>  Preparing: SELECT serial_no as serialNo,bnk_no as bnkNo ,mer_org_serial_no as merOrgSerialNo,bnk_org_serial_no as bnkOrgSerialNo, mer_date as merDate,mer_time as merTime, mer_org_date as merOrgDate,mer_org_time as merOrgTime ,bnk_org_date as bnkOrgDate,bnk_org_time as bnkOrgTime, last_try_date as lastTryDate,last_try_time as lastTryTime ,last_snd_date as lastSndDate,last_snd_time as lastSndTime, last_qry_serial_no as lastQrySerialNo,last_qry_date as lastQryDate,last_qry_time as lastQryTime, input_date as inputDate,input_time as inputTime,mer_tran_co as merTranCo,bnk_tran_co as bnkTranCo, mer_org_tran_co as merOrgTranCo,bnk_org_tran_co as bankOrgTranCo ,tran_tp as tranTy,syn_flg as synFlg,bat_flg as batFlg, acount as acount,retry_flg as retryFlg,retry_max_time as retryMaxTime ,retry_interval as retryInterval, retry_counter as retryCounter,resnd_flg as resndFlg ,resnd_max_time as resndMaxTime,resnd_interval as resndInterval,resnd_counter as resndCounter, qry_flg as qryFlg,qry_tran_co as qryTranCo,qry_max_time as qryMaxTime,qry_interval as qryInterval, qry_counter as qryCounter,priority as priority,model as model ,product_id as productId,product_tp as productTp,cur_co as currencyCode, amount as amount,fee_amt as feeAmt,tran_purpose as tranPurpose ,tran_remark as tranRemark,ref_app_no as refAppNo, ref_app_kind as refAppKind,rcvr_bnk_no as rcvrBnkNo ,rcvr_acct_no as rcvrAcctNo,rcvr_acct_nm as rcvrAcctNm,rcvr_id_tp as rcvrIdTp,rcvr_id_no as rcvrIdNo, rcvr_province as rcvrProvince,rcvr_city as rcvrCity,rcvr_area_co as rcvrAreaCo,rcvr_area_nm as rcvrAreaNm, rcvr_mer_id as rcvrMerId,rcvr_mer_cert_id as rcvrMerCertId,rcvr_post_id as rcvrPostId ,rcvr_contract_no as rcvrContractNo,rcvr_contract_dt as rcvrContractDt, rcvr_proto_no as rcvrProtoNo,rcvr_mer_user_tp as rcvrMerUserTp,rcvr_mer_user_id as rcvrMerUserId, rcvr_bnk_user_tp as rcvrBnkUserTp,rcvr_bnk_user_id as rcvrBnkUserId,rcvr_resv1 as rcvrResv1, rcvr_resv2 as rcvrResv2,sndr_bnk_no as sndrBankNo,sndr_name as sndrName, sndr_acct_no as sndrAcctNo,sndr_acct_nm as sndrAcctName, sndr_id_tp as sndrIdType,sndr_id_no as sndrIdNo,sndr_province as sndrProvince,sndr_city as sndrCity, sndr_area_co as sndrAreaCode,sndr_area_nm as sndrAreaName,sndr_mer_id as sndrMerId ,sndr_mer_cert_id as sndrMerCertId,sndr_post_id as sndrPostId, sndr_contract_no as sndrContractNo,sndr_contract_dt as sndrContractDate,sndr_proto_no as sndrProtoNo, sndr_mer_user_tp as sndrMerUserType,sndr_mer_user_id as sndrMerUserId ,sndr_bnk_user_tp as sndrBnkUserType,sndr_bnk_user_id as sndrBankUserId, sndr_resv1 as sndrResv1,sndr_resv2 as sndrResv2,lock_st as lockSt,tran_st as tranSt,business_type as businessType, rvrs_st as rvrsSt,product_nm as productName, APP_VERSION as appVersion,APP_SOURCE as appSource, RCVR_BNK_BRANCH_NAME as rcvrBnkBranchName,SNDR_BNK_BRANCH_NAME as sndrBnkBranchName, created_at as insertTimestamp, updated_at as updateTimestamp FROM be_command T WHERE T.REF_APP_NO = ?\n```\n\n一大坨SQL占满了整个屏幕，并且日志文件也会变得很大，其实这句SQL有用信息很少:\n\n```\nDEBUG : ==>  Preparing: SELECT xxx FROM be_command T WHERE T.REF_APP_NO = ?\n```\n\n所以我就想能不能像上面这样输出呢？看下面的demo\n\n## 使用Log4j2的Replace功能\n### pom.xml\n```\n<log4j2.api.version>2.5</log4j2.api.version>\n\n...\n\n<!--Log4j2-->\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>${log4j2.api.version}</version>\n</dependency>\n```\n\n### log4j2.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" monitorInterval=\"300\">\n    <properties>\n        <property name=\"LOG_HOME\">/Users/kyg/logs/book</property>\n    </properties>\n\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%replace{%msg}{Preparing: SELECT [w ,]+ FROM be_command}{Preparing: SELECT xxx FROM be_command}%n\"></PatternLayout>\n        </Console>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"debug\" additivity=\"true\">\n            <AppenderRef ref=\"Console\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n### Test.java\n```\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\n/**\n * @author kangyonggan\n * @since 2017/3/28\n */\npublic class Test {\n\n    private static Logger log = LogManager.getLogger(Test.class);\n\n    public static void main(String[] args) {\n        log.info(\"DEBUG : ==>  Preparing: SELECT serial_no as serialNo,bnk_no as bnkNo ,mer_org_serial_no as merOrgSerialNo,bnk_org_serial_no as bnkOrgSerialNo, mer_date as merDate,mer_time as merTime, mer_org_date as merOrgDate,mer_org_time as merOrgTime ,bnk_org_date as bnkOrgDate,bnk_org_time as bnkOrgTime, last_try_date as lastTryDate,last_try_time as lastTryTime ,last_snd_date as lastSndDate,last_snd_time as lastSndTime, last_qry_serial_no as lastQrySerialNo,last_qry_date as lastQryDate,last_qry_time as lastQryTime, input_date as inputDate,input_time as inputTime,mer_tran_co as merTranCo,bnk_tran_co as bnkTranCo, mer_org_tran_co as merOrgTranCo,bnk_org_tran_co as bankOrgTranCo ,tran_tp as tranTy,syn_flg as synFlg,bat_flg as batFlg, acount as acount,retry_flg as retryFlg,retry_max_time as retryMaxTime ,retry_interval as retryInterval, retry_counter as retryCounter,resnd_flg as resndFlg ,resnd_max_time as resndMaxTime,resnd_interval as resndInterval,resnd_counter as resndCounter, qry_flg as qryFlg,qry_tran_co as qryTranCo,qry_max_time as qryMaxTime,qry_interval as qryInterval, qry_counter as qryCounter,priority as priority,model as model ,product_id as productId,product_tp as productTp,cur_co as currencyCode, amount as amount,fee_amt as feeAmt,tran_purpose as tranPurpose ,tran_remark as tranRemark,ref_app_no as refAppNo, ref_app_kind as refAppKind,rcvr_bnk_no as rcvrBnkNo ,rcvr_acct_no as rcvrAcctNo,rcvr_acct_nm as rcvrAcctNm,rcvr_id_tp as rcvrIdTp,rcvr_id_no as rcvrIdNo, rcvr_province as rcvrProvince,rcvr_city as rcvrCity,rcvr_area_co as rcvrAreaCo,rcvr_area_nm as rcvrAreaNm, rcvr_mer_id as rcvrMerId,rcvr_mer_cert_id as rcvrMerCertId,rcvr_post_id as rcvrPostId ,rcvr_contract_no as rcvrContractNo,rcvr_contract_dt as rcvrContractDt, rcvr_proto_no as rcvrProtoNo,rcvr_mer_user_tp as rcvrMerUserTp,rcvr_mer_user_id as rcvrMerUserId, rcvr_bnk_user_tp as rcvrBnkUserTp,rcvr_bnk_user_id as rcvrBnkUserId,rcvr_resv1 as rcvrResv1, rcvr_resv2 as rcvrResv2,sndr_bnk_no as sndrBankNo,sndr_name as sndrName, sndr_acct_no as sndrAcctNo,sndr_acct_nm as sndrAcctName, sndr_id_tp as sndrIdType,sndr_id_no as sndrIdNo,sndr_province as sndrProvince,sndr_city as sndrCity, sndr_area_co as sndrAreaCode,sndr_area_nm as sndrAreaName,sndr_mer_id as sndrMerId ,sndr_mer_cert_id as sndrMerCertId,sndr_post_id as sndrPostId, sndr_contract_no as sndrContractNo,sndr_contract_dt as sndrContractDate,sndr_proto_no as sndrProtoNo, sndr_mer_user_tp as sndrMerUserType,sndr_mer_user_id as sndrMerUserId ,sndr_bnk_user_tp as sndrBnkUserType,sndr_bnk_user_id as sndrBankUserId, sndr_resv1 as sndrResv1,sndr_resv2 as sndrResv2,lock_st as lockSt,tran_st as tranSt,business_type as businessType, rvrs_st as rvrsSt,product_nm as productName, APP_VERSION as appVersion,APP_SOURCE as appSource, RCVR_BNK_BRANCH_NAME as rcvrBnkBranchName,SNDR_BNK_BRANCH_NAME as sndrBnkBranchName, created_at as insertTimestamp, updated_at as updateTimestamp FROM be_command T WHERE T.REF_APP_NO = ?\");\n    }\n\n}\n```\n\n### 输出\n```\nDEBUG : ==>  Preparing: SELECT xxx FROM be_command T WHERE T.REF_APP_NO = ?\n\nProcess finished with exit code 0\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (48, 'Tomcat8访问软连接目录下的文件', '\n### Tomcat7修改context.xml\n```\n<Context allowLinking=\"true\" ></Context>\n```\n\n## Tomcat8修改context.xml\n```\n<Context>\n  <Resources allowLinking=\"true\" ></Resources>\n</Context>\n```\n\n## 使用软链接\n\n```\nln -s /home/kyg/data/blog/upload/ /home/kyg/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (49, 'maven一键生成cms项目', '\n## 系统简介\n系统结构如下:\n\n![系统结构](https://kangyonggan.com/upload/cms_1.png)\n\n### 各个模块之间的依赖关系\n- `web模块` 依赖 `biz模块`\n- `biz模块` 依赖 `service模块`和`dao模块`\n- `service模块` 依赖 `model模块`\n- `dao模块` 依赖 `model模块`\n\n### 主要技术和框架\n- Spring\n- SpringMVC\n- Mybatis\n- autoconfig\n- mbg\n- shiro\n- redis\n- dubbo\n- mysql\n- freemarker\n- ace admin ajax\n- ftp\n- log4j2\n- fastjson\n- lombok\n\n## 基本功能\n由于这只是一个项目原型，以后可能会用于各大场景，所以下面的功能只是一些最基础的。\n\n### 网站\n1. 登录\n2. 注册\n3. 找回密码\n\n### 工作台\n1. 系统\n    - 用户管理\n    - 角色管理\n    - 菜单管理\n2. 内容\n    - 数据字典\n    - 缓存管理\n    - 内容管理\n3. 我的\n    - 个人资料\n\n## 原型截图\n\n![登录界面](https://kangyonggan.com/upload/cms_login.png)\n\n![注册界面](https://kangyonggan.com/upload/cms_register.png)\n\n![找回密码界面](https://kangyonggan.com/upload/cms_reset.png)\n\n![个人资料界面](https://kangyonggan.com/upload/cms_profile.png)\n\n![菜单管理界面](https://kangyonggan.com/upload/cms_menu.png)\n\n## 使用方法\n1. 拉取项目到本地 `git clone https://github.com/kangyonggan/cms-archetype.git`\n2. 编译并安装 `mvn clean install`\n3. 一键生成项目 `mvn archetype:generate -DarchetypeGroupId=com.kangyonggan.archetype -DarchetypeArtifactId=cms-archetype -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=local`\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (50, 'Mybatis Generator集成MapperPlugin、LombokPlugin和SerializablePlugin', '\n## MBG集成MapperPlugin、LombokPlugin和SerializablePlugin\n可以生成的持久层代码:\n\n- 生成BeanMapper.java\n- 生成BeanMapper.xml\n- 生成Bean.java\n\n### 特点\n- 生成的Mapper.java继承了MyMapper.java(所有单表的crud全部不用写SQL)\n- 实体bean拥有@Data注解（免去写getter、setter和toString的烦恼）\n- 实体bean实现Serializable接口，可以放心的放入Redis缓存或传输如分布式系统间（如:dubbo）\n\n<!-- more -->\n\n> 坑：生成的Mapper.java，默认不带注解`@Repository`，如果你又没用spring扫描mapper包， 在运行时会报错，是运行时而不是启动时。\n\n### 引入依赖和插件\n`pom.xml`中的配置:\n\n```\n<plugin.mybatis-generator.version>1.3.2</plugin.mybatis-generator.version>\n<mybatis-generator.version>1.3.2</mybatis-generator.version>\n<mybatis-mapper.version>3.3.8</mybatis-mapper.version>\n<lombok.version>1.16.8</lombok.version>\n\n...\n\n<!--MBG plugin-->\n<plugin>\n    <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\n    <version>${plugin.mybatis-generator.version}</version>\n    <configuration>\n        <verbose>true</verbose>\n        <overwrite>true</overwrite>\n    </configuration>\n    <dependencies>\n        <dependency>\n            <groupId>${project.groupId}</groupId>\n            <artifactId>api-dao</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n    </dependencies>\n</plugin>\n\n<dependency>\n    <groupId>org.mybatis.generator</groupId>\n    <artifactId>mybatis-generator-core</artifactId>\n    <version>${mybatis-generator.version}</version>\n    <scope>compile</scope>\n    <optional>true</optional>\n</dependency>\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper</artifactId>\n    <version>${mybatis-mapper.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>${lombok.version}</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n> 提示：MBG插件之所以依赖dao, 是因为我在插件中使用了dao中的两个类,下面有。\n\n### 代码和插件配置\n\n`MyMapper.java`\n\n```\npackage com.kangyonggan.api.mapper;\n\nimport org.springframework.stereotype.Component;\nimport tk.mybatis.mapper.common.ConditionMapper;\nimport tk.mybatis.mapper.common.ExampleMapper;\nimport tk.mybatis.mapper.common.SqlServerMapper;\nimport tk.mybatis.mapper.common.base.BaseDeleteMapper;\nimport tk.mybatis.mapper.common.base.BaseSelectMapper;\nimport tk.mybatis.mapper.common.base.BaseUpdateMapper;\n\n/**\n * @author kangyonggan\n * @since 16/5/12\n */\n@Component\npublic interface MyMapper<T> extends\n        BaseSelectMapper<T>,\n        BaseUpdateMapper<T>,\n        BaseDeleteMapper<T>,\n        ExampleMapper<T>,\n        ConditionMapper<T>,\n        SqlServerMapper<T> {\n}\n```\n\n`LombokPlugin.java`\n\n```\npackage com.kangyonggan.api.mapper.util;\n\nimport org.mybatis.generator.api.IntrospectedColumn;\nimport org.mybatis.generator.api.IntrospectedTable;\nimport org.mybatis.generator.api.PluginAdapter;\nimport org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;\nimport org.mybatis.generator.api.dom.java.Method;\nimport org.mybatis.generator.api.dom.java.TopLevelClass;\n\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @since 16/5/12\n */\npublic class LombokPlugin extends PluginAdapter {\n    private FullyQualifiedJavaType dataAnnotation = new FullyQualifiedJavaType(\"lombok.Data\");\n\n    public boolean validate(List<String> warnings) {\n        return true;\n    }\n\n    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\n        this.addDataAnnotation(topLevelClass);\n        return true;\n    }\n\n    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\n        this.addDataAnnotation(topLevelClass);\n        return true;\n    }\n\n    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\n        this.addDataAnnotation(topLevelClass);\n        return true;\n    }\n\n    public boolean modelGetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {\n        return false;\n    }\n\n    public boolean modelSetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {\n        return false;\n    }\n\n    protected void addDataAnnotation(TopLevelClass topLevelClass) {\n        topLevelClass.addImportedType(this.dataAnnotation);\n        topLevelClass.addAnnotation(\"@Data\");\n    }\n}\n```\n\n配置插件`generatorConfig.xml`, 插件放在dao模块的`src/main/resources`目录下即可\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE generatorConfiguration PUBLIC\n        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <context id=\"sqlContext\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\n\n        <property name=\"beginningDelimiter\" value=\"`\"></property>\n        <property name=\"endingDelimiter\" value=\"`\"></property>\n\n        <!--base mapper-->\n        <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\n            <property name=\"mappers\" value=\"com.kangyonggan.api.mapper.MyMapper\"></property>\n        </plugin>\n\n        <!--serialize plugin-->\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"></plugin>\n\n        <!--lombok plugin-->\n        <plugin type=\"com.kangyonggan.api.mapper.util.LombokPlugin\"></plugin>\n\n        <!--jdbc driver-->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://127.0.0.1:3306/api\"\n                        userId=\"root\" password=\"123456\"></jdbcConnection>\n\n        <!--Xxx.java-->\n        <javaModelGenerator targetPackage=\"com.kangyonggan.api.model.vo\"\n                            targetProject=\"../api-model/src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"></property>\n            <property name=\"trimStrings\" value=\"true\"></property>\n        </javaModelGenerator>\n\n        <!--XxxMapper.xml-->\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"></property>\n        </sqlMapGenerator>\n\n        <!--XxxMapper.java-->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.kangyonggan.api.mapper\"\n                             targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"></property>\n        </javaClientGenerator>\n\n        <!--table name-->\n        <table tableName=\"table_name\">\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"></generatedKey>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n\n### 使用\n1. 在项目跟目录下`mvn clean install`, 目的是打包`xxx-dao.jar`，好让插件去依赖\n2. 使用 IntelliJ IDEA的，请参考下图(两步), 其他工具我不用，请自行摸索\n\n![使用说明](https://kangyonggan.com/upload/20170105191303945.png)\n\n> 温馨提示：以上配置是我个人配置，请勿直接使用，使用前请自行改造。\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (51, 'MySQL5.6主从复制的配置', '\n## 实验环境\n1. 主库机器IP: `10.10.10.248`\n2. 从库机器IP: `10.10.10.166`\n3. 数据库版本: `Mysql 5.6`\n4. 操作系统: `Ubuntu 14.04`\n\n<!-- more -->\n\n## 配置主库\n### 修改`/etc/mysql/my.cfg`配置，在`[mysqld]`下面添加：\n\n```\nlog-bin=mysql-bin\n\nserver-id=1\n\n```\n\n保存后重启mysql:\n\n```\nsudo /etc/init.d/mysql restart\n```\n\n### 创建一个用户，并授权给从服务器\n登录mysql\n\n```\nmysql -uroot -p\n```\n\n创建用户`kyg`并授权给从服务器:\n\n```\ngrant replication slave on *.* to \'kyg\'@\'10.10.10.166\' identified by \'kyg\';\n```\n\n![master](https://kangyonggan.com/upload/20170101145536544.png)\n\n最后别忘了刷新权限:\n\n```\nflush privileges;\n```\n\n### 查看主库状态\n```\nshow master status;\n```\n\n记录下`File`和`Position`的值，后面配置从库时会用到\n\n![master-status](https://kangyonggan.com/upload/20170101145208095.png)\n\n## 配置从库\n### 修改`/etc/mysql/my.cfg`配置，在`[mysqld]`下面添加：\n```\nserver-id=2\n```\n\n保存后重启mysql:\n\n```\nsudo /etc/init.d/mysql restart\n```\n\n## 登录mysql，并配置相关参数:\n\n```\nchange master to\nmaster_host = \'10.10.10.248\',\nmaster_user = \'kyg\',\nmaster_password = \'kyg\',\nmaster_log_file = \'mysql-bin.000004\',\nmaster_log_pos = 120;\n```\n\n查看从库状态\n\n```\nshow slave status G;\n```\n\n会发现从库还没开启复制\n\n![slave-status1](https://kangyonggan.com/upload/20170101145456162.png)\n\n这时候就需要开启从库的复制功能`start slave;`\n\n![slave-status2](https://kangyonggan.com/upload/20170101145208097.png)\n\n上面的截图再往下滚动， 可能会看见报错:\n\n```\nerror connecting to master \'kyg@10.10.10.248:3306\' - retry-time: 60  retries: 7\n```\n\n这是由于主库配置了`bind-address:127.0.0.1`, 为了简单，我直接把这一行配置注释了(有安全隐患)\n\n停止从库的复制功能:\n\n```\nstop slave\n```\n\n## 测试\n### 在主库创建一个数据库`blog`\n然后在从库中查看所有数据库\n\n```\nshow databases;\n```\n\n![show-db](https://kangyonggan.com/upload/20170101145208096.png)\n\n会发现从库从主库中复制了一个数据库, 实验已经成功，其他CRUD请自行实验\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (52, 'MySQL报错：数据库结构错误', '\n> ERROR 1682 (HY000): Native table \'performance_schema\'.\'session_variables\' has the wrong structure\n\n## 重启MySQL\n重启MySQL后还是报同样的错。\n\n## 重启电脑\n重启电脑后还是报同样的错。\n\n## 谷歌搜一下\n需要更新MySQL：\n\n```\nmysql_upgrade -u root -p\n```\n\n<!-- more -->\n\n输出信息如下:\n\n```\nkangyonggandeMacBook-Pro:~ kyg$ mysql_upgrade -u root -p\nEnter password:\nChecking if update is needed.\nChecking server version.\nRunning queries to upgrade MySQL server.\nChecking system database.\nmysql.columns_priv                                 OK\nmysql.db                                           OK\nmysql.engine_cost                                  OK\nmysql.event                                        OK\nmysql.func                                         OK\nmysql.general_log                                  OK\nmysql.gtid_executed                                OK\nmysql.help_category                                OK\nmysql.help_keyword                                 OK\nmysql.help_relation                                OK\nmysql.help_topic                                   OK\nmysql.innodb_index_stats                           OK\nmysql.innodb_table_stats                           OK\nmysql.ndb_binlog_index                             OK\nmysql.plugin                                       OK\nmysql.proc                                         OK\nmysql.procs_priv                                   OK\nmysql.proxies_priv                                 OK\nmysql.server_cost                                  OK\nmysql.servers                                      OK\nmysql.slave_master_info                            OK\nmysql.slave_relay_log_info                         OK\nmysql.slave_worker_info                            OK\nmysql.slow_log                                     OK\nmysql.tables_priv                                  OK\nmysql.time_zone                                    OK\nmysql.time_zone_leap_second                        OK\nmysql.time_zone_name                               OK\nmysql.time_zone_transition                         OK\nmysql.time_zone_transition_type                    OK\nmysql.user                                         OK\nThe sys schema is already up to date (version 1.5.1).\nChecking databases.\nsimconf.user_role                                  OK\nsimulator.bank_channel                             OK\nsimulator.bank_command                             OK\nsimulator.bank_command_log                         OK\nsimulator.bank_resp                                OK\nsimulator.bank_tran                                OK\nsimulator.dz_file                                  OK\nsimulator.menu                                     OK\nsimulator.role                                     OK\nsimulator.role_menu                                OK\nsimulator.sim_order                                OK\nsimulator.user                                     OK\nsimulator.user_role                                OK\nsys.sys_config                                     OK\nUpgrade process completed successfully.\nCould not create the upgrade info file \'/usr/local/mysql/data/mysql_upgrade_info\' in the MySQL Servers datadir, errno: 13\nkangyonggandeMacBook-Pro:~ kyg$\n```\n\n报错说是不能创建文件，可能是权限不足吧，于是\n\n```\nsudo mysql_upgrade -u root -p\n```\n\n输出:\n\n```\n...省略...\nUpgrade process completed successfully.\nChecking if update is needed.\n```\n\n这次没报错以为成功了，然后就测试了一把，发现还是报同样的错。\n\n## 再次重启MySQL\n测试后发现不报错了。\n\n> 问题是小问题，如果之前遇到过此类问题可以一步解决，但是如果没遇到过，就需要按部就班的去解决了。\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (53, 'MySQL数据库定时备份', '\n## 创建备份脚本\n创建`.bak.sh`, 内容为:\n\n```\n\ntoday=`date +%Y%m%d`\n\nmysqldump -uroot -p123456 blog > /home/kyg/bak/blog-bak-$today.sql\n\nscp /home/kyg/bak/blog-bak-$today.sql root@121.40.66.176:/root/bak/\n```\n\n<!-- more -->\n\n> 其中，备份到远程时，用到了免密登录，请参考我的另一篇博客\n\n## 定时执行\n定时执行用的是linux下自带的`crontab`命令\n\n`crontab -l` 查看任务\n\n`crontab -e` 编辑任务\n\n我设置的是，每天凌晨3点执行备份:\n\n```\n0 3 * * * sh /home/kyg/.bak.sh\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (54, 'MySQL读写分离的实现', '\n## 实验环境\n1. 主库:192.168.2.108:3306/kyg\n2. 从库1:192.168.2.113:3306/kyg\n3. 从库2:192.168.2.103:3306/kyg\n\n<!-- more -->\n\n## 实验目的\n1. 写数据时使用主库\n2. 读数据时使用从库\n\n## 实现方案\n使用MySQL自身提供的一个驱动`com.mysql.jdbc.ReplicationDriver`来实现读写分离。\n如果一个方法是只读的，那么ReplicationDriver就会为你选择从库读取数据，反之就会选择主库进行读写。\n可以结合SpringAop配置事物的读写：\n\n```\n<tx:advice id=\"transactionAdvice\" transaction-manager=\"transactionManager\">\n    <tx:attributes>\n        <tx:method name=\"delete*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"update*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"save*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"remove*\" propagation=\"REQUIRED\"></tx:method>\n\n        <tx:method name=\"search*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"find*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"get*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n    </tx:attributes>\n</tx:advice>\n```\n\njdbc的配置:\n\n```\nblog.jdbc.driver     = com.mysql.jdbc.Driver\nblog.jdbc.password   = abc\nblog.jdbc.url        = jdbc:mysql:replication://192.168.2.108:3306,192.168.2.113:3306,192.168.2.103:3306/kyg\nblog.jdbc.username   = abc\n```\n\n## 观察日志\n\n![走主库](https://kangyonggan.com/upload/20170107152930664.png)\n\n![走从库](https://kangyonggan.com/upload/20170107152931258.png)\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (55, 'nginx做负载均衡遇到session共享的问题', '\n## 常见的解决方案有:\n### 不使用session，换用cookie\n- 简单方便对服务器无压力\n- 如果客户端把cookie禁掉了的话，那么session就无法同步了\n- cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的\n\n### session存在数据库\n- 会加大数据库的IO，增加数据库的负担\n- 数据库读写速度较慢，不利于session的适时同步\n\n<!-- more -->\n\n### session存在memcache或者Redis中\n- 不会加大数据库的负担\n- 并且安全性比用cookie大大的提高\n- 把session放到内存里面，比从文件中读取要快很多\n- 但偶尔会因网络较慢而出现掉线\n\n### 使用nginx中的ip_hash技术\n- 能够将某个ip的请求定向到同一台后端\n- nginx不是最前端的服务器的时候，就跪了，因为转发到nginx的ip是不变的\n- nginx不是最后端的服务器的时候，也得跪\n\n> 我个人的情况比较适合选择方案3+4\n\n## 配置如下\n```\nupstream kyg.com {\n        server  42.196.156.22:8088;\n        server  42.196.156.22:18088;\n        server  42.196.156.22:28088;\n        ip_hash;\n}\n\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        # Make site accessible from http://localhost/\n        server_name localhost;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # try_files $uri $uri/ =404;\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n                proxy_pass http://kyg.com;\n        }\n\n        # 设定访问静态文件直接读取不经过tomcat\n        location ^~ /static/ {\n                proxy_pass http://kyg.com;\n                root /WEB-INF/static/;\n        }\n}\n```\n\n就是在`upstream`下面加了`ip_hash;`配置\n\n> 集群在设计之初最好设计成无状态的\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (56, 'Nginx报错：413 Request Entity Too Large', '在http模块下添加配置:\n\n```\nhttp {\n    ...\n    client_max_body_size 10m;\n    ...\n}\n\n```\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (57, 'nginx负载均衡的配置', '\n\n## 实验环境\n1. 机器1的ip:10.10.10.248, tomcat端口:8088\n2. 机器2的ip:10.10.10.166, tomcat端口:8088\n3. nginx所在机器ip:10.10.10.248, 监听端口80\n\n<!-- more -->\n\n## 启动两个tomcat，配置nginx\n我使用的是jenkins启动的tomcat，一键部署成功, 效果如下:\n\n![tomcat-166.png](https://kangyonggan.com/upload/20170101200131662.png)\n\n![tomcat-248.png](https://kangyonggan.com/upload/20170101200131669.png)\n\n我的nginx是部署在248服务器上，监听的是80端口， 现在想做的就是:\n在访问http://10.10.10.248:80的时候，nginx把所有的请求均等转发到10.10.10.248:8088和10.10.10.166:8088\n\nnginx配置`/etc/nginx/sites-available/default`如下:\n\n```\nupstream kyg.com {\n       server  10.10.10.248:8088;\n       server  10.10.10.166:8088;\n}\n\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        # Make site accessible from http://localhost/\n        server_name localhost;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # try_files $uri $uri/ =404;\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n                proxy_pass http://kyg.com;\n        }\n\n        # 设定访问静态文件直接读取不经过tomcat\n        location ^~ /static/ {\n                proxy_pass http://kyg.com;\n                root /WEB-INF/static/;\n        }\n}\n```\n\n修改nginx配置后需要重新加载配置`sudo nginx -s reload`\n\n### 查看日志，分析结果\n1. 分别在两台服务器上`tail -f /home/kyg/logs/blog/all.log`\n2. 然后访问http://10.10.10.248\n3. 观察哪台服务器会刷日志\n4. 再次访问http://10.10.10.248\n5. 观察哪台服务器会刷日志\n6. 重复访问观察...\n\n![log](https://kangyonggan.com/upload/20170101205501760.png)\n\n发现nginx会把所有的请求均等的（发给你一次发给我一次）转发到两台服务器, 当然你也可以配置权重，让某台服务分担的压力小一点，或者动态负载均衡等。\n\n## kill其中一个tomcat\n我现在把166服务器kill了，在访问并观察日志, 结果：\n\n1. 网站仍然可以正常访问\n2. 所有的访问全部转发到248服务器\n\n## 分布式服务需要解决的几个问题\n1. 会话共享，请参考我的另一篇博客`shiro集成redis实现session集群共享`\n2. 文件共享, 请参考我的另一篇博客`ubuntu下配置ftp服务器`\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (58, 'shiro集成redis实现session集群共享', '\n## 好处\n1. session在tomcat集群中共享（单点登录）\n2. tomcat重启后会话不丢失\n\n## 实现\n覆写`EnterpriseCacheSessionDAO`\n\n```\npackage com.kangyonggan.blog.web.shiro;\n\nimport com.kangyonggan.api.common.service.RedisService;\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.io.Serializable;\n\n/**\n * @author kangyonggan\n * @since 2016/12/31\n */\npublic class MyEnterpriseCacheSessionDAO extends EnterpriseCacheSessionDAO {\n\n    @Autowired\n    private RedisService redisService;\n\n    /**\n     * 创建session，保存到redis数据库\n     *\n     * @param session\n     * @return\n     */\n    @Override\n    protected Serializable doCreate(Session session) {\n        Serializable sessionId = super.doCreate(session);\n        redisService.set(sessionId.toString(), session);\n\n        return sessionId;\n    }\n\n    /**\n     * 获取session\n     *\n     * @param sessionId\n     * @return\n     */\n    @Override\n    protected Session doReadSession(Serializable sessionId) {\n        // 先从缓存中获取session，如果没有再去数据库中获取\n        Session session = super.doReadSession(sessionId);\n        if (session == null) {\n            session = (Session) redisService.get(sessionId.toString());\n        }\n        return session;\n    }\n\n    /**\n     * 更新session的最后一次访问时间\n     *\n     * @param session\n     */\n    @Override\n    protected void doUpdate(Session session) {\n        super.doUpdate(session);\n        redisService.set(session.getId().toString(), session);\n    }\n\n    /**\n     * 删除session\n     *\n     * @param session\n     */\n    @Override\n    protected void doDelete(Session session) {\n        super.doDelete(session);\n        redisService.delete(session.getId().toString());\n    }\n\n}\n```\n\n> 但是一般还是别在集群中使用session。\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (59, 'ssh端口转发', '## 转发本地到远端\n```\nssh -C -f -N -g -L 本地端口:远端IP:远端端口 远端用户名@远端IP\n```\n\n### 例子\n```\nssh -C -f -N -g -L 2222:42.196.156.22:22 kyg@42.196.156.22\n```\n\n所有请求本地2222端口的请求，都会转发给42.196.156的22端口\n\n> 网络前提：远端机器一定要能访问本地机器，不要求本地机器能访问远端机器\n\n<!-- more -->\n\n## 转发远端到本地\n```\nssh -C -f -N -g –R 远端端口:本地IP:本地端口 远端用户名@远端IP\n```\n\n### 例子\n```\nssh -C -f -N -g -R 2323:127.0.0.1:22 root@121.40.66.176\n```\n\n所有请求121.40.66.176:2323的请求，都会转发给本地的22端口\n\n> 网络前提：本地机器一定要能访问远端机器，不要求远端机器能访问本地机器\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (60, 'ssh免密登录', '\n现在有两台机器A和B， 想要用ssh从A登录到B， 并且不使用密码\n\n## 在A机器上生成密钥对\n```\nssh-keygen -t rsa\n```\n\n然后会有三次提示用户输入， 什么也不要输入， 直接回车， 就会在用户根目录生成`.ssh`文件夹, 文件夹里会有`id_rsa`私钥和`id_rsa.pub`公钥\n\n## 把公钥导入B机器\n```\nssh-copy-id -i .ssh/id_rsa.pub root@192.168.20.212\n```\n\n<!-- more -->\n\n执行这个命令会要求输入一次密码， 不过以后就不用再输密码了。\n如果A机器没安装ssh-copy-id命令， 可以先运行下面的命令去下载`ssh-copy-id`\n\n```\ncurl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh\n```\n\n也可以手动导入， 先把公钥scp到B机器（也要输入一次密码），\n然后输出到.ssh/authorized_keys文件中即可\n\n```\ncat id_rsa.pub > .ssh/authorized_keys\n```\n\n## 免密登录测试\n\n```\nssh root@192.168.20.212\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (61, 'ssh登录控制,登录失败5次禁IP', '\n今天在登录我服务器的时候，发现了下面这段话\n\n```\nkangyonggandeMacBook-Pro:~ kyg$ ./.login.sh\nLast failed login: Sun Mar  5 13:27:21 EST 2017 from 42.196.186.61 on ssh:notty\nThere were 721 failed login attempts since the last successful login.\nLast login: Sat Mar  4 07:33:47 2017 from 192.168.2.222\n```\n\n<!-- more -->\n\n发现是有人尝试爆破我的服务器，我的服务器是CentOS7,于是我查看日志：\n\n```\n[root@localhost log]# pwd\n/var/log\n[root@localhost log]# ll\n总用量 10044\ndrwxr-xr-x. 2 root   root       176 2月  26 08:37 anaconda\ndrwx------. 2 root   root        99 3月   5 07:30 audit\n-rw-r--r--. 1 root   root      9671 3月   1 08:05 boot.log\n-rw-------. 1 root   utmp    473856 3月   5 13:27 btmp\n-rw-------. 1 root   utmp    462720 2月  28 12:15 btmp-20170301\ndrwxr-xr-x. 2 chrony chrony       6 12月  6 17:42 chrony\n-rw-------. 1 root   root     51771 3月   6 02:01 cron\n-rw-r--r--. 1 root   root     59619 3月   1 08:05 dmesg\n-rw-r--r--. 1 root   root     59102 2月  28 06:39 dmesg.old\n-rw-r--r--. 1 root   root      2873 2月  27 07:19 firewalld\n-rw-------. 1 root   root      1280 2月  26 08:42 grubby\n-rw-r--r--. 1 root   root    291708 3月   6 02:06 lastlog\n-rw-------. 1 root   root      3805 3月   5 03:00 maillog\n-rw-------. 1 root   root   3661588 3月   6 02:20 messages\n-rw-r--r--. 1 mysql  mysql    65242 3月   2 02:48 mysqld.log\ndrwx------. 2 root   root         6 6月  10 2014 ppp\ndrwxr-xr-x. 2 root   root         6 2月  26 08:37 rhsm\n-rw-------. 1 root   root   3081270 3月   6 02:20 secure\n-rw-------. 1 root   root         0 2月  26 08:35 spooler\n-rw-------. 1 root   root         0 2月  26 08:34 tallylog\ndrwxr-xr-x. 2 root   root        23 12月  6 17:26 tuned\n-rw-------. 1 root   root     29494 3月   6 02:17 wpa_supplicant.log\n-rw-r--r--. 1 root   root     51059 2月  27 06:32 wpa_supplicant.log-20170227\n-rw-rw-r--. 1 root   utmp     44160 3月   6 02:06 wtmp\n-rw-------. 1 root   root      7438 2月  27 07:03 yum.log\n\n[root@localhost log]# grep \"Failed password for\" secure\n...太多就不贴出来了\nMar  4 21:34:02 localhost sshd[24674]: Failed password for root from 42.196.186.61 port 56860 ssh2\nMar  4 21:34:05 localhost sshd[24674]: Failed password for root from 42.196.186.61 port 56860 ssh2\nMar  4 21:34:07 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2\nMar  4 21:34:09 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2\nMar  4 21:34:12 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2\nMar  4 21:34:14 localhost sshd[24684]: Failed password for root from 42.196.186.61 port 56962 ssh2\nMar  4 21:34:17 localhost sshd[24684]: Failed password for root from 42.196.186.61 port 56962 ssh2\nMar  5 04:37:23 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 04:37:25 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 04:37:26 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 04:37:28 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 04:37:30 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 04:37:32 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2\nMar  5 05:06:04 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 05:06:07 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 05:06:09 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 05:06:12 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 05:06:14 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 05:06:17 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2\nMar  5 10:05:12 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 10:05:15 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 10:05:17 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 10:05:19 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 10:05:21 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 10:05:24 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2\nMar  5 13:27:07 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\nMar  5 13:27:10 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\nMar  5 13:27:13 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\nMar  5 13:27:16 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\nMar  5 13:27:18 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\nMar  5 13:27:21 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2\n```\n\n看到这么多的登录失败，我觉得我需要做些什么才行，比如：禁止用户名密码登录，只允许秘钥登录，但是有时候用别人的电脑没秘钥会不方便，所以，我决定`登录失败超过5次禁IP`\n\n下面是脚本`.ip-deny.sh`：\n\n```\n#! /bin/sh\n\ncat /var/log/secure | awk \'/Failed/{print $(NF-3)}\' | sort | uniq -c | awk \'{print $2\"=\"$1;}\' > /root/ip-black.txt\n\nMAX=5\n\nfor i in `cat  /root/ip-black.txt`\ndo\n  ip=`echo $i |awk -F= \'{print $1}\'`\n  cnt=`echo $i |awk -F= \'{print $2}\'`\n  if [ $cnt -gt $MAX ]\n  then\n    grep $ip /etc/hosts.deny > /dev/null\n    if [ $? -gt 0 ]\n    then\n      echo \"sshd:$ip:deny\" >> /etc/hosts.deny\n    fi\n  fi\n\ndone\n\ncat /etc/hosts.deny\n```\n\n最后在定时任务中，每隔1分钟执行一次脚本：\n\n```\n[root@localhost ~]# crontab -e\n```\n\n查看所有定时任务：\n\n```\n[root@localhost ~]# crontab -l\n# m h  dom mon dow   command\n\n\n# 每天凌晨三点备份数据\n0 3 * * * sh /root/.back.sh\n\n# 每隔1分钟执行一次，登录失败超过5次禁IP\n*/1 * * * *  sh /root/.ip-deny.sh\n```\n\n经试验，登录失败五次，然后再经过1分钟之后（之内），试验生效！\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (62, 'ssh登录时指定密码', '\n## 下载`sshpass`\n[http://sourceforge.net/projects/sshpass/](http://sourceforge.net/projects/sshpass/)\n\n## 安装\n```\n[root@localhost ~]# tar -zxvf sshpass-1.06.tar.gz -C /root/install/\n[root@localhost ~]# cd /root/install/sshpass-1.06\n[root@localhost sshpass-1.06]# ./configure\n[root@localhost sshpass-1.06]# make\n[root@localhost sshpass-1.06]# make install\n```\n\n## 使用\n```\n[root@localhost ~]# sshpass -p 123456 ssh root@121.40.66.176\n```\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (63, '从零开始搭建NexT主题的Hexo博客', '\n> 参考文档: [http://theme-next.iissnan.com/getting-started.html](http://theme-next.iissnan.com/getting-started.html)\n\n## 系统版本\n```\nroot@iZ23ldh8kudZ:~# cat /etc/issue\nUbuntu 16.04.2 LTS\n l\n```\n\n其他系统搭建流程类似，这里不一一演示。\n\n## 准备工作\n关于hexo和next的基本概念这里不再介绍，只说怎么安装和使用。\n\n<!-- more -->\n\n### 安装Git\n```\nroot@iZ23ldh8kudZ:~# apt-get update\nroot@iZ23ldh8kudZ:~# apt-get install git\n```\n\n### 安装Node.js\n```\nroot@iZ23ldh8kudZ:~# apt-get install nodejs\nroot@iZ23ldh8kudZ:~# apt-get install npm\n```\n\n<!-- more -->\n\n## 安装Hexo\n```\nroot@iZ23ldh8kudZ:~# npm install -g hexo-cli\n```\n\n发现报错, 经谷歌后，在需要安装nodejs-legacy：\n\n```\nroot@iZ23ldh8kudZ:~# apt-get install nodejs-legacy\n```\n\n再次安装hexo-cli后成功！\n\n```\nroot@iZ23ldh8kudZ:~# hexo -version\nhexo-cli: 1.0.2\nos: Linux 4.4.0-63-generic linux x64\nhttp_parser: 2.5.0\nnode: 4.2.6\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 55.1\nmodules: 46\nopenssl: 1.0.2g-fips\n```\n\n## 建站\n```\nroot@iZ23ldh8kudZ:~# hexo init blog\nroot@iZ23ldh8kudZ:~# cd blog/\nroot@iZ23ldh8kudZ:~/blog# npm install\n```\n\n### 启动\n```\nroot@iZ23ldh8kudZ:~/blog# hexo s\n```\n\n### 查看\n在浏览器中输入localhost:4000，查看效果如下：\n\n![hexo-01](https://kangyonggan.com/upload/hexo-01.png)\n\n至此，hexo博客就搭建好了，接下来就是安装NexT主题并且进行各种配置了。\n\n## 安装NexT主题\n```\nroot@iZ23ldh8kudZ:~/blog# pwd\n/root/blog\nroot@iZ23ldh8kudZ:~/blog# git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n安装成功之后，会发现主题文件夹下面多了一个`next`文件夹\n\n```\nroot@iZ23ldh8kudZ:~/blog# ll themes/\ntotal 16\ndrwxr-xr-x 4 root root 4096 Mar 28 17:58 ./\ndrwxr-xr-x 6 root root 4096 Mar 28 17:48 ../\ndrwxr-xr-x 6 root root 4096 Mar 28 17:26 landscape/\ndrwxr-xr-x 9 root root 4096 Mar 28 17:59 next/\n```\n\n### 使用next主题\n编辑`站点配置文件`, 修改theme配置的值：\n\n```\ntheme: next\n```\n\n重启hexo，查看界面效果：\n\n![hexo-02](https://kangyonggan.com/upload/hexo-02.png)\n\n> 提示：修改站点配置需要重启，修改主题文件不需要重启，如果改了没生效，请运行`hexo clean`\n\n个人感觉这个有点丑，所以我又换了一个风格，next提供了3中风格的主题：\n\n- Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n- Mist - Muse 的紧凑版本，整洁有序的单栏外观\n- Pisces - 双栏 Scheme，小家碧玉似的清新\n\n修改`主题配置文件`, 修改scheme配置的值：\n\n```\nscheme: Mist\n```\n\n重启hexo，查看界面效果：\n\n![hexo-03](https://kangyonggan.com/upload/hexo-03.png)\n\n个人比较喜欢这种风格的主题。\n\n## 个性化设置\n### 网站相关设置\n修改`站点配置文件`， Site相关配置默认如下：\n\n```\ntitle: Hexo\nsubtitle:\ndescription:\nauthor: John Doe\nlanguage:\ntimezone:\n```\n\n经过配置后：\n\n```\ntitle: 东方娇子\nsubtitle:\ndescription: 二逼青年欢乐多\nauthor: 康永敢\nlanguage: zh-Hans\ntimezone:\n```\n\n设置`favicon`： 把favicon.ico放在`source/`目录下即可。\n\n设置作者头像：\n修改`主题配置文件`：\n\n```\navatar: /upload/avatar.png\n```\n\n然后把你的头像(avatar.png)放在`themes/next/source/upload/`目录下，没有uploads目录的话可以自己创建一个。\n\n\n重启后查看效果如下：\n\n![hexo-04](https://kangyonggan.com/upload/hexo-04.png)\n\n> 头像可以设置成gif动态图！\n\n### 菜单相关设置\n修改`主题配置文件`，默认菜单相关配置如下：\n\n```\n\nmenu:\n  home: /\n  #categories: /categories\n  #about: /about\n  archives: /archives\n  tags: /tags\n  #sitemap: /sitemap.xml\n  #commonweal: /404.html\n\n\nmenu_icons:\n  enable: true\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n  home: home\n  about: user\n  categories: th\n  schedule: calendar\n  tags: tags\n  archives: archive\n  sitemap: sitemap\n  commonweal: heartbeat\n\n```\n\n本人配置后如下：\n\n```\nmenu:\n  home: /\n  categories: /categories\n  about: /about\n  archives: /archives\n  tags: /tags\n  sitemap: /sitemap.xml\n  commonweal: /404.html\n\n\nmenu_icons:\n  enable: true\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n  home: home\n  about: user\n  categories: th\n  schedule: calendar\n  tags: tags\n  archives: archive\n  sitemap: sitemap\n  commonweal: heartbeat\n```\n\n图标我没换变，用的默认的，只是多显示了几个菜单而已，当然，现在的菜单是不能正常使用的，还需要再做一些操作。\n\n效果如下:\n\n![hexo-05](https://kangyonggan.com/upload/hexo-05.png)\n\n现在看起来好像该有的都有了，但是点击之后会报错，比如点击“关于”菜单：\n\n![hexo-06](https://kangyonggan.com/upload/hexo-06.png)\n\n### 关于\n\n发现缺少“关于”页面，下面就来添加关于页面：\n\n```\nroot@iZ23ldh8kudZ:~/blog# hexo new page about\nINFO  Created: ~/blog/source/about/index.md\nroot@iZ23ldh8kudZ:~/blog# ll source/\ntotal 36\ndrwxr-xr-x 4 root root  4096 Mar 28 21:18 ./\ndrwxr-xr-x 6 root root  4096 Mar 28 20:24 ../\ndrwxr-xr-x 2 root root  4096 Mar 28 21:18 about/\n-rw-r--r-- 1 root root 16958 Mar 28 20:58 favicon.ico\ndrwxr-xr-x 2 root root  4096 Mar 28 17:26 _posts/\n```\n\n发现在source目录下了生成一个about文件夹，about里面是一个md文件， 内容为：\n\n```\nroot@iZ23ldh8kudZ:~/blog# cat source/about/index.md\n---\ntitle: about\ndate: 2017-03-28 21:18:40\n---\n```\n\n本人编辑后内容为：\n\n\n    ---\n    title: 关于作者\n    date: 2017-03-25 14:15:25\n    comments: false\n    ---\n\n    ###\n    - 姓名：康永敢\n    - 性别：男\n    - 职业：Java开发\n\n    ### 联系方式\n    - 手机：18221372104\n    - 邮箱：kangyonggan@gmail.com\n    - QQ：2825176081\n    - 现住址：上海市松江区九亭镇\n    - 工作地址：上海市南京西路399号明天广场21楼（华信证券）\n\n\n其中`comments`表示此页面不需要评论，关于评论的问题下面会讨论。\n刷新后界面如下：\n\n![hexo-07](https://kangyonggan.com/upload/hexo-07.png)\n\n### 404\n404页面我用的是公益404，在source目录下创建404.html, 内容如下：\n\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n```\n\n刷新后效果如下：\n\n![hexo-08](https://kangyonggan.com/upload/hexo-08.png)\n\n### 标签\n```\nroot@iZ23ldh8kudZ:~/blog# hexo new page tags\nINFO  Created: ~/blog/source/tags/index.md\nroot@iZ23ldh8kudZ:~/blog# cat source/tags/index.md\n---\ntitle: tags\ndate: 2017-03-28 21:33:05\n---\nroot@iZ23ldh8kudZ:~/blog#\n```\n\n经过我的修改后内容为：\n\n```\n---\ntitle: 全部标签\ndate: 2017-03-25 14:13:35\ntype: tags\ncomments: false\n---\n```\n\n刷新后看效果：\n\n![hexo-09](https://kangyonggan.com/upload/hexo-09.png)\n\n刷新后看不到什么效果，因为你还没有“标签”，怎么才能有标签呢？不急，下面会说的。\n\n### 分类\n```\nroot@iZ23ldh8kudZ:~/blog# hexo new page categories\nINFO  Created: ~/blog/source/categories/index.md\nroot@iZ23ldh8kudZ:~/blog# cat source/categories/index.md\n---\ntitle: categories\ndate: 2017-03-28 21:37:42\n---\nroot@iZ23ldh8kudZ:~/blog#\n```\n\n经过我的修改后内容为：\n\n```\n---\ntitle: 全部分类\ndate: 2017-03-25 14:15:11\ntype: categories\ncomments: false\n---\n```\n\n刷新后看效果：\n\n![hexo-10](https://kangyonggan.com/upload/hexo-10.png)\n\n刷新后看不到什么效果，原因同上。\n\n## 文章\n其他的配置现在不好说，因为没有文章！所以接下来我会先创建一些文章。\n\n### 文章模板\n在scaffolds目录下是创建新文章时的模板:\n\n```\nroot@iZ23ldh8kudZ:~/blog# ll scaffolds/\ntotal 20\ndrwxr-xr-x 2 root root 4096 Mar 28 17:26 ./\ndrwxr-xr-x 6 root root 4096 Mar 28 20:24 ../\n-rw-r--r-- 1 root root   33 Mar 28 17:26 draft.md\n-rw-r--r-- 1 root root   44 Mar 28 17:26 page.md\n-rw-r--r-- 1 root root   50 Mar 28 17:26 post.md\n```\n\n默认使用的是post.md这个模板，你也可以在站点文件中配置其他模板：\n\n```\ndefault_layout: post\n```\n\n不过一般也不需要改，我是直接改的post.md，改后内容如下：\n\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ncategories:\ntags:\n---\n```\n\n使用模板创建一篇文章：\n\n```\nroot@iZ23ldh8kudZ:~/blog# hexo new SSH免密登录\nINFO  Created: ~/blog/source/_posts/SSH免密登录.md\nroot@iZ23ldh8kudZ:~/blog#\n```\n\n`hexo new <div class=\"hidden ajax-append-title\">`命令会使用默认模板创建一篇文章，文章在source/_post/文件夹下。\n\n为了观察实际效果，我在这篇文章中添加一些真实的内容\n\n刷新后效果如下：\n\n![hexo-11](https://kangyonggan.com/upload/hexo-11.png)\n\n这时候你再去查看“标签”页和“分类”页，应该就能看见有内容了。\n\n### 分页\n为了看出分页效果，我先把hexo例子中的Hello World干掉，另外把我的博客搬进_post中。\n修改`站点配置文件`中的`per_page`配置，默认是10，我改为5:\n\n```\nper_page: 5\npagination_dir: page\n```\n\n效果如下：\n\n![hexo-12](https://kangyonggan.com/upload/hexo-12.png)\n\n## 其他\n至此，博客就已经有型了，但是还得经典细琢。\n\n### 分享\n当我们看到一篇好文章时想分享给其他人看怎么办？复制url?太low了！\n\n修改`主题配置文件`的`jiathis`:\n\n```\njiathis: true\n```\n\n刷新文章详情页面,可以在底部看到分享按钮：\n\n![hexo-13](https://kangyonggan.com/upload/hexo-13.png)\n\n### 社交链接\n\n修改`主题配置文件`的`Social`相关配置:\n\n```\nsocial:\n  Github: https://github.com/kangyonggan/\n  Book: http://kangyonggan.com:6666/\n\nsocial_icons:\n  enable: true\n  # Icon Mappings.\n  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome\n  GitHub: github\n  Twitter: twitter\n  Weibo: weibo\n  Book: book\n```\n\n刷新后效果如下：\n\n![hexo-14](https://kangyonggan.com/upload/hexo-14.png)\n\n\n发现进入详情界面后，自动弹出右边目录结构（如果文章有目录的时候），设置`主题配置文件`，让进入详情界面的时候不要自动弹目录结构：\n修改sidebar:display的值：\n\n```\nsidebar:\n  # Sidebar Position, available value: left | right\n  position: left\n  #position: right\n\n  # Sidebar Display, available value:\n  #  - post    expand on posts automatically. Default.\n  #  - always  expand for all pages automatically\n  #  - hide    expand only when click on the sidebar toggle icon.\n  #  - remove  Totally remove sidebar including sidebar toggle.\n  #display: post\n  #display: always\n  display: hide\n  #display: remove\n\n  # Sidebar offset from top menubar in pixels.\n  offset: 12\n  offset_float: 0\n\n  # Back to top in sidebar\n  b2t: false\n\n  # Scroll percent label in b2t button\n  scrollpercent: false\n\n```\n\n### 生成RSS\n\n```\nroot@iZ23ldh8kudZ:~/blog# npm install hexo-generator-feed --save\n```\n\n修改`主题配置文件`的rss配置，如下：\n\n```\nrss:\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n```\n\nrss配置没变，feed相关的为新增的, 刷新后就可以在sidebar中看见rss链接了。\n\n![hexo-15](https://kangyonggan.com/upload/hexo-15.png)\n\n可以使用`rss阅读器`订阅这个rss地址的文章。\n\n### 打赏\n修改`主题配置文件`中的`alipay`的值(如果没有alipay就新增):\n\n```\nalipay: /upload/ipay.png\n```\n\n然后把支付宝的收款二维码放到`themes/next/source/upload/`目录下。\n\n文章详情界面的效果如图：\n\n![hexo-16](https://kangyonggan.com/upload/hexo-16.png)\n\n### 代码高亮风格\n修改`主题配置文件`的`highlight_theme`的值:\n\n```\nhighlight_theme: night\n```\n\n### 站点地图\n```\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n修改`站点配置文件`，在最后添加(可以不加，因为有缺省值)：\n\n```\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n重启后访问`http://localhost:4000/sitemap.xml`，就可以看到内容了。\n\n![hexo-18](https://kangyonggan.com/upload/hexo-18.png)\n\n但是连接地址是错的，所以我们需要在`站点配置文件`中修改：\n\n\n```\nurl: http://kangyonggan.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n下面是提交`站点地图`到百度站长工具中的过程, 不搞SEO的可以略过\n\n![hexo-17](https://kangyonggan.com/upload/hexo-17.png)\n\n### 百度统计\n在[http://tongji.baidu.com/](http://tongji.baidu.com/)注册账号，并创建应用，然后在“代码获取”界面获取`baidu_analytics`，如下图：\n\n![hexo-19](https://kangyonggan.com/upload/hexo-19.png)\n\n修改`主题配置文件`的`baidu_analytics`的值：\n\n```\nbaidu_analytics: 9a7a48ed52f9726****8a0955ae72adf\n```\n\n为了个人id不被盗用，我隐藏了四位。一段时间之后查看访问量：\n\n![hexo-20](https://kangyonggan.com/upload/hexo-20.png)\n\n\n### 评论\n之前的hexo用户使用`多说`评论插件的比较多，但是现在多说即将关闭，新用户已经不能使用了，所有我使用`畅言`。\n\n注册畅言[http://changyan.kuaizhan.com/](http://changyan.kuaizhan.com/)并创建站点，获取`APP ID`和`APP KEY`。\n\n![hexo-21](https://kangyonggan.com/upload/hexo-21.png)\n\n把这两个的值写入`主题配置文件`:\n\n```\nchangyan:\n  enable: true\n  appid: cy****H1C\n  appkey: 5bc9ff33a197******b38cc87994bf4f\n  count: true\n```\n\n效果如下：\n\n![hexo-22](https://kangyonggan.com/upload/hexo-22.png)\n\n我这里的评论框是黑色的，你可以在“畅言”网站上修改评论框的样式。\n\n### 站内搜索\n这是个很好用的功能，就是反应有点慢。修改`主题配置文件`的`local_search`的值：\n\n```\nlocal_search:\n  enable: true\n```\n\n修改这个配置可以在界面上看到“搜索”按钮。但点击无效。\n\n修改`站点配置文件`，在最后新增：\n\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n安装搜索插件：\n\n```\nnpm install hexo-generator-search --save\n```\n\n重启后搜索效果如下：\n\n![hexo-23](https://kangyonggan.com/upload/hexo-23.png)\n\n## hexo常用命令\n### 清除\n```\nhexo clean\n```\n\n### 生成站点\n```\nhexo gengrate\n```\n\n可以简写为`hexo g`\n\n### 本地启动\n```\nhexo server\n```\n\n可以简写为`hexo s`\n\n还可以带参数，比如`hexo s --debug`会在命令窗口打印日志以供调试。\n\n### 发布\n```\nhexo deploy\n```\n\n简写为`hexo d`\n\n需要在`站点配置文件`中配置`deploy`相关参数：\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/kangyonggan/kangyonggan.github.io.git\n```\n\n此外还需要安装deploy相关插件，并且配置git全局用户相关变量，不然没权限推送到github上。\n\n如果没云空间的可以在deploy到github上托管，但github最近比较慢，所以我是放在云服务器上的。\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (64, '把网站从http免费升级到https', '## 申请免费SSL\n打开[https://zerossl.com/](https://zerossl.com/), 点击【ONLINE TOOLS】\n\n![https](https://kangyonggan.com/upload/https01.png)\n\n点击【START】开始申请证书\n\n<!-- more -->\n\n![https](https://kangyonggan.com/upload/https02.png)\n\n填写【邮箱】、【域名】、勾选【HTTP verification】、【Accept ZeroSSL TOS】和【Accept Let\'s Encrypt SA (pdf)】, 填写完成后点击【NEXT】\n\n![https](https://kangyonggan.com/upload/https03.png)\n\n此时会询问你是否也包含www前缀的域名，建议第一次玩的时候选择No，因为这样后面的校验是相对容易一些，等玩会了之后再选择Yes，我这里选择的是【Yes】。\n\n![https](https://kangyonggan.com/upload/https04.png)\n\n点击【下载】，然后点击【NEXT】。\n\n![https](https://kangyonggan.com/upload/https05.png)\n\n点击【下载】，然后点击【NEXT】。\n\n![https](https://kangyonggan.com/upload/https06.png)\n\n然后进入域名校验界面。\n\n![https](https://kangyonggan.com/upload/https07.png)\n\n这时候你需要在你的项目中放置两个文件，以供校验：\n1. 文件路径为：http://kangyonggan.com/.well-known/acme-challenge/WxvjNvXfff_DGNzHeGhi6rDqMVjJQlcatSvO_1SdemE\n2. 文件内容为：WxvjNvXfff_DGNzHeGhi6rDqMVjJQlcatSvO_1SdemE.m4z6_KmV_JPWzx3GFVoB9p-ytleQL5vLVuNZItQ2dik\n\n同理，再创建另外一个文件：\n1. 文件路径为：http://www.kangyonggan.com/.well-known/acme-challenge/wpyYcbGItz-rmHKNFPrjrSnVy3vQ4cFC3fuRGvYF1l8\n2. 文件内容为：wpyYcbGItz-rmHKNFPrjrSnVy3vQ4cFC3fuRGvYF1l8.m4z6_KmV_JPWzx3GFVoB9p-ytleQL5vLVuNZItQ2dik\n\n需要注意的是：这两个文件的地址，一个有www，一个没有www，如果你前面没有包含www前缀的域名，你就只需要提供一个文件只可。\n\n下面是我提供的文件：\n\n![https](https://kangyonggan.com/upload/https08.png)\n\n![https](https://kangyonggan.com/upload/https09.png)\n\n把项目发布之后访问以下上面的两个地址，看看能不能访问通, 如果访问的通，点击【NEXT】\n\n![https](https://kangyonggan.com/upload/https10.png)\n\n如果校验没过，别放弃，多点几次，我就是在点了2次才通过的：\n\n![https](https://kangyonggan.com/upload/https11.png)\n\n在这一步一定一定不能忘了下载这两个文件，因为后面配置服务器的时候回用到这两个文件，最后点击【DONE NEXT】结束。\n\n但是这个证书有效期是90天，90天之后需要再次申请，过程和这次一样。\n\n## 使用Nginx配置SSL\n把下载的两个文件重命名为domain.crt和domain.key,然后配置nginx：\n\n```\nserver {\n	server_name kangyonggan.com;\n    listen 443;\n    ssl on;\n    ssl_certificate /root/ssl/domain.crt;\n    ssl_certificate_key /root/ssl/domain.key;\n\n	location / {\n		proxy_pass http://localhost:8080;\n	}\n\n	# 设定访问静态文件直接读取不经过tomcat\n	location ^~ /static/ {\n			proxy_pass http://localhost:8080;\n			root /WEB-INF/static/;\n	}\n}\n```\n\n重新加载nginx的配置：\n\n```\nnginx -s reload\n```\n\n访问https://kangyonggan.com和https://www.kangyonggan.com\n\n![https](https://kangyonggan.com/upload/https12.png)\n\n![https](https://kangyonggan.com/upload/https13.png)\n\n虽然可以访问https了，但是原本的http仍然可以访问，所以还需要再配置。\n\n## http重定向到https\n把原本80端口的server配置：\n\n```\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        root /var/www/html;\n\n        server_name _;\n\n        location / {\n                proxy_pass http://localhost:8080;\n        }\n}\n```\n\n改为：\n\n```\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        root /var/www/html;\n\n        server_name _;\n\n        location / {\n                # proxy_pass http://localhost:8080;\n                return 301 https://kangyonggan.com$request_uri;\n        }\n}\n```\n\n再次访问http的网站，就会被重定向到https了。\n\n\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (65, '使用SSH内网穿透加Nginx反向代理之后获取真实IP', '![nginx](https://kangyonggan.com/upload/nginx-ssh.png)\n\n## 配置Nginx\n```\nlocation / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        # try_files $uri $uri/ =404;\n        proxy_pass http://localhost:8080;\n\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n}\n```\n\n<!-- more -->\n\n重新加载Nginx配置:\n\n```\nnginx -s reload\n```\n\n## JAVA获取IP\n```\nString ip = request.getHeader(\"X-Real-IP\");\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (66, '修改Linux系统的系统时间', '## 使用date命令\n```\nsudo date -s \"2017-04-20 09:27:07\"\n```\n\n改了之后再使用date命令查询时间，发现成功了，但是，大概几分钟之后又恢复成之前的错误时间了。\n\n## 使用hwclock命令\n```\nsudo hwclock --set --date=\"04/20/17 09:24\"\n```\n\n还是同样的问题，几分钟后就恢复了。\n\n<!-- more -->\n\n## 改时区\n\n```\nsudo cp /usr/share/zoneinfo/Asia/Shanghai ./localtime\n```\n\n亲测这个是ok的，即使重启也不会恢复成错的时间。', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (67, '使用Log4j2的Rewrite过滤敏感信息', '## 摸索过程\n查看官方文档[https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender](https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender)，官方文档中虽然有所介绍，但是没给demo，百度谷歌都很难查到此类文章，所有配置起来有一定难度。\n\n<!-- more -->\n\n### pom.xml的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.kangyonggan.demo</groupId>\n    <artifactId>log4j2-rewrite</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <log4j2.api.version>2.8.2</log4j2.api.version>\n    </properties>\n\n    <dependencies>\n        <!--Log4j2-->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>${log4j2.api.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>${log4j2.api.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n### log4j2.xml的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\">\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n        </Console>\n\n        <Rewrite name=\"Rewrite\">\n            <MyRewritePolicy></MyRewritePolicy>\n            <AppenderRef ref=\"Console\"></AppenderRef>\n        </Rewrite>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"info\">\n            <AppenderRef ref=\"Rewrite\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n其中MyRewritePolicy是我自定义的，它实现了RewritePolicy接口，同时需要实现一个方法public LogEvent rewrite(final LogEvent event)\n\n### MyRewritePolicy.java的实现\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\nimport org.apache.logging.log4j.core.impl.Log4jLogEvent;\nimport org.apache.logging.log4j.message.SimpleMessage;\n\n/**\n * @author kangyonggan\n * @since 2017/4/24 0024\n */\npublic final class MyRewritePolicy implements RewritePolicy {\n\n    @Override\n    public LogEvent rewrite(final LogEvent event) {\n        String message = event.getMessage().getFormattedMessage();\n        // 处理日志的逻辑\n        message = \"处理后的日志: \" + message;\n\n        SimpleMessage simpleMessage = new SimpleMessage(message);\n        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),\n                event.getLoggerFqcn(), event.getLevel(), simpleMessage,\n                event.getThrown(), event.getContextMap(), event.getContextStack(),\n                event.getThreadName(), event.getSource(), event.getTimeMillis());\n\n        return result;\n    }\n}\n\n```\n\n### 小测一下\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\n/**\n * @author kangyonggan\n * @since 2017/4/24 0024\n */\npublic class Test {\n\n    private static Logger logger = LogManager.getLogger(Test.class);\n\n    public static void main(String[] args) {\n        logger.info(\"手机号:{}\", \"15121149571\");\n    }\n\n}\n\n```\n\n运行后报错：\n\n```\n2017-04-24 23:35:04,827 main ERROR Unable to invoke factory method in class class com.kangyonggan.demo.MyRewritePolicy for element MyRewritePolicy. java.lang.IllegalStateException: No factory method found for class com.kangyonggan.demo.MyRewritePolicy\n	at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.findFactoryMethod(PluginBuilder.java:224)\n	at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:130)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:952)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:892)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:508)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:232)\n	at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:244)\n	at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:545)\n	at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:617)\n	at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:634)\n	at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:229)\n	at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:152)\n	at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:45)\n	at org.apache.logging.log4j.LogManager.getContext(LogManager.java:194)\n	at org.apache.logging.log4j.LogManager.getLogger(LogManager.java:551)\n	at com.kangyonggan.demo.Test.<clinit>(Test.java:12)\n\n[INFO ] 2017-04-24 23:35:04.884 [com.kangyonggan.demo.Test.main:15] - 手机号:15121149571\n```\n\n从报错信息中可以看出：没有工厂方法（No factory method found）。\n还提到了org.apache.logging.log4j.core.config.plugins这个包下面的插件。\n所以去这个包下面看一下相关的插件：\n\n![plugin](https://kangyonggan.com/upload/log4j2-rewrite-01.png)\n\n果然看到了factory相关的plugin，并且PluginFactory是作用在method上的。\n\n### 使用@PluginFactory注解\n\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\nimport org.apache.logging.log4j.core.config.plugins.PluginFactory;\nimport org.apache.logging.log4j.core.impl.Log4jLogEvent;\nimport org.apache.logging.log4j.message.SimpleMessage;\n\n/**\n * @author kangyonggan\n * @since 2017/4/24 0024\n */\npublic final class MyRewritePolicy implements RewritePolicy {\n\n    public LogEvent rewrite(final LogEvent event) {\n        String message = event.getMessage().getFormattedMessage();\n        // 处理日志的逻辑\n        message = \"处理后的日志: \" + message;\n\n        SimpleMessage simpleMessage = new SimpleMessage(message);\n        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),\n                event.getLoggerFqcn(), event.getLevel(), simpleMessage,\n                event.getThrown(), event.getContextMap(), event.getContextStack(),\n                event.getThreadName(), event.getSource(), event.getTimeMillis());\n\n        return result;\n    }\n\n    @PluginFactory\n    public static void factory() {\n        System.out.println(\"factory\");\n    }\n}\n\n```\n\n这次运行后没有报错了，也打印了“factory”，但是rewrite方法没被执行。\n\n仔细一想，这既然是工厂方法，一定是为了创建对象的，所以再次修改如下。\n\n### PluginFactory返回自定义的实例\n```\npackage com.kangyonggan.demo;\n\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\nimport org.apache.logging.log4j.core.config.plugins.PluginFactory;\nimport org.apache.logging.log4j.core.impl.Log4jLogEvent;\nimport org.apache.logging.log4j.message.SimpleMessage;\n\n/**\n * @author kangyonggan\n * @since 2017/4/24 0024\n */\npublic final class MyRewritePolicy implements RewritePolicy {\n\n    public LogEvent rewrite(final LogEvent event) {\n        String message = event.getMessage().getFormattedMessage();\n        // 处理日志的逻辑\n        message = \"处理后的日志: \" + message;\n\n        SimpleMessage simpleMessage = new SimpleMessage(message);\n        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),\n                event.getLoggerFqcn(), event.getLevel(), simpleMessage,\n                event.getThrown(), event.getContextMap(), event.getContextStack(),\n                event.getThreadName(), event.getSource(), event.getTimeMillis());\n\n        return result;\n    }\n\n    @PluginFactory\n    public static MyRewritePolicy factory() {\n        System.out.println(\"factory\");\n        return new MyRewritePolicy();\n    }\n}\n```\n\n在此运行后发现成功了！\n\n### 完整log4j2.xml的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" monitorInterval=\"300\">\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n        </Console>\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${dfjz.log4j2.home}/all.log\"\n                                 filePattern=\"${dfjz.log4j2.home}/all-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${dfjz.log4j2.home}/error.log\"\n                                 filePattern=\"${dfjz.log4j2.home}/error-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\n            </Filters>\n        </RollingRandomAccessFile>\n\n        <SMTP name=\"Mail\" subject=\"${dfjz.app.name} - 报警通知\" to=\"${dfjz.mail.receiver}\" from=\"${dfjz.mail.username}\"\n              smtpHost=\"${dfjz.mail.host}\" smtpUsername=\"${dfjz.mail.username}\" smtpPassword=\"${dfjz.mail.password}\" bufferSize=\"${dfjz.mail.bufferSize}\" >\n        </SMTP>\n        <Async name=\"AsyncAll\">\n            <AppenderRef ref=\"AllFile\"></AppenderRef>\n        </Async>\n        <Async name=\"AsyncError\">\n            <AppenderRef ref=\"ErrorFile\"></AppenderRef>\n            <AppenderRef ref=\"Mail\" ></AppenderRef>\n        </Async>\n\n        <Rewrite name=\"Rewrite\">\n            <MyRewritePolicy></MyRewritePolicy>\n            <AppenderRef ref=\"Console\"></AppenderRef>\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\n        </Rewrite>\n    </Appenders>\n    <Loggers>\n        <Root level=\"debug\" additivity=\"true\">\n            <AppenderRef ref=\"Rewrite\"></AppenderRef>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n用以上配置就已经可以解决我们项目中的所有需求了，不对，还漏了一个，就是普通日志只打印info级别的，sql需要打印debug级别的。\n\n### 打印debug级别的SQL\n请参考我的另一篇文章[使用Log4j2让项目输出info级别的日志和debug级别的sql](https://kangyonggan.com/#article/41)\n> 觉得不错就赏点吧，你的支持是我进步的动力！\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (68, 'JDBC连接MySQL数据库的代码片段', '```\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\n/**\n * @author kangyonggan\n * @since 4/25/17\n */\npublic class ExcelParse605 {\n\n    private static String url = \"jdbc:mysql://127.0.0.1:3306/dfjz?useUnicode=true&characterEncoding=UTF-8\";\n    private static String username = \"root\";\n    private static String password = \"123456\";\n\n    private static Connection conn;\n    private static PreparedStatement ps;\n    private static ResultSet rs;\n\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            conn = DriverManager.getConnection(url, username, password);\n            ps = conn.prepareStatement(\"SELECT bnk_resp_co FROM be_resp WHERE bnk_no = \'605\'\");\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                String bnkRespCo = rs.getString(\"bnk_resp_co\");\n                System.out.println(bnkRespCo);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n                if (conn != null) {\n                    conn.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (69, '配置dubbo多注册中心', '参考dubbo官方文档[http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83](http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83)\n\n## consumer.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <context:annotation-config></context:annotation>\n    <dubbo:application name=\"ENGINE_HELPER\"></dubbo:application>\n\n    <dubbo:registry id=\"dev_address\" address=\"zookeeper://10.199.101.211:8080?backup=10.199.101.212:2181,10.199.101.213:2181\"></dubbo:registry>\n    <dubbo:registry id=\"uat_address\" address=\"zookeeper://10.199.105.204:2181?backup=10.199.105.203:2181,10.199.105.202:2181\" default=\"false\"></dubbo:registry>\n\n    <dubbo:reference id=\"bankEngineServiceDev\" cluster=\"failfast\"\n                     interface=\"com.shhxzq.fin.bankengine.service.BankEngineService\"\n                     lazy=\"true\" version=\"1.2.0\" check=\"false\" timeout=\"100000\" registry=\"dev_address\"></dubbo:reference>\n\n    <dubbo:reference id=\"bankEngineServiceUat\" cluster=\"failfast\"\n                     interface=\"com.shhxzq.fin.bankengine.service.BankEngineService\"\n                     lazy=\"true\" version=\"1.2.0\" check=\"false\" timeout=\"100000\" registry=\"uat_address\"></dubbo:reference>\n\n</beans>\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (70, '使用Spring配置多数据源', '\n## 两个dataSources\n```\n    <!-- 配置dbcp数据源 - dev -->\n    <bean id=\"dataSourceDev\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"${ehelper.jdbc.driver}\"></property>\n        <property name=\"url\" value=\"${ehelper.jdbc.url.dev}\"></property>\n        <property name=\"username\" value=\"${ehelper.jdbc.username.dev}\"></property>\n        <property name=\"password\" value=\"${ehelper.jdbc.password.dev}\"></property>\n\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"5\"></property>\n        <property name=\"minIdle\" value=\"5\"></property>\n        <property name=\"maxActive\" value=\"100\"></property>\n\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\" ></property>\n\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" ></property>\n\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" ></property>\n\n        <property name=\"validationQuery\" value=\"SELECT \'x\'\" ></property>\n        <property name=\"testWhileIdle\" value=\"true\" ></property>\n        <property name=\"testOnBorrow\" value=\"false\" ></property>\n        <property name=\"testOnReturn\" value=\"false\" ></property>\n\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\" ></property>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\" ></property>\n\n        <!-- 关闭长时间不使用的连接 -->\n        <property name=\"removeAbandoned\" value=\"true\" ></property> <!-- 打开removeAbandoned功能 -->\n        <property name=\"removeAbandonedTimeout\" value=\"1200\" ></property> <!-- 1200秒，也就是20分钟 -->\n        <property name=\"logAbandoned\" value=\"true\" ></property> <!-- 关闭abanded连接时输出错误日志 -->\n    </bean>\n\n    <!-- 配置dbcp数据源 - uat -->\n    <bean id=\"dataSourceUat\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"${ehelper.jdbc.driver}\"></property>\n        <property name=\"url\" value=\"${ehelper.jdbc.url.uat}\"></property>\n        <property name=\"username\" value=\"${ehelper.jdbc.username.uat}\"></property>\n        <property name=\"password\" value=\"${ehelper.jdbc.password.uat}\"></property>\n\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"5\"></property>\n        <property name=\"minIdle\" value=\"5\"></property>\n        <property name=\"maxActive\" value=\"100\"></property>\n\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\" ></property>\n\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" ></property>\n\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" ></property>\n\n        <property name=\"validationQuery\" value=\"SELECT \'x\'\" ></property>\n        <property name=\"testWhileIdle\" value=\"true\" ></property>\n        <property name=\"testOnBorrow\" value=\"false\" ></property>\n        <property name=\"testOnReturn\" value=\"false\" ></property>\n\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\" ></property>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\" ></property>\n\n        <!-- 关闭长时间不使用的连接 -->\n        <property name=\"removeAbandoned\" value=\"true\" ></property> <!-- 打开removeAbandoned功能 -->\n        <property name=\"removeAbandonedTimeout\" value=\"1200\" ></property> <!-- 1200秒，也就是20分钟 -->\n        <property name=\"logAbandoned\" value=\"true\" ></property> <!-- 关闭abanded连接时输出错误日志 -->\n    </bean>\n```\n\n## MultiDataSource\n需要自己实现数据源路由， 继承AbstractRoutingDataSource，覆写determineCurrentLookupKey方法即可。\n\n```\npackage com.shhxzq.fin.ehelper.biz.util;\n\nimport com.shhxzq.fin.ehelper.model.constants.DataSource;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n/**\n * 多数据源\n *\n * @author kangyonggan\n * @since 4/28/17\n */\npublic class MultiDataSource extends AbstractRoutingDataSource {\n\n    private static final ThreadLocal<String> dataSourceKey = new InheritableThreadLocal();\n\n    public static void setDataSource(DataSource dataSource) {\n        dataSourceKey.set(dataSource.name());\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return dataSourceKey.get();\n    }\n}\n```\n\n其中DataSource是个枚举：\n\n```\npackage com.shhxzq.fin.ehelper.model.constants;\n\n/**\n * @author kangyonggan\n * @since 4/28/17\n */\npublic enum DataSource {\n    DEV, UAT;\n\n    public static DataSource getDataSource(String name) {\n        for (DataSource dataSource : DataSource.values()) {\n            if (dataSource.name().equalsIgnoreCase(name)) {\n                return dataSource;\n            }\n        }\n\n        return DataSource.DEV;\n    }\n}\n\n```\n\n## sqlSessionFactory\n```\n<!-- 创建SqlSessionFactory，同时指定数据源 -->\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"multiDataSource\"></property>\n    <property name=\"configLocation\" value=\"classpath:mybatis.xml\"></property>\n    <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"></property>\n    <property name=\"typeAliasesPackage\" value=\"com.shhxzq.fin.ehelper.model.vo\"></property>\n    <property name=\"plugins\">\n        <array>\n            <bean class=\"com.github.pagehelper.PageHelper\">\n                <property name=\"properties\">\n                    <value>\n                        dialect=mysql\n                    </value>\n                </property>\n            </bean>\n        </array>\n    </property>\n</bean>\n```\n\n## sqlSession\n```\n<!-- 配置SQLSession模板 -->\n<bean id=\"sqlSession\" class=\"org.mybatis.spring.SqlSessionTemplate\" scope=\"prototype\">\n    <constructor-arg index=\"0\" ref=\"sqlSessionFactory\"></constructor>\n</bean>\n```\n\n## transactionManager\n```\n<!-- 使用JDBC事务 -->\n<bean id=\"transactionManager\"\n      class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <property name=\"dataSource\" ref=\"multiDataSource\"></property>\n</bean>\n```\n\n## transactionAdvice\n```\n<!-- AOP配置事物 -->\n<tx:advice id=\"transactionAdvice\" transaction-manager=\"transactionManager\">\n    <tx:attributes>\n        <tx:method name=\"delete*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"update*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"save*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"remove*\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"send*\" propagation=\"REQUIRED\"></tx:method>\n\n        <tx:method name=\"search*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"find*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"get*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n        <tx:method name=\"*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\n    </tx:attributes>\n</tx:advice>\n```\n\n## transactionPointcut\n```\n<!-- 配置AOP切面 -->\n<aop:config>\n    <!--切点，用于事务-->\n    <aop:pointcut id=\"transactionPointcut\"\n                  expression=\"execution(* com.shhxzq.fin.ehelper.biz.service.impl.transaction..*.*(..))\"></aop:pointcut>\n\n    <!--事物切面-->\n    <aop:advisor pointcut-ref=\"transactionPointcut\" advice-ref=\"transactionAdvice\"></aop:advisor>\n</aop:config>\n```\n\n## 方案一\n原本我是想在spring初始化bean的时候就指定数据源，这样的话事务就不会和数据源打架，我想到的方案是，给不同的包指定不同的数据源，但是这样会带来一个问题，就是会冗余代码。\n\n比如dev环境和uat环境的service分别放在dev和uat包下，再分别给dev包河uat包指定dev的数据源和uat的数据源。\n\n引发的问题：dev和uat业务逻辑一样，仅数据源不一样，但是却有两份代码！冗余还是小事，以后维护才是大事，所以此方案果断排除。\n\n## 方案二\n在调用方法的时候传入一个参数，指定调用哪个数据源，这样代码就没冗余的地方了，但是会带来一个问题。\n\n就是需要修改老代码，在参数中增加一个参数，然后在方法中指定数据源，在方法中指定数据源可以使用注解和切面完成，但不可避面的还是要增加一个参数。\n\n如果不增加一个参数，而是在注解中加参数呢？我也这么想过，但是这样的话，这个方法就只能使用固定的数据源了，达不到动态的效果。\n\n进一步分析，如果在注解中加参数，另外再多写一个方法指定为另一个数据源呢？显然是不可取的，方法冗余，维护困难，如果再次增加数据源还得再加一个方法。\n\n所以，最后我还是选择了使用【传参+注解】的方案，没办法，要想动态切换数据源，你总的告诉方法你要用哪个数据源吧，怎么告诉他？传参是最好途径了，并且扩展性强。下面是我具体实现代码。\n\n## DataSourceSwitch\n```\npackage com.shhxzq.fin.ehelper.model.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * 在方法上加此注解，会使用第一个参数即DataSource枚举切换数据源\n *\n * @author kangyonggan\n * @since 2016/12/8\n */\n@Documented\n@Inherited\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DataSourceSwitch {\n\n}\n```\n\n## DataSourceAop\n```\npackage com.shhxzq.fin.ehelper.biz.aop;\n\nimport com.shhxzq.fin.ehelper.biz.util.MultiDataSource;\nimport com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;\nimport com.shhxzq.fin.ehelper.model.constants.DataSource;\nimport lombok.extern.log4j.Log4j2;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Method;\n\n/**\n * @author kangyonggan\n * @since 4/28/17\n */\n@Log4j2\n@Component\n@Aspect\npublic class DataSourceAop {\n\n    @Pointcut(\"execution(* com.shhxzq.fin.ehelper.biz.service.impl..*.*(..))\")\n    public void pointcut() {\n    }\n\n    /**\n     * @param joinPoint\n     * @return\n     * @throws Throwable\n     */\n    @Around(\"pointcut()\")\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object args[] = joinPoint.getArgs();\n        Class clazz = joinPoint.getTarget().getClass();\n\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\n\n        DataSourceSwitch dataSourceSwitch = method.getAnnotation(DataSourceSwitch.class);\n        if (dataSourceSwitch != null) {\n            log.info(\"使用指定的数据源.\");\n            if (args.length > 0) {\n                Object obj = args[0];\n                if (obj instanceof DataSource) {\n                    DataSource dataSource = (DataSource) obj;\n                    MultiDataSource.setDataSource(dataSource);\n                    log.info(\"数据源：{}\", dataSource.name());\n                } else {\n                    log.info(\"第一个参数不是DataSource枚举，所以仍然使用默认数据源.\");\n                }\n            } else {\n                log.info(\"第一个参数不是DataSource枚举，所以仍然使用默认数据源.\");\n            }\n        } else {\n            log.info(\"使用默认数据源.\");\n        }\n\n\n        return joinPoint.proceed(args);\n    }\n}\n```\n\n## BeCommandServiceImpl\n```\npackage com.shhxzq.fin.ehelper.biz.service.impl;\n\nimport com.shhxzq.fin.ehelper.biz.service.BeCommandService;\nimport com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;\nimport com.shhxzq.fin.ehelper.model.annotation.LogTime;\nimport com.shhxzq.fin.ehelper.model.constants.DataSource;\nimport com.shhxzq.fin.ehelper.model.vo.BeCommand;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author kangyonggan\n * @since 4/28/17\n */\n@Service\npublic class BeCommandServiceImpl extends BaseService<BeCommand> implements BeCommandService {\n\n    @Override\n    @LogTime\n    @DataSourceSwitch\n    public BeCommand findBeCommandBySerialNo(DataSource dataSource, String serialNo) {\n        BeCommand beCommand = new BeCommand();\n        beCommand.setSerialNo(serialNo);\n\n        return super.selectOne(beCommand);\n    }\n}\n```\n\n## 问题\n另外我还遇到了一个问题，那就是事务和多数据源打架了，我的解决方案是把它们两个分开。但也不是太好，先这样吧，以后再研究。\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (71, '使用jdbc向MySQL中插入时间丢失毫秒', '```\ncreate table la_trans_monitor\n(\n	begin_time timestamp(3) default CURRENT_TIMESTAMP(3) not null\n)\n```\n\n其他和本题无关字段已省略。\n\n<!-- more -->\n\n生成的Model：\n\n```\npackage com.kangyonggan.app.dfjz.model.vo;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport javax.persistence.*;\nimport lombok.Data;\n\n@Table(name = \"la_trans_monitor\")\n@Data\npublic class LaTransMonitor implements Serializable {\n\n    @Column(name = \"begin_time\")\n    private Date beginTime;\n\n    private static final long serialVersionUID = 1L;\n}\n```\n\n## 问题分析\n从debug日志中可以看出参数是有毫秒的，但是数据库中就是没有落入毫秒\n\n```\n[DEBUG] 2017-06-16 10:59:11.039 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - ==>  Preparing: INSERT INTO la_trans_monitor ( sys_date,sys_time,method_type,method_route,method_name,begin_time,end_time,used_time ) VALUES ( ?,?,?,?,?,?,?,? )\n[DEBUG] 2017-06-16 10:59:11.065 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - ==> Parameters: 20170615(String), 112233(String), XX(String), XX(String), XXX(String), 2017-06-16 10:59:10.342(Timestamp), 2017-06-16 10:59:10.342(Timestamp), 12345(Long)\n[DEBUG] 2017-06-16 10:59:11.188 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - <==    Updates: 1\n```\n\n解决这个问题的过程中有想到：\n1. 会不会是MySQL版本问题？\n2. 会不会是Mybatis版本问题？\n3. 会不会是建表脚本问题？\n4. 会不会是配置问题？\n\n通过控制变量法，经过一一验证，都没发现问题。\n\n我曾经手写过简版Mybatis，所以清楚以下几点：\n1. 日志不等于它实际执行的SQL，所以看到日志中有毫秒是没多大意义的。\n2. PreparedStatement有两个主要步骤，一个是准备带有占位符的SQL，另一个就是给占位符填数据。\n\n所以我猜测PreparedStatement在填数据的时候，对java.util.date的处理过程中丢掉了毫秒，接下来就是debug跟踪源代码，最后发现PreparedStatement填数据的类是在mysql-connector-java这个jar包下的。\n源代码如下：\n\n```\nprivate void setTimestampInternal(int parameterIndex, Timestamp x, Calendar targetCalendar, TimeZone tz, boolean rollForward) throws SQLException {\n    if(x == null) {\n        this.setNull(parameterIndex, 93);\n    } else {\n        this.checkClosed();\n        if(!this.useLegacyDatetimeCode) {\n            this.newSetTimestampInternal(parameterIndex, x, targetCalendar);\n        } else {\n            String timestampString = null;\n            Calendar sessionCalendar = this.connection.getUseJDBCCompliantTimezoneShift()?this.connection.getUtcCalendar():this.getCalendarInstanceForSessionOrNew();\n            synchronized(sessionCalendar) {\n                x = TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, x, tz, this.connection.getServerTimezoneTZ(), rollForward);\n            }\n\n            if(this.connection.getUseSSPSCompatibleTimezoneShift()) {\n                this.doSSPSCompatibleTimezoneShift(parameterIndex, x, sessionCalendar);\n            } else {\n                synchronized(this) {\n                    if(this.tsdf == null) {\n                        this.tsdf = new SimpleDateFormat(\"\\\'\\\'yyyy-MM-dd HH:mm:ss\", Locale.US);\n                    }\n\n                    timestampString = this.tsdf.format(x);\n                    StringBuffer buf = new StringBuffer();\n                    buf.append(timestampString);\n                    buf.append(\'.\');\n                    buf.append(this.formatNanos(x.getNanos()));\n                    buf.append(\'\\\'\');\n                    this.setInternal(parameterIndex, buf.toString());\n                }\n            }\n        }\n\n        this.parameterTypes[parameterIndex - 1 + this.getParameterIndexOffset()] = 93;\n    }\n\n}\n```\n\n从上面代码中可以看出，它在处理时间的时候，使用SimpleDateFormat进行格式化的，格式化中没保留毫秒，紧接着后面又去拼接纳秒formatNanos，但是继续跟踪此方法后发现它返回的是0，因此最后PreparedStatement填的值形如\"yyyy-MM-dd HH:MM:ss.0\"。\n\n问题已经定位到，所以就想着能不能升级jar包版本解决问题呢？\n\n去[中央仓库](https://mvnrepository.com/)搜一把, 发现我现在的版本5.1.9实在是太古老了，用的人也不多，于是换了新版的用的人较多的5.1.34, 果然成功解决问题。新版jar包核心代码如下：\n\n```\nprivate void setTimestampInternal(int parameterIndex, Timestamp x, Calendar targetCalendar, TimeZone tz, boolean rollForward) throws SQLException {\n    synchronized(this.checkClosed().getConnectionMutex()) {\n        if(x == null) {\n            this.setNull(parameterIndex, 93);\n        } else {\n            this.checkClosed();\n            if(!this.useLegacyDatetimeCode) {\n                this.newSetTimestampInternal(parameterIndex, x, targetCalendar);\n            } else {\n                Calendar sessionCalendar = this.connection.getUseJDBCCompliantTimezoneShift()?this.connection.getUtcCalendar():this.getCalendarInstanceForSessionOrNew();\n                synchronized(sessionCalendar) {\n                    x = TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, x, tz, this.connection.getServerTimezoneTZ(), rollForward);\n                }\n\n                if(this.connection.getUseSSPSCompatibleTimezoneShift()) {\n                    this.doSSPSCompatibleTimezoneShift(parameterIndex, x, sessionCalendar);\n                } else {\n                    synchronized(this) {\n                        if(this.tsdf == null) {\n                            this.tsdf = new SimpleDateFormat(\"\\\'\\\'yyyy-MM-dd HH:mm:ss\", Locale.US);\n                        }\n\n                        StringBuffer buf = new StringBuffer();\n                        buf.append(this.tsdf.format(x));\n                        if(this.serverSupportsFracSecs) {\n                            int nanos = x.getNanos();\n                            if(nanos != 0) {\n                                buf.append(\'.\');\n                                buf.append(TimeUtil.formatNanos(nanos, this.serverSupportsFracSecs, true));\n                            }\n                        }\n\n                        buf.append(\'\\\'\');\n                        this.setInternal(parameterIndex, buf.toString());\n                    }\n                }\n            }\n\n            this.parameterTypes[parameterIndex - 1 + this.getParameterIndexOffset()] = 93;\n        }\n\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (72, '使用jaudiotagger解析mp3文件', '#### 依赖\n```\n<jaudiotagger.version>2.0.3</jaudiotagger.version>\n\n...\n\n<dependency>\n    <groupId>org</groupId>\n    <artifactId>jaudiotagger</artifactId>\n    <version>${jaudiotagger.version}</version>\n</dependency>\n```\n\n<!-- more -->\n\n#### Mp3Util.java\n```\npackage com.kangyonggan.app.future.common.util;\n\nimport lombok.extern.log4j.Log4j2;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jaudiotagger.audio.mp3.MP3AudioHeader;\nimport org.jaudiotagger.audio.mp3.MP3File;\nimport org.jaudiotagger.tag.id3.AbstractID3v2Frame;\nimport org.jaudiotagger.tag.id3.AbstractID3v2Tag;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * mp3工具类\n *\n * @author kangyonggan\n * @since 9/4/17\n */\n@Log4j2\npublic class Mp3Util {\n\n    public static void main(String[] args) throws Exception {\n        Map<String, Object> resultMap = parse(\"/Users/kyg/Music/网易云音乐/demo.mp3\", \"/Users/kyg/Desktop\");\n        log.info(resultMap);\n    }\n\n    /**\n     * 解析mp3\n     *\n     * @param mp3Path  mp3路径\n     * @param albumDir 解析出的专辑图片存放目录\n     * @return\n     */\n    public static Map<String, Object> parse(String mp3Path, String albumDir) {\n        Map<String, Object> resultMap = new HashMap();\n\n        FileOutputStream out = null;\n        try {\n            MP3File mp3File = new MP3File(mp3Path);\n            MP3AudioHeader header = mp3File.getMP3AudioHeader();\n            AbstractID3v2Tag id3v2Tag = mp3File.getID3v2Tag();\n\n            // 时长(秒)\n            int duration = header.getTrackLength();\n            // 文件大小\n            long size = mp3File.getFile().length();\n            // 歌曲名\n            String name = getInfo(id3v2Tag, \"TIT2\");\n            // 歌手\n            String singer = getInfo(id3v2Tag, \"TPE1\");\n            // 专辑\n            String album = getInfo(id3v2Tag, \"TALB\");\n            // 专辑图片\n            AbstractID3v2Frame frame = (AbstractID3v2Frame) id3v2Tag.frameMap.get(\"APIC\");\n            String mimeTpe = (String) frame.getBody().getObjectValue(\"MIMEType\");\n            byte data[] = (byte[]) frame.getBody().getObjectValue(\"PictureData\");\n\n            // 根据MIMEType获取对应的后缀，如：image/jpeg -> .jpg\n            String extension = FileUtil.getExtension(mimeTpe);\n            if (StringUtils.isEmpty(extension)) {\n                extension = \".jpg\";\n            }\n            // 把专辑图片写入指定文件夹\n            out = new FileOutputStream(albumDir + File.separator + album + extension);\n            out.write(data);\n            out.flush();\n\n            // 写响应\n            resultMap.put(\"duration\", duration);\n            resultMap.put(\"size\", size);\n            resultMap.put(\"name\", name);\n            resultMap.put(\"singer\", singer);\n            resultMap.put(\"album\", album);\n            resultMap.put(\"mimeTpe\", mimeTpe);\n            resultMap.put(\"albumName\", album + extension);\n\n            resultMap.put(\"respCo\", 0);\n            resultMap.put(\"respMsg\", \"解析mp3成功\");\n        } catch (Exception e) {\n            log.warn(\"解析mp3信息异常\", e);\n            resultMap.put(\"respCo\", -1);\n            resultMap.put(\"respMsg\", e.getLocalizedMessage());\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    log.warn(\"关闭流异常\", e);\n                }\n            }\n        }\n\n        return resultMap;\n    }\n\n    /**\n     * 获取歌曲信息\n     *\n     * @param id3v2Tag\n     * @param identifier\n     * @return\n     */\n    private static String getInfo(AbstractID3v2Tag id3v2Tag, String identifier) {\n        AbstractID3v2Frame frame = (AbstractID3v2Frame) id3v2Tag.frameMap.get(identifier);\n        return (String) frame.getBody().getObjectValue(\"Text\");\n    }\n\n}\n```\n\n其中依赖了apache下的一个jar包，用于获取MIMEType对应的文件后缀名\n\n```\n<tika.version>1.16</tika.version>\n\n...\n\n<dependency>\n    <groupId>org.apache.tika</groupId>\n    <artifactId>tika-core</artifactId>\n    <version>${tika.version}</version>\n</dependency>\n```\n\n#### FileUtil.java\n```\n/**\n * 根据MIMEType获取后缀\n *\n * @param mimeType\n * @return\n * @throws Exception\n */\npublic static String getExtension(String mimeType) throws Exception {\n    MimeTypes allTypes = MimeTypes.getDefaultMimeTypes();\n    MimeType type = allTypes.forName(mimeType);\n    return type.getExtension();\n}\n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (73, '回到顶部功能的实现', '#### html代码\n```\n<a href=\"javascript:scrollTo(0, 0)\" class=\"scroll-top\">\n	<img src=\"${ctx}/static/app/images/top.png\" width=\"40\" height=\"40\"/>\n</a>\n```\n\n#### css样式\n```\n.scroll-top {\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    z-index: 99999;\n    display: none;\n}\n```\n\n<!-- more -->\n\n#### js控制\n```\n$(function () {\n    $(window).scroll(function () {\n        if ($(window).scrollTop() >= 300) { //向下滚动像素大于这个值时，即出现浮窗~\n            $(\'.scroll-top\').fadeIn(1000);\n        } else {\n            $(\'.scroll-top\').fadeOut(1000);\n        }\n    });\n});\n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (74, 'IntelliJ IDEA自动生成setter方法丢失is', '### 实体类\n有一个实体类Demo，他有一个boolean类型的属性isUpdate。\n\n### idea\n如果使用idea自动生成setter方法如下：\n\n```\npublic void setUpdate(boolean update) {\n    isUpdate = update;\n}\n```\n\n### 前端请求\n```\n$.post(\"xxxxx/update\", {\n    isUpdate: true\n}, function(data,status){\n    alert(\"数据: \\n\" + data + \"\\n状态: \" + status);\n});\n```\n\n<!-- more -->\n\n### spring注入\n我们在前端请求后台controller时，controller方法的参数是实体类Demo，如下：\n\n```\n@RequestMapping(value = \"update\", method = RequestMethod.POST)\npublic String update(Demo demo) {\n    // ...\n    System.out.println(\"isUpdate is \" + demo.getIsUpdate());\n    return null;\n}\n```\n\n### 输出\n```\nisUpdate is false\n```\n\n说明spring在注入时找不到isUpdate对应的setter方法。\n\n\n### eclipse\n如果使用eclipse自动生成setter方法如下：\n\n```\npublic void setIsUpdate(boolean isUpdate) {\n    this.isUpdate = isUpdate;\n}\n```\n\n换成eclipse之后，生成的setter就是好的了, 如果使用lombok插件自动生成setter也是好的\n\n> 说明：只有属性是boolean或者Boolean时，并且以is开头的字段，使用idea自动生成setter时才会丢失is。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (75, 'CSS3实现加载中的动画效果', '### 实现原理\n主要使用transform的rotate属性，将线条组合成Loading图形 (也就是菊花图形)。\n\nanimation实现将线条颜色由浅到深，再由深到浅来回变换的动画，通过animation-delay属性来使颜色的变换产生过渡的效果，从而达到类似于Loading动画的效果。\n\n### html代码\n```\n<div class=\"loading\">\n    <span class=\"line1\"></span>\n    <span class=\"line2\"></span>\n    <span class=\"line3\"></span>\n    <span class=\"line4\"></span>\n    <span class=\"line5\"></span>\n    <span class=\"line6\"></span>\n    <span class=\"line7\"></span>\n    <span class=\"line8\"></span>\n</div>\n```\n\n<!-- more -->\n\n### css代码\n```\n.loading {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 80px;\n    height: 80px;\n    margin: auto;\n    z-index: 9999;\n}\n\n.loading span {\n    width: 4px;\n    height: 20px;\n    background-color: #ccc;\n    position: absolute;\n    left: 38px;\n    -webkit-animation: loading 1s infinite;\n}\n\n.loading .line1 {\n    background-color: #000;\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n    -webkit-animation-delay: .3s;\n}\n\n.loading .line2 {\n    top: 5px;\n    left: 52px;\n    -webkit-transform: rotate(45deg);\n    transform: rotate(45deg);\n    -webkit-animation-delay: .4s;\n}\n\n.loading .line3 {\n    top: 18px;\n    left: 57px;\n    -webkit-transform: rotate(90deg);\n    transform: rotate(90deg);\n    -webkit-animation-delay: .5s;\n}\n\n.loading .line4 {\n    top: 31px;\n    left: 52px;\n    -webkit-transform: rotate(135deg);\n    transform: rotate(135deg);\n    -webkit-animation-delay: .6s;\n}\n\n.loading .line5 {\n    top: 37px;\n    -webkit-animation-delay: .7s;\n}\n\n.loading .line6 {\n    top: 32px;\n    left: 24px;\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n    -webkit-animation-delay: .8s;\n}\n\n.loading .line7 {\n    top: 18px;\n    left: 19px;\n    -webkit-transform: rotate(-90deg);\n    transform: rotate(-90deg);\n    -webkit-animation-delay: .9s;\n}\n\n.loading .line8 {\n    top: 5px;\n    left: 24px;\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n    -webkit-animation-delay: 1s;\n}\n\n@-webkit-keyframes loading {\n    0% {\n        background-color: #ccc;\n    }\n    50% {\n        background-color: #000;\n    }\n    100% {\n        background-color: #ccc;\n    }\n}\n```\n\n### 效果图\n\n![loading-demo.gif](https://kangyonggan.com/upload/loading-demo.gif)', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (76, '让百度分享支持https的网站', '### 百度分享\n百度分享地址：[http://share.baidu.com](http://share.baidu.com)\n由于我的网站的https的，而百度分享代码中是http的，所以不能按照百度分享提供的代码直接使用。\n我的做法是将百度分享所使用的js、css、image全部下载下来，放在我自己的服务器。\n\n### 下载\n[baidu-share.zip](https://kangyonggan.com/upload/baidu-share.zip)\n\n### 使用方法\n下面的代码是使用百度分享自动生成的，首先是把zip文件解压到服务器根目录下，然后需要把域名改为自己域名的就ok了。\n比如我是将“http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”\n\n<!-- more -->\n\n```\n<script> window._bd_share_config = {\n    \"common\": {\n        \"bdSnsKey\": {},\n        \"bdText\": \"\",\n        \"bdMini\": \"2\",\n        \"bdMiniList\": false,\n        \"bdPic\": \"\",\n        \"bdStyle\": \"0\",\n        \"bdSize\": \"16\"\n    }, \"slide\": {\"type\": \"slide\", \"bdImg\": \"1\", \"bdPos\": \"right\", \"bdTop\": \"100\"}\n};\nwith (document)0[(getElementsByTagName(\'head\')[0] || body).appendChild(createElement(\'script\')).src = \'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=\' + ~(-new Date() / 36e5)];</script>\n</script>\n```\n\n### 效果图\n![效果图](https://kangyonggan.com/upload/https-share.png)\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (77, '一键生成通用增删改查从前端到后台的所有代码', '### 使用方法\n```\n# 拉取项目到本地\ngit clone https://github.com/kangyonggan/codegen.git\n# 编译并安装\nmvn clean install\n# 一键生成项目\nmvn archetype:generate -DarchetypeGroupId=com.kangyonggan.archetype -DarchetypeArtifactId=codegen -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=local\n```\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (78, '利用编译时注解增强方法', '### 想法\n1. 在任何一个方法上加上注解，都要能打印出参、入参信息，而不局限于spring管理的类方法。\n2. 不要每次调用方法都要经过各种反射，而是编译时就把增强代码注入到方法第一行。这样性能更好。\n3. 可以自定义使用什么日志框架输出日志。\n\n### 实验环境\n- 开发工具：idea或eclipse\n- 项目管理工具：maven3.3.9\n- jdk版本：1.8.0_144\n\n<!-- more -->\n\n### 实现\n\n#### 创建maven项目\n使用idea创建一个普通的maven项目hello。并创建两个子模块hello-core和hello-test。整体项目结构如下图：\n\n![method-logger](https://kangyonggan.com/upload/method-logger.png)\n\n#### 父模块pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.kangyonggan.demo</groupId>\n    <artifactId>hello</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n\n    <modules>\n        <module>hello-core</module>\n        <module>hello-test</module>\n    </modules>\n\n    <properties>\n        <!--Project-->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.build.version>1.0-SNAPSHOT</project.build.version>\n\n        <!--Plugins-->\n        <plugin.compiler.version>3.5.1</plugin.compiler.version>\n        <plugin.compiler.level>1.8</plugin.compiler.level>\n    </properties>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <!--compiler plugin -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>${plugin.compiler.version}</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n</project>\n```\n\n### hello-core模块pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>hello</artifactId>\n        <groupId>com.kangyonggan.demo</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>hello-core</artifactId>\n\n    <build>\n        <plugins>\n            <!--compiler plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>${plugin.compiler.level}</source>\n                    <target>${plugin.compiler.level}</target>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <compilerArgument>-proc:none</compilerArgument>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencies>\n        <dependency>\n            <groupId>sun.jdk</groupId>\n            <artifactId>tools</artifactId>\n            <version>1.5.0</version>\n            <scope>system</scope>\n            <systemPath>${java.home}/../lib/tools.jar</systemPath>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n> 注意：编译插件一定要配置：`<compilerArgument>-proc:none</compilerArgument>`, 否则编译时报错：\n\n```\nBad service configuration file, or exception thrown while constructing Processor object: javax.annotation.processing.Processor: Provider com.kangyonggan.demo.hello.core.MethodLoggerProcessor not found\n```\n\n> 注意：一定要依赖`tools.jar`，否则编译时报错：\n\n```\ncom.sun.tools.javac.processing does not exist\n```\n\n### 编译时注解\n`MethodLogger.java`\n\n```\npackage com.kangyonggan.demo.hello.core;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author kangyonggan\n * @since 9/28/17\n */\n@Retention(RetentionPolicy.SOURCE)\n@Target(ElementType.METHOD)\npublic @interface MethodLogger {\n\n}\n```\n\n### 注解处理器\n`MethodLoggerProcessor.java`\n\n```\npackage com.kangyonggan.demo.hello.core;\n\nimport com.sun.source.util.Trees;\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\nimport com.sun.tools.javac.tree.JCTree;\nimport com.sun.tools.javac.tree.TreeMaker;\nimport com.sun.tools.javac.tree.TreeTranslator;\nimport com.sun.tools.javac.util.*;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.Element;\nimport javax.lang.model.element.ElementKind;\nimport javax.lang.model.element.TypeElement;\nimport java.util.Set;\n\n\n/**\n * 注解处理器\n *\n * @author kangyonggan\n * @since 9/28/17\n */\n@SupportedAnnotationTypes(\"com.kangyonggan.demo.hello.core.MethodLogger\")\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\npublic class MethodLoggerProcessor extends AbstractProcessor {\n\n    private Trees trees;\n    private TreeMaker treeMaker;\n    private Name.Table names;\n\n    /**\n     * 初始化，获取编译环境\n     *\n     * @param env\n     */\n    @Override\n    public synchronized void init(ProcessingEnvironment env) {\n        super.init(env);\n\n        trees = Trees.instance(env);\n        Context context = ((JavacProcessingEnvironment) env).getContext();\n        treeMaker = TreeMaker.instance(context);\n        names = Names.instance(context).table;\n    }\n\n    /**\n     * 处理注解\n     *\n     * @param annotations\n     * @param env\n     * @return\n     */\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {\n        // 处理有@MethodLogger注解的元素\n        for (Element element : env.getElementsAnnotatedWith(MethodLogger.class)) {\n            // 只处理作用在方法上的注解\n            if (element.getKind() == ElementKind.METHOD) {\n                JCTree tree = (JCTree) trees.getTree(element);\n                tree.accept(new TreeTranslator() {\n                    /**\n                     * 方法的代码块，在代码块的第一行添加代码：System.out.println(\"Hello World!!!\");\n                     *\n                     * @param tree\n                     */\n                    @Override\n                    public void visitBlock(JCTree.JCBlock tree) {\n                        ListBuffer<JCTree.JCStatement> statements = new ListBuffer();\n\n                        // 创建代码: System.out.println(\"Hello World!!!\");\n                        JCTree.JCFieldAccess fieldAccess = treeMaker.Select(treeMaker.Select(treeMaker.Ident(names.fromString(\"System\")), names.fromString(\"out\")), names.fromString(\"println\"));\n                        JCTree.JCExpression argsExpr = treeMaker.Literal(\"Hello world!!!\");\n                        JCTree.JCMethodInvocation methodInvocation = treeMaker.Apply(List.nil(), fieldAccess, List.of(argsExpr));\n                        JCTree.JCExpressionStatement code = treeMaker.Exec(methodInvocation);\n\n                        // 把代码加到方法体之前\n                        statements.append(code);\n\n                        // 把原来的方法体写回去\n                        for (int i = 0; i < tree.getStatements().size(); i++) {\n                            statements.append(tree.getStatements().get(i));\n                        }\n\n                        result = treeMaker.Block(0, statements.toList());\n                    }\n                });\n\n            }\n        }\n        return true;\n    }\n\n}\n```\n\n### 注册注解处理器\n在`resources/META-INF/services`目录下创建文件`javax.annotation.processing.Processor`， 文件内容如下：\n\n```\ncom.kangyonggan.demo.hello.core.MethodLoggerProcessor\n```\n\n### hello-test模块pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>hello</artifactId>\n        <groupId>com.kangyonggan.demo</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>hello-test</artifactId>\n\n    <build>\n        <plugins>\n            <!--compiler plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>${plugin.compiler.level}</source>\n                    <target>${plugin.compiler.level}</target>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.kangyonggan.demo</groupId>\n            <artifactId>hello-core</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n### 测试\n`MethodLoggerTest.java`\n\n```\npackage com.kangyonggan.demo.hello.test;\n\nimport com.kangyonggan.demo.hello.core.MethodLogger;\n\n/**\n * @author kangyonggan\n * @since 10/17/17\n */\npublic class MethodLoggerTest {\n\n    @MethodLogger\n    public void test() {\n        System.out.println(\"test\");\n    }\n\n    public static void main(String[] args) {\n        new MethodLoggerTest().test();\n    }\n\n}\n```\n\n运行main方法输出如下：\n\n```\nHello world!!!\ntest\n```\n\n### 反编译MethodLoggerTest.class\n```\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage com.kangyonggan.demo.hello.test;\n\npublic class MethodLoggerTest {\n    public MethodLoggerTest() {\n    }\n\n    public void test() {\n        System.out.println(\"Hello world!!!\");\n        System.out.println(\"test\");\n    }\n\n    public static void main(String[] args) {\n        (new MethodLoggerTest()).test();\n    }\n}\n```\n\n### 源代码\nHello World的源代码托管在github上：[https://github.com/kangyonggan/method-logger-hello.git](https://github.com/kangyonggan/method-logger-hello.git)\n\n最终实现的代码：[https://github.com/kangyonggan/method-logger.git](https://github.com/kangyonggan/extra.git)\n\n此jar包已经发布到中央仓库，联网即可依赖。\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (79, '在mac上发布jar包到中央仓库', '### 注册sonatype账号\n地址：[https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)\n\n> * 记住用户名和密码，后面会频繁使用。\n\n### 创建一个issue\n地址：[https://issues.sonatype.org/secure/Dashboard.jspa](https://issues.sonatype.org/secure/Dashboard.jspa)\n使用上面注册的用户名和密码登录。\n\n<!-- more -->\n\n![sona](https://kangyonggan.com/upload/sona-01.png)\n\n> * 不要修改`Project`和`Issue Type`，使用默认值即可。\n\n![sona](https://kangyonggan.com/upload/sona-02.png)\n\n> * 其他的值请参考例子。\n\n创建完成后，1个工作日以内工作人员会回复你的Issue，如果通过的话，内容如下，如果不通过，那你就检查后再试试吧。\n\n![sona](https://kangyonggan.com/upload/sona-03.png)\n\n### 使用 GPG 生成密钥对\n如果mac上没有gpg命令，可以使用下面的命令进行安装:\n\n```\nbrew install gpg\n```\n\n如果mac上没有brew命令，需要先安装brew命令：\n\n```\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n> * 安brew命令需要先打开Xcode并同意条款。\n\n安装成功gpg命令后，生成密钥：\n\n```\ngpg --gen-key\n```\n\n输出信息：\n\n```\ngpg (GnuPG) 2.2.1; Copyright (C) 2017 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\ngpg: directory \'/Users/kyg/.gnupg\' created\ngpg: keybox \'/Users/kyg/.gnupg/pubring.kbx\' created\nNote: Use \"gpg --full-generate-key\" for a full featured key generation dialog.\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name:\n```\n\n提示输入名字， 如：`kangyonggan`\n\n```\nEmail address:\n```\n\n又提示输入邮箱, 如：`java@kangyonggan.com`\n\n```\nYou selected this USER-ID:\n    \"kangyonggan <java@kangyonggan.com>\"\n\nChange (N)ame, (E)mail, or (O)kay/(Q)uit?\n```\n\n选择okay, 输入：`o`\n\n然后弹框要求输入密码， 这个密码后面会用到，别忘记了。\n\n![sona](https://kangyonggan.com/upload/sona-06.png)\n\n之后会让你再次输入密码，到此密钥就生成成功了，输出信息如下：\n\n```\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: /Users/kyg/.gnupg/trustdb.gpg: trustdb created\ngpg: key C38B01CFC194AE3C marked as ultimately trusted\ngpg: directory \'/Users/kyg/.gnupg/openpgp-revocs.d\' created\ngpg: revocation certificate stored as \'/Users/kyg/.gnupg/openpgp-revocs.d/7A98F7517B453D562425F564C38B01CFC194AE3C.rev\'\npublic and secret key created and signed.\n\npub   rsa2048 2017-10-18 [SC] [expires: 2019-10-18]\n      7A98F7517B453D562425F564C38B01CFC194AE3C\nuid                      kangyonggan <java@kangyonggan.com>\nsub   rsa2048 2017-10-18 [E] [expires: 2019-10-18]\n```\n\n需要记住`7A98F7517B453D562425F564C38B01CFC194AE3C`，会面会有用，记不住也没关系，可以使用下面的命令查看。\n\n```\ngpg --list-keys\n```\n\n输出：\n\n```\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: next trustdb check due at 2019-10-18\n/Users/kyg/.gnupg/pubring.kbx\n-----------------------------\npub   rsa2048 2017-10-18 [SC] [expires: 2019-10-18]\n      7A98F7517B453D562425F564C38B01CFC194AE3C\nuid           [ultimate] kangyonggan <java@kangyonggan.com>\nsub   rsa2048 2017-10-18 [E] [expires: 2019-10-18]\n```\n\n### 将公钥发布到 PGP 密钥服务器\n```\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 7A98F7517B453D562425F564C38B01CFC194AE3C\n```\n\n输出信息如下：\n\n```\ngpg: sending key C38B01CFC194AE3C to hkp://keyserver.ubuntu.com:11371\nYou have new mail in /var/mail/kyg\n```\n\n说明密钥已经发布成功了，也可以使用命令查看有没有发布成功。\n\n```\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 7A98F7517B453D562425F564C38B01CFC194AE3C\n```\n\n输出：\n\n```\ngpg: key C38B01CFC194AE3C: \"kangyonggan <java@kangyonggan.com>\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n```\n\n### 配置setting.xml\n```\n<servers>\n    <server>\n        <id>oss</id>\n        <username>sonatype用户名</username>\n        <password>sonatype密码</password>\n    </server>\n</servers>\n\n...\n\n<profiles>\n    <profile>\n        <id>ossrh</id>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n\n        <properties>\n            <gpg.executable>gpg</gpg.executable>\n            <gpg.passphrase>密钥的密码</gpg.passphrase>\n        </properties>\n    </profile>\n</profiles>\n```\n\nserver的id随意填写，只要和pom.xml里面对应就行了。\n\n### 配置pom.xml\n```\n<name>Method Logger</name>\n<description>使用编译时注解打印方法入参出参和耗时</description>\n\n<url>http://www.dexcoder.com/</url>\n<licenses>\n    <license>\n        <name>The Apache Software License, Version 2.0</name>\n        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n</licenses>\n<developers>\n    <developer>\n        <name>kangyonggan</name>\n        <email>java@kangyonggan.com</email>\n    </developer>\n</developers>\n<scm>\n    <connection>scm:git:git@github.com/kangyonggan/method-logger.git</connection>\n    <developerConnection>scm:git:git@github.com/kangyonggan/method-logger.git</developerConnection>\n    <url>git@github.com/kangyonggan/method-logger.git</url>\n</scm>\n\n<profiles>\n    <profile>\n        <id>release</id>\n        <build>\n            <plugins>\n                <!-- Source -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-source-plugin</artifactId>\n                    <version>2.2.1</version>\n                    <executions>\n                        <execution>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar-no-fork</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <!-- Javadoc -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <version>2.9.1</version>\n                    <executions>\n                        <execution>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- GPG -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-gpg-plugin</artifactId>\n                    <version>1.6</version>\n                    <executions>\n                        <execution>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>sign</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n        <distributionManagement>\n            <snapshotRepository>\n                <id>oss</id>\n                <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n            </snapshotRepository>\n            <repository>\n                <id>oss</id>\n                <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n            </repository>\n        </distributionManagement>\n    </profile>\n</profiles>\n```\n\n如果你的英文很六，description标签最好用英文来写，逼格更高。其他值你看着填写就好。\n\n> repository->id 要和 setting.xml 中的保持一致。\n\n### 上传构件到 OSS 中\n```\nmvn clean deploy -P release\n```\n\n当执行以上 Maven 命令后，如果顺利，就会看见一堆upload信息，部分输出如下：\n\n```\n[DEBUG] Using transporter WagonTransporter with priority -1.0 for https://oss.sonatype.org/service/local/staging/deploy/maven2/\n[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 for https://oss.sonatype.org/service/local/staging/deploy/maven2/ with username=java@kangyonggan.com, password=***\nUploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.jar\nUploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.jar (14 KB at 3.6 KB/sec)\nUploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.pom\nUploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.pom (6 KB at 1.2 KB/sec)\nDownloading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml\n[DEBUG] Could not find metadata com.kangyonggan:method-logger/maven-metadata.xml in oss (https://oss.sonatype.org/service/local/staging/deploy/maven2/)\n[DEBUG] Writing tracking file /Users/kyg/data/repository/com/kangyonggan/method-logger/resolver-status.properties\nUploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml\nUploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml (304 B at 0.2 KB/sec)\n```\n\n> * 注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布\n\n### 发布构建\n地址：[https://oss.sonatype.org/#stagingRepositories](https://oss.sonatype.org/#stagingRepositories)\n需要使用之前注册的sonatype账号登录。\n\n点击`Staging Repositories`菜单，并拉至最下方，会看见自己刚刚deploy的jar包\n\n![sona](https://kangyonggan.com/upload/sona-07.png)\n\n选择此构建后，点击`Close`，如下图：\n\n![sona](https://kangyonggan.com/upload/sona-08.png)\n\n系统会自动验证该构件是否满足指定要求，当验证完毕后，状态会变为 Closed。然后点击`Release`。\n\n### 通知 Sonatype 构件已成功发布\n找到之前创建的Issue，并回复：`构建已发布`\n\n![sona](https://kangyonggan.com/upload/sona-04.png)\n\n### 等待构件审批通过\n等待大概一个工作日内，如果审核通过，Issue会有回复：\n\n![sona](https://kangyonggan.com/upload/sona-05.png)\n\n> * 大概需要2个小时才能把jar同步到中央仓库。\n\n### 从中央仓库搜索自己发布的jar\n地址：[http://mvnrepository.com/](http://mvnrepository.com/)\n搜索,如：`com.kangyonggan`, 结果如下：\n\n![sona](https://kangyonggan.com/upload/sona-09.png)\n\n据我实际测试发现，大概release之后不超过20分钟，就可以在[https://repo.maven.apache.org/maven2/](https://repo.maven.apache.org/maven2/)这里查看到了，只要这里有了，别人就可以依赖这个jar了。\n\n> * 二次发布同一个构建（只要groupId不变）的过程就不用这么麻烦，后面就不用再Issue中操作了。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (80, 'Java Compile Expression Language', '## Quick Start\n\n### Dependency\n\n```\n<dependency>\n    <groupId>com.kangyonggan</groupId>\n    <artifactId>jcel</artifactId>\n    <version>1.0</version>\n</dependency>\n```\n\n### Code\n```\n// treeMaker and names is JCTree\'s environment\nJCExpressionParser parser = new JCExpressionParser(treeMaker, names);\nJCTree.JCExpression expression = parser.parse(\n    \"Hello ${user.info.name}, welcome use my ${project[0](1).name}, thanks!\");\nSystem.out.println(expression);\n```\n\nOutput:\n\n```\n\"Hello \" + user.getInfo().getName() + \", welcome use my \" + project[0].get(1).getName();\n```\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (81, '使用netstat查看端口占用情况', '\n## 参数\n参数   |     全拼    |       说明\n----- | ------------ | -------------\n-a   | –all  | 显示所有连线中的Socket\n-c   | –continuous  | 持续列出网络状态\n-C   | –cache  | 显示路由器配置的快取信息\n-e   | –extend  | 显示网络其他相关信息\n-F   | –fib  | 显示FIB\n-g   | –groups  | 显示多重广播功能群组组员名单\n-i   | –interfaces  | 显示网络界面信息表单\n-l   | –listening  | 显示监控中的服务器的Socket\n-M   | –masquerade  | 显示伪装的网络连线\n-n   | –numeric  | 直接使用IP地址，而不通过域名服务器\n-N   | ––netlink或–symbolic  | 显示网络硬件外围设备的符号连接名称\n-o   | –timers  |  显示计时器\n-p   | –programs  | 显示正在使用Socket的程序识别码和程序名称\n-r   | –route  | 显示Routing Table\n-s   | –statistice  | 显示网络工作信息统计表\n-t   | –tcp  | 显示TCP传输协议的连线状况\n-u   | –udp  | 显示UDP传输协议的连线状况\n-v   | –verbose  | 显示指令执行过程\n-V   | –version  | 显示版本信息\n-w   | –raw  | 显示RAW传输协议的连线状况\n-x   | –unix  | 此参数的效果和指定”-A unix”参数相同\n-ip   | –inet  | 此参数的效果和指定”-A inet”参数相同\n\n## 实例\n### 查看端口占用情况\n```\nsudo netstat -tunlp | grep 6379\n```\n\n输出：\n\n```\ntcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1962/redis-server *\ntcp6       0      0 :::6379                 :::*                    LISTEN      1962/redis-server *\n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (82, '在jboss上配置jndi', '## 准备工作\n以配置MySQL的jndi为例。\n1. jdk环境\n2. jboss安装包\n3. MySQL驱动包\n\n## 修改配置\n${JBOSS_HOME}/standalone/configuration/`standalone.xml`\n\n<!-- more -->\n\n```\n<datasources>\n    <datasource jndi-name=\"java:jboss/datasources/DemoDS\" pool-name=\"DemoDS\" enabled=\"true\" use-java-context=\"true\">\n        <connection-url>jdbc:mysql://127.0.0.1:3306/demodb</connection-url>\n        <driver>mysql</driver>\n        <security>\n            <user-name>root</user-name>\n            <password>123456</password>\n        </security>\n    </datasource>\n    <drivers>\n        <driver name=\"mysql\" module=\"com.kangyonggan.mysql\">\n            <xa-datasource-class>com.mysql.jdbc.Driver</xa-datasource-class>\n        </driver>\n    </drivers>\n</datasources>\n```\n\n## 添加驱动\n在${JBOSS_HOME}/modules/com/kangyonggan/mysql/main/目录下添加mysql驱动包，如：`mysql-connector-java-5.1.38.jar`, 这个jar包可以从本地maven仓库中找到，也可以从中央仓库下载。\n\n\n\n在此目录下添加驱动包的配置文件：`module.xml`， 内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<module xmlns=\"urn:jboss:module:1.1\" name=\"com.kangyonggan.mysql\">\n\n    <resources>\n        <resource-root path=\"mysql-connector-java-5.1.38.jar\"></resource>\n    </resources>\n    <dependencies>\n        <module name=\"javax.api\"></module>\n        <module name=\"javax.transaction.api\"></module>\n        <module name=\"javax.servlet.api\" optional=\"true\"></module>\n    </dependencies>\n</module>\n```\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (83, '持续集成工具TeamCity的安装和使用', '## 概述\nTeamCity是一款功能强大的持续集成（Continue Integration）工具。\n\n和IntelliJ IDEA同属于JetBrains公司，因此，TeamCity可以和IDEA无缝集成，通俗一点说，就是可以在IDEA上一键发布。\n\n官方地址：[https://www.jetbrains.com/teamcity/](https://www.jetbrains.com/teamcity/)\n官方文档：[https://confluence.jetbrains.com/display/TCD9/TeamCity+Documentation](https://confluence.jetbrains.com/display/TCD9/TeamCity+Documentation)\n\n<!-- more -->\n\n## 准备工作\n1、windows 或 Mac 或 Linux\n2、配置`JAVA_HOME`环境变量\n3、下载安装包[https://www.jetbrains.com/teamcity/download/](https://www.jetbrains.com/teamcity/download/)\n\n## 安装说明\n以mac系统为例, 我下载的安装包为`TeamCity-2017.2.1.tar.gz`。\n\n### 解压到指定目录\n```\ntar -zxvf /Users/kyg/Downloads/TeamCity-2017.2.1.tar.gz -C /Users/kyg/install/\n```\n\n### 启动和停止\n启动\n\n```\nsh /Users/kyg/install/TeamCity/bin/runAll.sh start\n```\n\n停止\n\n```\nsh /Users/kyg/install/TeamCity/bin/runAll.sh stop\n```\n\n## 访问\n[http://127.0.0.1:8111](http://127.0.0.1:8111)\n\nTeamCity内置了一个tomcat容器，默认端口为8111，可以在\n`/Users/kyg/install/TeamCity/conf/server.xml`修改端口。\n\n```\n<Connector port=\"8111\" ...\n```\n\n首次访问，会让你选择存放配置的目录， 如下图：\n\n![](https://kangyonggan.com/upload/tc-01.png)\n\n默认即可，点击`Proceed`， 接下来是选择数据库，如下图：\n\n![](https://kangyonggan.com/upload/tc-02.png)\n\n这里我选择的是mysql，选择mysql后，需要把mysql的驱动包(可以从本地maven仓库中找到)拷贝到\n`/Users/kyg/.BuildServer/lib/jdbc`目录下，然后点击`Refresh JDBC Drivers`, 如果jar包没问题，会出现下面的界面：\n\n![](https://kangyonggan.com/upload/tc-03.png)\n\n最后填写jdbc连接的相关信息后点击`Proceed`，需要先自己创建一个数据库`teamcity`\n下一步就是接受条款，不多说。\n\n然后就是让我们创建一个管理员, 如下图：\n\n![](https://kangyonggan.com/upload/tc-04.png)\n\n创建完成后会直接登录，并让我们补全个人信息，如下图：\n\n![](https://kangyonggan.com/upload/tc-05.png)\n\n到此，TeamCity就算安装完毕了，接下来就是配置一个项目，用于持续集成。\n\n## 创建项目\n![](https://kangyonggan.com/upload/tc-06.png)\n\n此处我使用的是github上的项目。\n![](https://kangyonggan.com/upload/tc-07.png)\n\n![](https://kangyonggan.com/upload/tc-08.png)\n\n如果是maven项目，它会自动识别出，并推荐你使用它的构建步骤，这里选不选都行，因为回头可以修改，基本上必须修改。\n![](https://kangyonggan.com/upload/tc-09.png)\n\n![](https://kangyonggan.com/upload/tc-10.png)\n\n勾选后，跳转到构建步骤界面，这里你可以自由配置自己的构建步骤，比如\n第一步：更新代码并打包\n第二步：把war包拷贝到服务器\n第三步：执行几个shell命令，停止服务+替换war包+启动服务\n\n下面是我的配置，可供参考：\n![](https://kangyonggan.com/upload/tc-11.png)\n\n以及三个步骤的具体配置：\n![](https://kangyonggan.com/upload/tc-12.png)\n\n![](https://kangyonggan.com/upload/tc-13.png)\n\n![](https://kangyonggan.com/upload/tc-14.png)\n\n接下来就可以尝试启动了，点击右上角的`run`， 如果运气好，就会发布成功。\n\n这个过程会很慢甚至会失败，因为你没有配置maven的`settings.xml`\n它可能找不到你的仓库，如果你用的全部都是中央仓库的jar那就没问题\n\n为了保证一个服务器只有一个本地仓库，最好指定一下settings.xml\n如下图：\n![](https://kangyonggan.com/upload/tc-15.png)\n\n到此，算是搞定了，但是它还有另外一种操作，那就是集成在IDEA中。\n\n## 集成到IDEA\n在idea中搜索插件`teamcity`，安装后重启。\n![](https://kangyonggan.com/upload/tc-16.png)\n\n重启后，会发现下面3点变化，右下角的那个图标表示暂未登录到TeamView。\n![](https://kangyonggan.com/upload/tc-17.png)\n\n点击右下角的图标登录TeamView：\n![](https://kangyonggan.com/upload/tc-18.png)\n\n登录成功后，即可在IDEA中一键发布项目了。\n![](https://kangyonggan.com/upload/tc-19.png)\n\n这样的话，一个IDEA就可以开发代码，运行项目，控制版本，操作数据库，一键发布，强大的不要不要的。\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (84, 'java.sql.SQLException: connection holder is null', '## 异常信息\n```\njava.sql.SQLException: connection holder is null\n```\n\n## 相关配置\n```\n<!-- 关闭长时间不使用的连接 -->\n<property name=\"removeAbandoned\" value=\"true\" /> <!-- 打开removeAbandoned功能 -->\n<property name=\"removeAbandonedTimeout\" value=\"1200\" /> <!-- 1200秒，也就是20分钟 -->\n<property name=\"logAbandoned\" value=\"true\" /> <!-- 关闭abanded连接时输出错误日志 -->\n```\n\n## 解决方案\n1. removeAbandoned 设置为 false，不建议。\n2. removeAbandonedTimeout 延长这个过期时间，也不是太建议。\n3. 指定不要关闭某个方法的连接（how？）', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (85, '使用swift3开发iOS应用', '代码托管地址：[https://github.com/kangyonggan/SmartNovel.git](https://github.com/kangyonggan/SmartNovel.git)\n\n首页原型图：\n![](https://kangyonggan.com/upload/ARTICLE201803291a669a8feedf06228961747698713e19548eaf00.jpeg)\n\n![](https://kangyonggan.com/upload/ARTICLE20180329e44cec1dec1d3b9b03c291ce1fe7e5004f0b66f8.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329fe041a6ecab12d3375957a83f4f7cf955bb72e27.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329240316dc285f2176d97afb30cc96dfe1bbc49a46.png)\n![](https://kangyonggan.com/upload/ARTICLE201803294da883b80dd96dbbd0f62effe47ad3ff1d652453.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329a444d1365aa78e878d553cba2a064f2126c5f488.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032946ff8ea3b8b64a176e59d15b8c605c450e7bd12e.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329db0e5f6eeb1e6f18a01ee8e2ad05b2ba5ac58736.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329b558fdcfc194a3c4bfbba132020e0e4e762f00aa.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329272ef2255bba2c536eae793fff6776ad5b758c8b.png)\n![](https://kangyonggan.com/upload/ARTICLE201803293633b88664f2b300081beabeb72197377512e863.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329cab0385d756409741e63944e63ebf2f4315fb954.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329001d8e279d65048c0dcbc5dd6cb80173c98ddd81.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329bb4f8ff8d7313393276a745c47fb134dcbaa0dff.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329720c525c115fab4e2a83ceaec0bcef810c4c3ae5.png)\n![](https://kangyonggan.com/upload/ARTICLE201803291531cee2ea814b6e16ea4319812f723682f6f42f.png)\n![](https://kangyonggan.com/upload/ARTICLE201803293b4dda43256e5e42251c423d0175c6e490970a81.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329f8a98ddfdfab9152e46ae533f0b37bf76ca90ba0.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329a234d9ad240c728d1deaf9645a033b61c2590b0c.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329f69306e0c0aaf8099b51957865cb651ac9dbd6b2.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032977e8f4b2e8894951d7171b3997f9c765a4508a08.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032968448b2686352eb32ed5ce1d37023a656d039a9f.png)\n![](https://kangyonggan.com/upload/ARTICLE201803293615191241b47d08cac1e20889433a8ea8dd640a.png)\n![](https://kangyonggan.com/upload/ARTICLE201803292b4a1236a524db0b07ba01355e14b471f89be2e0.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329625a5540139caadf1a34ae98ea07ff47e914be1b.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329455eb5d4607a519c1e559a9f58e2a09946b7f5dc.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329a0e6417ee221afec014596baab5d9abb3becb035.png)\n![](https://kangyonggan.com/upload/ARTICLE201803295b969d00d4a19654bdac5490704d5aef60c0d639.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329bfa1cbc3d5ae828b64112fb3ab2011222dd15e48.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329d8c5422b4948329769f4c956b1149d682a032a3f.png)\n![](https://kangyonggan.com/upload/ARTICLE201803292e38ed339ce58b8395b0631708dd55ba00832b7a.png)\n![](https://kangyonggan.com/upload/ARTICLE201803291f2be214eb728974170b91dfdb60e9e23e2f8329.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329eabd66b56aa94ef477cd9e095b2710d2c361023f.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032962047bfe0ada1ae75e5817d9143edab79f2d79f1.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032970b74281949244157e139cf98bc051d453675c0d.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329951e83b2162ddd233c81ee7a280590c6bd23886d.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329a264b52cdc39fa15a7c8740e53cd57d14271111d.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329be685eac962e536a0f60ef05fe7bd4e16974f076.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032993f0b186852babe40c80dbc5e1d1e30a7317a2bd.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329bb1431c798cd6668a7172026e101849d62030a56.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032958f05b24a4c0a5079163d9a222311cb51986e3c3.png)\n![](https://kangyonggan.com/upload/ARTICLE2018032987576544d53a1772c257435bafcb2cff4e0423e3.png)\n![](https://kangyonggan.com/upload/ARTICLE20180329fd58a4a8dd403e75b8b37452370b66f9861ded8f.png)\n![](https://kangyonggan.com/upload/ARTICLE201803293b32a8e4f1198cc7126c3a268ec2476d9999ca67.png)\n\n依赖第三方框架，是在项目的根目录添加`Podfile`文件\n\n![](https://kangyonggan.com/upload/ARTICLE20180329922ba7ac1d5625efc4a50899a040dfc449036cd2.png)\n\n其中`Podfile`的内容为：\n\n```\nplatform :ios, \'10.3\'\nuse_frameworks!\n \ntarget \'SmartNovel\' do\n	pod \'Toast-Swift\'\n	pod \'Just\'\nend\n```\n\n文件添加后之后执行命令`pod install`，执行成功之后如下图：\n\n![](https://kangyonggan.com/upload/ARTICLE201803296b30f1712b6902876962f31dfc5f2163809c6443.png)\n\n第三方框架报错，是因为它使用的是oc的语法，我使用的是swift语法，可能有些不兼容，点击自动修复即可。\n\n![](https://kangyonggan.com/upload/ARTICLE2018032903a774a0cf2db0f3f20582b5ea0bad6b3c23e318.png)\n\n把报错的代码删了就好，貌似没发现有其他影响。\n\n![](https://kangyonggan.com/upload/ARTICLE20180329322d16429004dcf360118a34a77788eecaa4c386.png)\n\n还有一些其他的小操作，我也知道的不多，不过这已经够我开发一个业余的小应用了。\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (86, 'IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(一)', '## 下载地址\n- IntelliJ IDEA下载地址：[https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download)\n- TeamCity下载地址：[https://www.jetbrains.com/teamcity/download](https://www.jetbrains.com/teamcity/download)\n- Upsource下载地址：[https://www.jetbrains.com/upsource/download](https://www.jetbrains.com/upsource/download)\n- TeamCity Plugin：[https://plugins.jetbrains.com/plugin/1820-teamcity-integration](https://plugins.jetbrains.com/plugin/1820-teamcity-integration)\n- Upsource Pligin：[https://plugins.jetbrains.com/plugin/7431-upsource-integration](https://plugins.jetbrains.com/plugin/7431-upsource-integration)\n- 阿里巴巴代码质量检测插件：[https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines](https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines)\n\n后面三个是idea插件，如果电脑能联网，可以在插件中搜索到直接安装，如果是公司内网，可以下载离线安装包，然后手动安装idea插件。\n\n安装IDEA插件方法：`Preferences > Plugins > Install plugin from disk...`\n\n## TeamCity的安装\n\n> 以下都是以我博客服务器（ubuntu 16.04.4）为例\n\n### 解压到指定目录\n```\ntar -zxvf soft/TeamCity-2017.2.3.tar.gz  -C install/\n```\n\n### 启动\n```\nsh install/TeamCity/bin/runAll.sh start\n```\n\n### 停止\n```\nsh install/TeamCity/bin/runAll.sh stop\n```\n\n### 访问\n[http://kangyonggan.com:8111](http://kangyonggan.com:8111)\n\n\nTeamCity内置了一个tomcat容器，默认端口为8111，可以在\n`/home/hxzq/install/TeamCity/conf/server.xml`修改端口。\n\n```\n<Connector port=\"8111\" ...\n```\n\n![](https://kangyonggan.com/upload/ARTICLE20180401b89693552301f2e1d60c3a780427f167a4738378.png)\n\n默认即可，点击`Proceed`， 接下来是选择数据库，如下图：\n\n![](https://kangyonggan.com/upload/ARTICLE201804014eb4101e00e74b27246e5ad2c387ebc2b149c35b.png)\n\n这里我选择的是mysql，选择mysql后，需要把mysql的驱动包(可以从本地maven仓库中找到)拷贝到\n`/home/hxzq/.BuildServer/lib/jdbc`目录下，然后点击`Refresh JDBC Drivers`, 如果jar包没问题，会出现下面的界面：\n\n```\ncp mysql-connector-java-5.1.34.jar /home/hxzq/.BuildServer/lib/jdbc/\n```\n\n![](https://kangyonggan.com/upload/ARTICLE2018040187bd260ade064bf05398f4c6a05612a27606d408.png)\n\n最后填写jdbc连接的相关信息后点击`Proceed`，需要先自己创建一个数据库`teamcity`\n下一步就是接受条款，不多说。\n\n```\nDROP DATABASE IF EXISTS teamcity;\n\nCREATE DATABASE teamcity\n  DEFAULT CHARACTER SET utf8\n  COLLATE utf8_general_ci;\n```\n\n然后就是让我们创建一个管理员, 如下图：\n\n![](https://kangyonggan.com/upload/ARTICLE2018040192a3a27d4ed5cc2c1fe4b149c8d1a57e8122a2e3.png)\n\n创建完成后会直接登录，并让我们补全个人信息，如下图：\n\n![](https://kangyonggan.com/upload/ARTICLE20180401b2cbe1b9fbf4274961a274da47d9daf9ec109958.png)\n\n到此，TeamCity就算安装完毕了，接下来就是配置一个项目，用于持续集成。\n\n## 创建项目\n![](https://kangyonggan.com/upload/ARTICLE2018040164a3c5faec96dfedb57c97f0b0f7515353ec7bde.png)\n\n此处我使用的是github上的项目。\n![](https://kangyonggan.com/upload/ARTICLE2018040114db8b0e9e377d0f3d04b5641a351780877ba0e9.png)\n\n![](https://kangyonggan.com/upload/ARTICLE2018040190c432c5b896215b65196e70be7329b53479978a.png)\n\n如果是maven项目，它会自动识别出，并推荐你使用它的构建步骤，这里选不选都行，因为回头可以修改，基本上必须修改。\n![](https://kangyonggan.com/upload/ARTICLE20180401945610b306ddc518538f8b34fd225bb99ca0b047.png)\n\n勾选后，跳转到下面的构建步骤界面，这里你可以自由配置自己的构建步骤\n\n![](https://kangyonggan.com/upload/ARTICLE2018040119397adc0f74429b8bfd0ebbe8bb2a3e636c6e43.png)\n\n比如我配置的三个构建步骤：  \n- 第一步：更新代码并打包\n- 第二步：把war包拷贝到服务器\n- 第三步：执行几个shell命令，停止服务+替换war包+启动服务\n\n### 配置第一步\n点击`Edit`\n![](https://kangyonggan.com/upload/ARTICLE2018040142d927ce6004bb654d9e2da17b9ddc413604006f.png)\n\n![](https://kangyonggan.com/upload/ARTICLE2018040169fed61178e0e18087a094c631c280880dbdf920.png)\n\n如果配置的settings.xml不管用，可以在下面上传settings.xml文件\n\n![](https://kangyonggan.com/upload/ARTICLE20180401ab7f2e264df5a3e87c93d11c1104da6cb39c7ef3.png)\n\n## 配置第二步\n点击`Add build setup`\n\n![](https://kangyonggan.com/upload/ARTICLE201804010377f4258ce46f3fb1ef2c6f93ea0928a70f45b8.png)\n\n![](https://kangyonggan.com/upload/ARTICLE2018040157a4a890be0e9580e47679a58a504c31b024f2d3.png)\n\n如果不知道，第一步打出的war包在什么路径，可以先随意写几个字符，后面尝试运行时，会打印第一步的日志，从日志中可以看到war包路径。\n\n接下来就可以尝试启动了，点击右上角的`run`， 注意看日志，顺便看看第一步打的war包的路径。\n\n> 首次构建，时间会比较久，需要耐心等待\n\n![](https://kangyonggan.com/upload/ARTICLE20180401ea6ffbce26284267db7f2cc11729e6144aab803d.png)\n\n### 配置第三步\n点击`Add build setup`\n\n![](https://kangyonggan.com/upload/ARTICLE201804016153dda66dbc3992f894a5ca779771ad5cb1f513.png)\n\n> 我再第一步打的war包路径为`/home/hxzq/install/TeamCity/buildAgent/work/23d0c25675dc1f18/blog-web/target/blog-web-1.0-SNAPSHOT.war`，可供参考。\n\n其中ssh命令如下：\n\n```\nsh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/shutdown.sh\n\nrm -rf /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/*\n\nunzip -d /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/ /home/hxzq/data/wars/blog-*.war \n\nln -s /home/hxzq/data/blog/upload/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/\nln -s /home/hxzq/data/blog/cover/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/\nln -s /home/hxzq/data/blog/rss/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/\n\nsh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/startup.sh\n\nps -ef | grep tomcat\n```\n\n配置完成后界面如下：\n![](https://kangyonggan.com/upload/ARTICLE201804019b2233e08610bf055fa4767a0af395580886ad2a.png)\n\n到此，算是搞定了，但是它还有另外一种操作，那就是集成在IDEA中。\n\n## 集成到IDEA\n在idea中搜索插件`teamcity`，安装后重启。\n![](https://kangyonggan.com/upload/tc-16.png)\n\n重启后，会发现下面3点变化，右下角的那个图标表示暂未登录到TeamView。\n![](https://kangyonggan.com/upload/tc-17.png)\n\n点击右下角的图标登录TeamView：\n![](https://kangyonggan.com/upload/tc-18.png)\n\n登录成功后，即可在IDEA中一键发布项目了。\n![](https://kangyonggan.com/upload/tc-19.png)\n\n这样的话，一个IDEA就可以开发代码，运行项目，控制版本，操作数据库，一键发布，强大的不要不要的。\n\n但是！如果代码没有改变，是不能remote run的，我也没有找到怎么在没改变代码的情况下运行。\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (87, 'IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(二)', '## Upsource的安装\n### 解压到指定目录\n```\nunzip soft/upsource-2017.3.2888.zip -d install/\n```\n\n### 启动\n```\nsh install/upsource-2017.3.2888/bin/upsource.sh start\n```\n\n### 停止\n```\nsh install/upsource-2017.3.2888/bin/upsource.sh stop\n```\n\n### 访问\n[http://kangyonggan.com:8081/](http://kangyonggan.com:8081/)\nupsource会从8080端口开始，找到一个不是正在使用的端口使用，比如说8080端口没在使用的话，他就会使用8080端口\n\n![](https://kangyonggan.com/upload/itu-20.png)\n\n配置应用地址和端口，保持默认即可\n\n![](https://kangyonggan.com/upload/itu-21.png)\n\n设置管理员密码\n\n![](https://kangyonggan.com/upload/itu-22.png)\n\n使用默认的60天免费授权码\n\n![](https://kangyonggan.com/upload/itu-23.png)\n\n接下来就是等待配置，可能需要几分钟的时间\n\n![](https://kangyonggan.com/upload/itu-24.png)\n![](https://kangyonggan.com/upload/itu-25.png)\n\n加载完成之后，如下图：\n\n![](https://kangyonggan.com/upload/itu-26.png)\n\n点击右上角的`Log in...`，登录后提示你完善个人信息\n\n![](https://kangyonggan.com/upload/itu-27.png)\n\n当我填写邮箱后点击保存，他提示我邮箱没有验证，当我点击发送验证邮件时，又提示邮件通知被禁用了\n\n下图是开启邮件通知和smtp的配置\n\n![](https://kangyonggan.com/upload/itu-28.png)\n![](https://kangyonggan.com/upload/itu-29.png)\n![](https://kangyonggan.com/upload/itu-30.png)\n![](https://kangyonggan.com/upload/itu-31.png)\n![](https://kangyonggan.com/upload/itu-32.png)\n\n配置好smtp并且开启邮件通知之后，再回到profile，重新发送一个校验邮件，收到邮件后，点击邮件中的链接即可。\n\n![](https://kangyonggan.com/upload/itu-33.png)\n\n补充好个人信息之后，切到`upsource`视图去创建一个项目，从而开始review之路。\n\n![](https://kangyonggan.com/upload/itu-34.png)\n![](https://kangyonggan.com/upload/itu-35.png)\n![](https://kangyonggan.com/upload/itu-36.png)\n![](https://kangyonggan.com/upload/itu-37.png)\n\n## 集成到idea中\n在idea中安装upsource插件\n![](https://kangyonggan.com/upload/itu-38.png)\n\n重启idea后会在右下角看见up图标，点击后会弹框让你输入upsource服务器的地址，输入后弹出浏览器登录界面。\n\n![](https://kangyonggan.com/upload/itu-39.png)\n\n如何审核代码呢？在idea中找到要审核的代码`行`，`右键 > upsource > 留言`\n\n![](https://kangyonggan.com/upload/itu-40.png)\n\n留言后，在代码行首可以看见图标，点击图标可以查看留言内容，并且可以对其进行评论或其他骚操作。\n\n![](https://kangyonggan.com/upload/itu-41.png)\n\n还有其他更多操作，请自行探索。\n\n## 代码质量检测\n代码质量检测是按照阿里巴巴开发规范来进行检测的，为此阿里还开发了对应的idea、eclipse插件。在idea中按照此插件如下图：\n\n![](https://kangyonggan.com/upload/itu-42.png)\n\n安装完成重启idea后，可以在tools中看到对应的菜单、右键菜单里也有对应的菜单，也可以使用快捷键。\n\n![](https://kangyonggan.com/upload/itu-43.png)\n\n![](https://kangyonggan.com/upload/itu-44.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (88, '使用阿里巴巴开发规范扫描我的博客发现的问题总结', '一、 在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式（发现1处）：\n     \n```\nif (condition) statements; \n```\n\n二应该写成下面这样的形式：\n\n```\nif (flag) {\n    System.out.println(\"hello world\");\n}\n```\n\n二、 所有的覆写方法，必须加@Override注解。 反例：getObject()与get0bject()的问题。一个是字母的O，一个是数字的0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错（发现25处）。\n\n三、 Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals（发现62处）。 \n  \n```          \npublic void f(String str){\n    String inner = \"hi\";\n    if (inner.equals(str)) {\n        System.out.println(\"hello world\");\n    }\n}\n```\n\n四、 SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类（发现62处）。\n\n说明：如果是JDK8的应用，可以使用instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。\n            \nPositive example 1：\n\n```\nprivate static final String FORMAT = \"yyyy-MM-dd HH:mm:ss\";\npublic String getFormat(Date date){\n    SimpleDateFormat dateFormat = new SimpleDateFormat(FORMAT);\n    return sdf.format(date);\n}\n``` \n        \n            \nPositive example 2：\n\n```\nprivate static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\npublic void getFormat(){\n    synchronized (sdf){\n    sdf.format(new Date());\n    ….;\n}\n```\n        \n        \n            \nPositive example 3：\n\n```\nprivate static final ThreadLocal<DateFormat> DATE_FORMATTER = new ThreadLocal<DateFormat>() {\n    @Override\n    protected DateFormat initialValue() {\n        return new SimpleDateFormat(\"yyyy-MM-dd\");\n    }\n};\n```\n\n> 我玩意说是这么说，但是经过我的实验，发现SimpleDateFormat的parse确实需要加锁，但是format方法不需要。\n\n五、 不能使用过时的类或方法。 说明：java.net.URLDecoder 中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)（发现1处）。\n\n接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\n\n六、常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长（发现6处） \n\n```            \npublic class ConstantNameDemo {\n\n    /**\n     * max stock count\n     */\n    public static final Long MAX_STOCK_COUNT = 50000L;\n}\n```\n\n七、 所有的枚举类型字段必须要有注释，说明每个数据项的用途。 \n\n```\npublic enum TestEnum {\n    /**\n     * agree\n     */\n    agree(\"agree\"),\n    /**\n     * reject\n     */\n    reject(\"reject\");\n    \n    private String action;\n\n    TestEnum(String action) {\n        this.action = action;\n    }\n\n    public String getAction() {\n        return action;\n    }\n}\n```\n\n八、 方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从驼峰形式(发现4处)\n\n九、线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题(发现8处)。\n            \n```            \nThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n    .setNameFormat(\"demo-pool-%d\").build();\nExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,\n    0L, TimeUnit.MILLISECONDS,\n    new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\nsingleThreadPool.execute(()-> System.out.println(Thread.currentThread().getName()));\nsingleThreadPool.shutdown();\n```\n\n十、 不允许任何魔法值（即未经定义的常量）直接出现在代码中(发现212处)。 \n\nNegative example:\n```\n//Magic values, except for predefined, are forbidden in coding.\nif (key.equals(\"Id#taobao_1\")) {\n        //...\n}\n```    \n\nPositive example:\n```\nString KEY_PRE = \"Id#taobao_1\";  \nif (KEY_PRE.equals(key)) {\n        //...\n}\n```\n\n\n十一、中括号是数组类型的一部分，数组定义如下(发现19处)：\n\n```\nString[] args;\n            \nString[] a = new String[3];\n```\n\n十二、及时清理不再使用的代码段或配置信息。 说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余(发现2处)。\n\nPositive example: For codes which are temporarily removed and likely to be reused, use /// to add a reasonable note.\n\n```\npublic static void hello() {\n    /// Business is stopped temporarily by the owner.\n    // Business business = new Business();\n    // business.active();\n    System.out.println(\"it\'s finished\");\n}\n```\n\n十三、所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 说明：如有实现和调用注意事项，请一并说明(发现2处)。\n\n```\n/**\n * fetch data by rule id\n * \n * @param ruleId rule id\n * @param page page number\n * @param jsonContext json format context\n * @return Result<XxxxDO>\n */\nResult<XxxxDO> fetchDataByRuleId(Long ruleId, Integer page, String jsonContext);\n```\n\n十四、所有的类都必须添加创建者信息。 说明：在设置模板时，注意IDEA的@author为${USER}，而eclipse的@author为${user}，大小写有区别，而日期的设置统一为yyyy/MM/dd的格式（发现45处）。\n\n```\n/**\n * Demo class\n * \n * @author keriezhang\n * @date 2016/10/31\n */\npublic class CodeNoteDemo {\n}\n```\n\n十五、集合初始化时，指定集合初始值大小。 说明：HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可(发现6处)。\n         \nNegative example:  \n \n```\nMap<String, String> map = new HashMap<String, String>();\n```   \n        \nPositive example: \n```\nMap<String, String> map = new HashMap<String, String>(16);\n```\n\n十六、类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO（发现1处）\n\n十七、除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量，以提高可读性。 说明：很多if语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？\n            \nNegative example:\n\n```\nif ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n    // ...\n}\n```			\n            \nPositive example:\n\n```\nboolean existed = (file.open(fileName, \"w\") != null) && (...) || (...);\nif (existed) {\n    //...\n}\n```\n\n十八、类、类属性、类方法的注释必须使用javadoc规范，使用/**内容*/格式，不得使用//xxx方式和/*xxx*/方式。 说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率(发现2处)。\n\n```\n/**\n * \n * XXX class function description.\n *\n */\npublic class XxClass implements Serializable {\n    private static final long serialVersionUID = 113323427779853001L;\n    /**\n     * id\n     */\n    private Long id;\n    /**\n     * title\n     */\n    private String title;\n\n    /**\n     * find by id\n     * \n     * @param ruleId rule id\n     * @param page start from 1\n     * @return Result<Xxxx>\n     */\n    public Result<Xxxx> funcA(Long ruleId, Integer page) {\n        return null;\n    }\n}\n```\n        			\n十九、方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐(发现12处)。 \n\n```\npublic void method() {\n    // Put single line comment above code. (Note: align \'//\' comment with code)\n    int a = 3;\n\n    /**\n    * Some description about follow code. (Note: align \'/**\' comment with code)\n    */\n    int b = 4;\n}        \n```', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (89, '学习Activiti 6.0.0 （一）', '## 一、activiti简介\n### 1.1 百度百科\n[https://baike.baidu.com/item/activiti](https://baike.baidu.com/item/activiti)\n\n### 1.2 官方文档\n[https://www.activiti.org/userguide/6.latest/index.html](https://www.activiti.org/userguide/6.latest/index.html)\n\n### 1.3 下载地址\n[http://activiti.org/download.html](http://activiti.org/download.html)\n\n### 1.4 源码地址\n[https://github.com/Activiti/Activiti](https://github.com/Activiti/Activiti)\n\n## 二、快速开始\n### 2.1 小试牛刀\n- 解压`activiti-6.0.0.zip`, 把`activiti-6.0.0/wars/activiti-app.war`拷贝到tomcat的webapps目录下，并启动。\n- 访问[http://localhost:8080/activiti-app/](http://localhost:8080/activiti-app/)\n- 用户名：`admin`、密码：`test`\n\n但是，activiti-app默认使用的是内存数据库`H2`, 当重启后，我们在UI界面做的任何操作都不会保留。所以有必要使用其他数据库，比如MySQL。\n\n### 2.2 配置数据库\n- 创建一个数据库`acti`\n\n```\nDROP DATABASE IF EXISTS acti;\n\nCREATE DATABASE acti DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n\nUSE acti;\n```\n\n- 执行初始化脚本\n    - `activiti-6.0.0/database/create/activiti.mysql.create.identity.sql`\n    - `activiti-6.0.0/database/create/activiti.mysql55.create.engine.sql`\n    - `activiti-6.0.0/database/create/activiti.mysql55.create.history.sql`\n \n- 修改连接数据库的配置`activiti-app.properties`\n\n这里需要说明一下：\n- 如果MySQL的版本号小于5.6, 需要执行上面提到的三个sql脚本。\n- 如果MySQL的版本号大于等于5.6，可以不用执行mysql55的脚本，而是执行`activiti.mysql.create.engine.sql`和`activiti.mysql.create.history.sql`\n\n```\nvi apache-tomcat-8.5.6/webapps/activiti-app/WEB-INF/classes/META-INF/activiti-app/activiti-app.properties\n```\n\n配置如下：\n\n```\ndatasource.driver=com.mysql.jdbc.Driver\ndatasource.url=jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8\n\ndatasource.username=root\ndatasource.password=123456\n\nhibernate.dialect=org.hibernate.dialect.MySQLDialect\n```\n\n- 重启即可生效。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (90, '学习Activiti 6.0.0 （二）', '> 本例代码：[https://github.com/kangyonggan/acti-01.git](https://github.com/kangyonggan/acti-01.git)\n\n## 一、创建一个流程引擎`ProcessEngine`\n### 1.1 添加Maven依赖\n```\n<activiti.version>6.0.0</activiti.version>\n<mysql.version>5.1.34</mysql.version>\n\n...\n\n<!--activiti-->\n<dependency>\n    <groupId>org.activiti</groupId>\n    <artifactId>activiti-engine</artifactId>\n    <version>${activiti.version}</version>\n</dependency>\n\n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>${mysql.version}</version>\n</dependency>\n```\n\n### 1.2 创建流程引擎\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.ProcessEngineConfiguration;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo01 {\n\n    public static void main(String[] args) {\n        ProcessEngineConfiguration cfg = ProcessEngineConfiguration\n            .createStandaloneProcessEngineConfiguration()\n            .setJdbcDriver(\"com.mysql.jdbc.Driver\")\n            .setJdbcUrl(\"jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8\")\n            .setJdbcUsername(\"root\")\n            .setJdbcPassword(\"123456\")\n            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(processEngine.getName());\n    }\n\n}\n```\n\n或者把jdbc的连接信息写入配置文件，如下：\n\n### 1.3 添加配置`activiti.cfg.xml`\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"processEngineConfiguration\" class=\"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n        <property name=\"jdbcUrl\" value=\"jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8\"></property>\n        <property name=\"jdbcDriver\" value=\"com.mysql.jdbc.Driver\"></property>\n        <property name=\"jdbcUsername\" value=\"root\"></property>\n        <property name=\"jdbcPassword\" value=\"123456\"></property>\n\n        <property name=\"databaseSchemaUpdate\" value=\"true\"></property>\n    </bean>\n\n</beans>\n```\n\n### 1.4 使用配置文件创建流程引擎\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.ProcessEngineConfiguration;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo01 {\n\n    public static void main(String[] args) {\n        ProcessEngineConfiguration cfg = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(\"activiti.cfg.xml\");\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(processEngine.getName());\n    }\n\n}\n```\n\n运行后输出：`default`\n\n## 二、集成到Spring\n### 2.1 添加Maven依赖\n```\n<spring.version>4.2.5.RELEASE</spring.version>\n<junit.version>4.11</junit.version>\n\n...\n\n<!--activiti-->\n<dependency>\n    <groupId>org.activiti</groupId>\n    <artifactId>activiti-spring</artifactId>\n    <version>${activiti.version}</version>\n</dependency>\n\n<!--spring-->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>${spring.version}</version>\n    <scope>test</scope>\n</dependency>\n        \n<!--junit-->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <scope>test</scope>\n    <version>${junit.version}</version>\n</dependency>\n```\n\n### 2.2 添加配置`activiti.cfg.xml`\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"processEngineConfiguration\" class=\"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n        <property name=\"jdbcUrl\" value=\"jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8\"></property>\n        <property name=\"jdbcDriver\" value=\"com.mysql.jdbc.Driver\"></property>\n        <property name=\"jdbcUsername\" value=\"root\"></property>\n        <property name=\"jdbcPassword\" value=\"123456\"></property>\n\n        <property name=\"databaseSchemaUpdate\" value=\"true\"></property>\n    </bean>\n\n    <bean id=\"processEngine\" class=\"org.activiti.spring.ProcessEngineFactoryBean\">\n        <property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\"></property>\n    </bean>\n\n</beans>\n```\n\n### 2.3 Junit测试代码\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo03 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    @Test\n    public void test01() {\n        System.out.println(processEngine.getName());\n    }\n\n}\n```\n\n其中`AbstractServiceTest.java`代码如下：\n\n```\npackage com.kangyonggan.acti;\n\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * 没有事务\n *\n * @author kangyonggan\n * @date 2016/11/30\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\"classpath:/activiti.cfg.xml\"})\npublic abstract class AbstractServiceTest extends AbstractJUnit4SpringContextTests {\n\n}\n```\n\n运行后输出：`default`\n\n## 三、使用`DataSource`\n### 3.1 添加Maven依赖\n```\n<druid.version>1.0.18</druid.version>\n\n...\n\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>${druid.version}</version>\n</dependency>\n```\n\n### 3.2 添加配置`activiti.cfg.xml`\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 配置dbcp数据源 - dev -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"></property>\n        <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8\"></property>\n        <property name=\"username\" value=\"root\"></property>\n        <property name=\"password\" value=\"123456\"></property>\n\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"5\"></property>\n        <property name=\"minIdle\" value=\"5\"></property>\n        <property name=\"maxActive\" value=\"100\"></property>\n\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\"></property>\n\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"></property>\n\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"></property>\n\n        <property name=\"validationQuery\" value=\"SELECT \'x\'\"></property>\n        <property name=\"testWhileIdle\" value=\"true\"></property>\n        <property name=\"testOnBorrow\" value=\"false\"></property>\n        <property name=\"testOnReturn\" value=\"false\"></property>\n\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\"></property>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"></property>\n\n        <!-- 关闭长时间不使用的连接 -->\n        <property name=\"removeAbandoned\" value=\"false\"></property> <!-- 打开removeAbandoned功能 -->\n        <property name=\"removeAbandonedTimeout\" value=\"1200\"></property> <!-- 1200秒，也就是20分钟 -->\n        <property name=\"logAbandoned\" value=\"true\"></property> <!-- 关闭abanded连接时输出错误日志 -->\n    </bean>\n\n    <bean id=\"processEngineConfiguration\" class=\"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n        <property name=\"databaseSchemaUpdate\" value=\"true\"></property>\n    </bean>\n\n    <bean id=\"processEngine\" class=\"org.activiti.spring.ProcessEngineFactoryBean\">\n        <property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\"></property>\n    </bean>\n\n</beans>\n```\n\n这篇文章学习了怎么在java中使用工作流，以及怎么集成到spring中，下一篇我将学习使用工作流的api接口。\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (91, '学习Activiti 6.0.0 （三）', '## 流程引擎的接口和服务\n\n引擎API是与Activiti交互的最常见的方式。中心起始点是ProcessEngine，从ProcessEngine中，可以获得各种服务。ProcessEngine和服务service是线程安全的。因此，可以为整个服务器保留一个引用。\n\n![](https://kangyonggan.com/upload/api.services.png)\n\n下面是从ProcessEngine中获取各个service的代码:\n\n```\nProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n\nRuntimeService runtimeService = processEngine.getRuntimeService();\nRepositoryService repositoryService = processEngine.getRepositoryService();\nTaskService taskService = processEngine.getTaskService();\nManagementService managementService = processEngine.getManagementService();\nIdentityService identityService = processEngine.getIdentityService();\nHistoryService historyService = processEngine.getHistoryService();\nFormService formService = processEngine.getFormService();\nDynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();\n```\n\n每个服务的作用暂不解释。我的一贯作风是先上手玩一下，再去思考它的作用。\n\n使用工作流的步骤大致分为：\n\n- 画一个流程图，并打包成zip文件。一般是使用eclipse插件或者idea插件。\n- 部署流程图（zip文件）。包括：部署、查询、挂起、恢复和删除。\n- 启动一个工作流实例。包括：启动、查询。\n- 执行任务。包括：执行、查询。\n\n## 画流程图\n工欲善其事必先利其器，先在idea中安装画流程图的插件，如下图：\n\n![](https://kangyonggan.com/upload/idea-acti.png)\n\n安装后重启idea即可，如果电脑不能联网，也可以离线安装，插件下载地址：[http://plugins.jetbrains.com/plugin/download?rel=true&updateId=17789](http://plugins.jetbrains.com/plugin/download?rel=true&updateId=17789)\n\n下面我画一个最经典的请假流程图，我先描述一下这个流程：\n1. 员工填写请假信息。\n2. 部门经理审批。\n3. 如果部门经理通过，流程结束。\n4. 如果部门经理不通过，回到步骤1。\n\n下面是使用idea画的流程图:\n\n![](https://kangyonggan.com/upload/acti-01.png)\n\n![](https://kangyonggan.com/upload/acti-02.png)\n\n![](https://kangyonggan.com/upload/acti-03.png)\n\n![](https://kangyonggan.com/upload/acti-04.png)\n\n![](https://kangyonggan.com/upload/acti-05.png)\n\n从创建好的`leave.bpmn`复制出一个`leave.xml`, 其实就是改个后缀名。然后从`leave.xml`生成一个`leave.png`， 操作如下：\n\n![](https://kangyonggan.com/upload/acti-06.png)\n![](https://kangyonggan.com/upload/acti-07.png)\n\n最终生成的流程图如下：\n\n![](https://kangyonggan.com/upload/acti-08.png)\n\n如果图片中文乱码，请修改idea的配置文件`idea64.exe.vmoptions`(win x64)，在最后添加`-Dfile.encoding=UTF-8`\n\n## 部署流程图\n把`leave.bpmn`和`leave.png`打包成`leave.zip`。然后使用下面的代码进行部署。\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.repository.Deployment;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.io.FileInputStream;\nimport java.util.zip.ZipInputStream;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo04 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * 部署流程定义\n     */\n    @Test\n    public void deploy() throws Exception {\n        String zipPath = \"D:\\\\code\\\\acti-01\\\\src\\\\main\\\\resources\\\\leave.zip\";\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addZipInputStream(new ZipInputStream(new FileInputStream(zipPath))).deploy();\n\n        System.out.println(deployment.getId());\n    }\n\n}\n```\n\n上面的方法是使用zip的方式部署的，当然也是可以使用bpmn+png的方式部署的。\n\n部署成功后，从表数据来看，会在`act_re_deployment`表和`act_re_procdef`表中分别插入一条数据。\n\n我个人的理解：部署一个流程定义，就像是定义一个class类，是一个抽象的概念。  \n员工去申请请假的时候，就是从部署的这个抽象的流程定义中创建一个流程实例，就好比从一个抽象的class类中创建一个Object对象。\n\n所以，一定要理解好流程定义和流程实例的概念，关于流程定义的增删改查，在ide中点一下服务的方法就能看的到。这些服务请查考图一。\n\n如果`leave.xml`中没有乱码，但是数据库中有乱码，请检查jdbc-url连接是否带有utf8参数。\n\n## 启动流程实例\n代码中有注释，简单解释了一点点东东，实际操作时，还需要自己多点点服务的方法，多多实验。\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.runtime.ProcessInstance;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo05 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void start() throws Exception {\n        // 流程定义ID， 指明了流程定义ID，引擎才能知道你使用的是哪个模板\n        String processDefinitionKey = \"LeaveProcess\";\n        // 业务主键，比如请假申请, 就可以使用请假的流水号\n        String businessKey = \"20170411000001\";\n        // 实例参数\n        Map<String, Object> variables = new HashMap<>(1);\n        // 谁请假?\n        variables.put(\"user\", \"zhangsan\");\n\n        ProcessInstance processInstance = processEngine.getRuntimeService().\n                startProcessInstanceByKey(processDefinitionKey, businessKey, variables);\n        System.out.println(processInstance.getId());\n    }\n\n}\n```\n\n启动流程实例后，从表数据来看，会在`act_ru_execution`表插入两条数据、在`act_ru_task`表中插入一条数据，task表中的这条数据表示接下来需要Assignee（zhangsan）来处理这个任务，即填写请假表。\n\n## 执行任务\n张三可以查询出指派给自己的任务，然后去执行。即从`act_ru_task`表中查出`Assignee`等于zhangsan的任务，也可以根据业务主键来查询，这些查询我们不用写，引擎已经封装成服务了，方法如下：\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.task.TaskQuery;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo06 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * zhangsan查询我的待办任务，并执行任务\n     */\n    @Test\n    public void complete() throws Exception {\n        // 查询任务\n        String businessKey = \"20170411000001\";\n        TaskQuery query = processEngine.getTaskService().createTaskQuery();\n        query.processInstanceBusinessKey(businessKey);\n        Task task = query.singleResult();\n\n        // 执行任务\n        Map<String, Object> variables = new HashMap<>(1);\n        variables.put(\"reason\", \"请假去阿里面试\");\n        processEngine.getTaskService().complete(task.getId(), variables);\n    }\n\n}\n```\n\n员工填写请假申请后，从表数据来看，会把张三之前那个任务删除，即`act_ru_task`表中的一条记录。\n他的Assignee=zhangsan, 那么这条数据也不会真的删除了，而是转义到了历史任务表`act_hi_taskinst`中。\n同时，task表中会新增一个Assignee=manager的新任务，等待角色为manager的用户去处理。\n\n## 审批\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.task.TaskQuery;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo07 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * manager查询我的待办任务，并执行任务\n     */\n    @Test\n    public void complete() throws Exception {\n        // 查询任务\n        String assignee = \"manager\";\n        TaskQuery query = processEngine.getTaskService().createTaskQuery();\n        // 其实这里使用候选组（Candidate Groups）来查询比较好\n        query.taskAssignee(assignee);\n        List<Task> tasks = query.list();\n\n        // 执行任务\n        Map<String, Object> variables = new HashMap<>(2);\n        variables.put(\"status\", \"complete\");\n        variables.put(\"replyMsg\", \"准了\");\n        processEngine.getTaskService().complete(tasks.get(0).getId(), variables);\n    }\n\n}\n```\n\n执行此任务后task表中assignee=manager的那条记录就被转义到历史任务表中了，并且也不再生成新的task了，因为流程已经结束。  \n\n至此，一个完整的工作流就走完了。后面估计还要查询历史任务，查询流程进度等，下次再学习。\n\n\n\n\n\n\n\n\n', 0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (92, '学习Activiti 6.0.0 （四）',
   '## 挂起 & 激活\n当一个流程定义被挂起后，如果再去尝试启动一个流程，那么就会抛一个异常`ActivitiException`, 测试代码如下：\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.ProcessEngine;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo08 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    private static final String DEF_KEY = \"LeaveProcess\";\n\n    /**\n     * 挂起\n     */\n    @Test\n    public void suspend() throws Exception {\n        processEngine.getRepositoryService().suspendProcessDefinitionByKey(DEF_KEY);\n    }\n\n    /**\n     * 激活\n     */\n    @Test\n    public void active() throws Exception {\n        processEngine.getRepositoryService().activateProcessDefinitionByKey(DEF_KEY);\n    }\n\n    /**\n     * 启动一个工作流\n     */\n    @Test\n    public void start() {\n        try {\n            // 业务主键，比如请假申请, 就可以使用请假的流水号\n            String businessKey = \"20170411000002\";\n            // 实例参数\n            Map<String, Object> variables = new HashMap<>(1);\n            // 谁请假?\n            variables.put(\"user\", \"lisi\");\n            processEngine.getRuntimeService().startProcessInstanceByKey(DEF_KEY, businessKey, variables);\n        } catch (ActivitiException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n运行挂起方法后, 再运行启动工作流的方法抛的异常如下：\n\n```\norg.activiti.engine.ActivitiException: Cannot start process instance. Process definition 员工请假申请 (id = LeaveProcess:1:4) is suspended\n```\n\n> * 重复挂起也会抛异常：org.activiti.engine.ActivitiException: Cannot set suspension state \'suspended\' for ProcessDefinitionEntity[LeaveProcess:1:4]\': already in state \'suspended\'.\n> * 重复激活也会抛异常：org.activiti.engine.ActivitiException: Cannot set suspension state \'active\' for ProcessDefinitionEntity[LeaveProcess:1:4]\': already in state \'active\'.\n\n## 查询接口\n需求：部门经理想查询张三的请假申请。\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.task.Task;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo09 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * 需求：部门经理想查询张三的请假申请。\n     */\n    @Test\n    public void query() throws Exception {\n        List<Task> tasks = processEngine.getTaskService()\n                .createTaskQuery()\n                .taskAssignee(\"manager\")\n                .processVariableValueEquals(\"user\", \"zhangsan\")\n                .list();\n\n        for (Task task : tasks) {\n            System.out.println(task);\n        }\n\n    }\n\n}\n```\n\n尽管activiti提供的api已经很强大很完善了，但是任然满足不了脑洞大开的需求。比如：部门经理想查询张三和李四的请假申请。\n\n在activiti现有的api中我是没找到这种api，如下图：\n\n![](https://kangyonggan.com/upload/ARTICLE20180412bcadfe1368eafc10393bfdb6438b779f98f883e2.png)\n\n也许有其他曲线救国的方法，在此不多研究，我想说的是，如果api中没有提供方法，我们可以使用本地查询，代码如下：\n\n```\npackage com.kangyonggan.acti;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.task.Task;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.List;\n\n/**\n * @author kangyonggan\n * @date 4/11/18\n */\npublic class Demo10 extends AbstractServiceTest {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    /**\n     * 需求：部门经理想查询张三和李四的请假申请。\n     */\n    @Test\n    public void query() throws Exception {\n        String sql = \"SELECT a.* FROM ACT_RU_TASK a \"\n                + \"LEFT JOIN ACT_RU_VARIABLE b \"\n                + \"ON a.PROC_INST_ID_ = b.PROC_INST_ID_ WHERE \"\n                + \"b.NAME_ = \'user\' AND b.TEXT_ IN (\'zhangsan\', \'lisi\')\";\n\n        List<Task> tasks = processEngine.getTaskService()\n                .createNativeTaskQuery()\n                .sql(sql).list();\n\n        for (Task task : tasks) {\n            System.out.println(task);\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n',
   0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'), (93, '学习Activiti 6.0.0 （五）',
                                                      '## 需求\n\n- 需求1：查询张三的请假申请\n- 需求2：查询张三已完成的请假申请\n- 需求3：查询张三未完成的请假申请\n- 需求4：查询张三指定流水的请假申请\n- 需求5：查询部门经理的请假待办任务\n- 需求6：查询部门经理的请假未办任务\n- 需求7：查询部门经理的流水号为20170411000001的请假待办任务\n- 需求8：查询某次请假申请的流转和审批历史\n\n## 查询申请历史\n包含已完成的和未完成的，流程走到endEvent的叫做已完成的。\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricProcessInstance> list = historyService\n        .createHistoricProcessInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .variableValueEquals(\"user\", \"zhangsan\").list();\n```\n\n> * 如果需要分页查询，把list()方法换成listPage(int firstResult, int maxResults)即可。\n> * 当然也是支持排序的: orderByXxx()\n\n只包含已完成的：\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricProcessInstance> list = historyService\n        .createHistoricProcessInstanceQuery()\n        .processDefinitionKey(processDefinitionKey).finished()\n        .variableValueEquals(\"user\", \"zhangsan\").list();\n```\n\n只包含未完成的：\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricProcessInstance> list = historyService\n        .createHistoricProcessInstanceQuery()\n        .processDefinitionKey(processDefinitionKey).unfinished()\n        .variableValueEquals(\"user\", \"zhangsan\").list();\n```\n\n查询指定流水（业务主键）的：\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nString businessKey = \"20170411000001\";\nList<HistoricProcessInstance> list = historyService\n        .createHistoricProcessInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .processInstanceBusinessKey(businessKey)\n        .variableValueEquals(\"user\", \"zhangsan\").list();\n```\n\n## 查询任务\n查询部门经理待办的请假申请：\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricTaskInstance> tasks = historyService\n        .createHistoricTaskInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .unfinished().taskAssignee(\"manager\")\n        .list();\n```\n\n查询部门经理已办的请假申请：\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricTaskInstance> tasks = historyService\n        .createHistoricTaskInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .finished().taskAssignee(\"manager\")\n        .list();\n```\n\n查询部门经理的流水号为20170411000001的请假待办任务\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricTaskInstance> tasks = historyService\n        .createHistoricTaskInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .processInstanceBusinessKey(\"20170411000001\")\n        .taskAssignee(\"manager\").list();\n```\n\n## 查询流转历史\n查询某次请假申请的流转和审批历史\n\n```\nString processDefinitionKey = \"LeaveProcess\";\nList<HistoricTaskInstance> tasks = historyService\n        .createHistoricTaskInstanceQuery()\n        .processDefinitionKey(processDefinitionKey)\n        .processInstanceBusinessKey(\"20170411000001\")\n        .list();\n```\n\n但是，结果集中没有审批意见和审批状态等信息。是不是有对应的api呢？还是说需要自己写sql？  \n\n可不可以根据taskId查询到经理审批时传的replyMsg等流程参数呢？\n\n好像也不行，ACT_HI_VARINST表中没有记录taskId，我也不知道为什么，有待研究...\n\n发现可能是流程变量用的有问题，还有就是task的owner、assignee、groups以及Candidate等用的也很low，需要多多研究。\n\n\n\n\n\n\n\n\n\n\n\n',
                                                      0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'),
  (94, '如何把N个苹果按重量相对公平的分配给M个人',
   '## 问题描述\n有N个苹果，想要平均分给M个人，而且每个人得到的苹果重量要尽量差不多。\n\n例如：10个苹果的重量为：`{4, 9, 2, 8, 7, 5, 6, 1, 3, 7}`。\n\n## 方案一：S形分法\n这是大家最容易想到的又是相对简单的，而且还有很高的公平性。XX银行的分案就是采用此法，所以可行性很高。\n\n思路：  \n1. 先把数组降序（降序比升序更公平）排序，排序结果为：`{9, 8, 7, 7, 6, 5, 4, 3, 2, 1}`。\n2. 然后把所有苹果从大到小依次分给：P1、P2、P3、P3、P2、P1、P1、P2、P3、P3。也就是S形分法。\n\n分完之后各自手里的苹果： \n- P1: `{9, 5, 4}` = 18\n- P2: `{8, 6, 3}` = 17\n- P3: `{7, 7, 2, 1}` = 17\n\n由此可见此算法基本算是公平的，但就怕极端数据比如`{6, 2, 2, 2, 2, 2, 2}`。  \n如果使用S形分法：  \n- P1: `{6, 2, 2}` = 10\n- P2: `{2, 2}` = 4\n- P3: `{2, 2}` = 4\n\n显而易见最好的分法应该是：  \n- P1: `{6}` = 6\n- P2: `{2, 2, 2}` = 6\n- P3: `{2, 2, 2}` = 6\n\n\n## 方案二：穷举法\n在说此方案之前，我要说一下“公平性”。  \n观察方案一的结果`18、17、17`，我们感觉比较公平，因为每个数都接近平均数17.333。  \n在数学中，有一个说法叫做离散程度，就是各个数字距离平均数的远近程度。而标准差的大小就可以体现离散程度。  \n```\ns = sqrt(((X1 - X0)^2 + (X2 - X0)^2 + ... (Xn - X0)^2) / n)\n```\n\n其中s为标准差，sqrt是求平方根，X0为平均数，Xi为各个元素，n为元素的个数。\n\n有了衡量公平与否的方案之后，我们可以穷举出所有的分配方案，然后计算各自的标准差，取最小的一组即可。\n\n但是，此算法的时间复杂度高的令人发指：`A(n, m)` 即：`n! / (n-m)! = n * (n-1) * (n-2) * ... * (n-m)`\n\n由于时间复杂度太高，所以此法并不实用，除非在此基础上进行优化，比如：\n1. 当标准差小于某个指标时，退出循环，但是此法还是不可控，搞不好就穷举了。\n2. 可以在方案一的基础上进行`有限穷举`。\n\n## 方案三：折中的方案\n上面我说了可以在方案一的基础上进行有限穷举，这听着矛盾的有限穷举到底是什么骚操作呢？\n\n在限穷举顾名思义就是有限个穷举，避免真正的穷举，所以不可能得到所有的标准差，  \n也就没法获得一个最小的标准差（因为最小的那种情况可能就是你没有穷举到的）。  \n但我们可以在有限的穷举中获得相对最小的标准差。  \n\n再看一组数据：`{9, 8, 7, 5, 5, 5, 3, 2}`  \n用S形分法的结果：  \n- P1: `{9, 5, 3}` = 17\n- P2: `{8, 5, 2}` = 15\n- P3: `{7, 5}` = 12\n\n调和方案：  \n1. 用最大的减去最小的，17 - 12 = 5\n2. 从最大的数组中找到恰好比5小的数3（也可能没有）。\n3. 如果没找到比5小的，终止，在这有限的情况下找出最小标准差即可。\n4. 如果找到5小的，即3，把3给最小的那组，然后计算一下此时的标准差，再回到第一步。\n\n> 这只是我个人意淫的方案，如果时间充足，我相信还可以研究出其他更优方案，尔等若有时间，可以考虑考虑，回头告诉我。\n\n## 附1：计算标准差\n```\n/**\n * 计算标准差\n *\n * @param arr\n * @return\n */\nprivate static double calcStandardDeviation(int[] arr) {\n	// 计算平均值\n	double average = calcAverage(arr);\n	double sum = 0;\n	for (int i = 0; i < arr.length; i++) {\n		sum += Math.pow((arr[i] - average), 2);\n	}\n\n	return Math.sqrt(sum / arr.length);\n}\n```\n\n## 附2：A(n, m)的排列组合\n\n```\nprivate static double recursion(List<Double> apples, List<List<Double>> baskets, int m, double minStandardDeviation) {\n    if (apples.isEmpty()) {\n        // 每个篮子中苹果总重量\n        List<Double> basketTotalApples = calcSumApples(baskets);\n        // 标准差\n        Double standardDeviation = calcStandardDeviation(basketTotalApples);\n        if (standardDeviation < minStandardDeviation) {\n            minStandardDeviation = standardDeviation;\n            System.out.println(\"发现一个更小的标准差:\" + minStandardDeviation);\n        }\n\n        return minStandardDeviation;\n    }\n\n    List<List<Double>> copyBaskets = new ArrayList<>(baskets);\n    List<Double> copyApples = new ArrayList<>(apples);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < apples.size(); j++) {\n            Double a = apples.get(j);\n            copyBaskets.get(i).add(a);\n            copyApples.remove(j);\n            copyApples.add(j, a);\n            copyBaskets.get(i).remove(copyBaskets.get(i).size() - 1);\n        }\n    }\n\n    return minStandardDeviation;\n}\n```\n\n',
   0, '2018-05-15 04:07:36', '2018-05-15 04:07:36'), (95, 'SpringMVC结合拦截器、注解实现简单的防重复提交',
                                                      '## 思路\n1. 在请求一个表单页面时，服务端生成一个随机的token，把token放入session中并回传到前端页面。\n2. 前端表单把token作为一个隐藏域提交给服务端。\n3. 服务端校验提交的token和session中的token是否一致来判断是否是重复提交，然后清除session中的token。\n\n## 想法\n1. 服务端：在请求一个表单页面的controller的方法上加上注解@Token，即可生成token，放入session并回传到前端。\n2. 客户端：我使用的是freemarker，想使用宏定义来封装一下表单组件，如果这个表单需要做防重复提交，只需要传入token=true即可，它会自动加入一个隐藏域，其值为服务端回传的token。\n3. 服务端：如果表单提交的controller的方法上有注解@Token(type = Token.Type.CHECK),那么就校验session中的token和提交的token是否一致，从而判断是否是重复提交。\n\n## 实现\n### 自定义运行时注解@Token\n```\npackage com.kangyonggan.cms.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author kangyonggan\n * @date 2018/5/1 0001\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Token {\n\n    /**\n     * TOKEN的key\n     *\n     * @return\n     */\n    String key();\n\n    /**\n     * TOKEN的操作类型\n     *\n     * @return\n     */\n    Type type() default Type.GENERATE;\n\n    enum Type {\n        /**\n         * 生成TOKEN\n         */\n        GENERATE,\n        /**\n         * 校验TOKEN\n         */\n        CHECK\n    }\n}\n```\n\n### 自定义SpringMVC拦截器\n在SpringMVC的配置文件`applicationContext-mvc.xml`中配置一个拦截器：\n\n```\n<!--MVC拦截器-->\n<mvc:interceptors>\n	<bean class=\"com.kangyonggan.cms.interceptor.HandlerInterceptor\"></bean>\n</mvc:interceptors>\n```\n\n`HandlerInterceptor`的实现如下：\n\n```\npackage com.kangyonggan.cms.interceptor;\n\nimport com.kangyonggan.cms.annotation.Token;\nimport com.kangyonggan.cms.util.RandomUtil;\nimport com.kangyonggan.cms.util.ShiroUtils;\nimport com.kangyonggan.cms.util.StringUtil;\nimport lombok.extern.log4j.Log4j2;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * @author kangyonggan\n * @date 2018/4/21 0021\n */\n@Log4j2\npublic class HandlerInterceptor extends HandlerInterceptorAdapter {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod method = (HandlerMethod) handler;\n            Token token = method.getMethodAnnotation(Token.class);\n            if (token != null && token.type() == Token.Type.CHECK) {\n                if (isRepeatSubmit(request, token)) {\n                    return false;\n                }\n            }\n        }\n\n        return super.preHandle(request, response, handler);\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod method = (HandlerMethod) handler;\n            Token token = method.getMethodAnnotation(Token.class);\n            if (token != null && token.type() == Token.Type.GENERATE) {\n                String random = RandomUtil.getRandomString();\n                modelAndView.addObject(\"_token\", random);\n                request.getSession().setAttribute(token.key(), random);\n                log.info(\"{}生成一个token，key={}, value={}\", ShiroUtils.getShiroUsername(), token.key(), random);\n            }\n        }\n\n        super.postHandle(request, response, handler, modelAndView);\n    }\n\n    /**\n     * 校验是否重复提交\n     *\n     * @param request\n     * @param token\n     * @return\n     */\n    private boolean isRepeatSubmit(HttpServletRequest request, Token token) {\n        try {\n            String random = request.getParameter(\"_token\");\n            String sessionRandom = (String) request.getSession().getAttribute(token.key());\n            log.info(\"{}校验是否重复提交，key={}, random={}, sessionRandom={}\", ShiroUtils.getShiroUsername(), token.key(), random, sessionRandom);\n            if (StringUtil.hasEmpty(random, sessionRandom)) {\n                return true;\n            }\n            return !random.equals(sessionRandom);\n        } catch (Exception e) {\n            log.error(\"校验是否重复提交异常\", e);\n            return true;\n        } finally {\n            request.getSession().removeAttribute(token.key());\n        }\n    }\n}\n```\n\n## 使用\n假设我现在需要修改用户信息，首先是请求一个用户修改页面，然后返回一个修改用户的表单页面，最后提交到服务端。\n\n### 拦截请求页面的请求并生成token\n`@Token(key = \"editUser\")`\n\n```\n/**\n * 编辑用户\n *\n * @param username\n * @param model\n * @return\n */\n@RequestMapping(value = \"{username:[\\\\w]+}/edit\", method = RequestMethod.GET)\n@RequiresPermissions(\"SYSTEM_USER\")\n@Token(key = \"editUser\")\npublic String edit(@PathVariable(\"username\") String username, Model model) {\n	model.addAttribute(\"user\", userService.findUserByUsername(username));\n	return getPathFormModal();\n}\n```\n\n### 在表单中加入隐藏域\n`token=true`\n\n```\n<@c.form id=\"modal-form\" action=\"${ctx}/dashboard/system/user/${isEdit?string(\'update\', \'save\')}\" token=true>\n	<input type=\"hidden\" id=\"old-username\" value=\"${user.username!\'\'}\"/>\n	<@c.input name=\"username\" value=\"${user.username!\'\'}\" label=\"用户名\" readonly=isEdit required=!isEdit valid={\"isUsername\": \"true\"}/>\n	<@c.input name=\"realname\" value=\"${user.realname!\'\'}\" label=\"真实姓名\" required=true valid={\"rangelength\": \"[1, 32]\"}/>\n\n	<#if !isEdit>\n		<@c.input name=\"password\" type=\"password\" label=\"密码\" required=true valid={\"isPassword\": \"true\"}/>\n		<@c.input name=\"rePassword\" type=\"password\" label=\"确认密码\" required=true valid={\"equalTo\": \'#password\'}/>\n	</#if>\n</@c.form>\n```\n\n`token=true`背后做了什么呢？其实就是在表单中加了一个隐藏域\n\n```\n<input type=\"hidden\" name=\"_token\" value=\"${_token!\'\'}\"/>\n```\n\n## 思考\n我之所以给@Token注解添加一个key，是防止一种特殊的情况：\n\n1. 请求表单A，但是未提交。\n2. 请求表单B，也未提交。\n3. 回到表单A，提交。\n\n如果没有设计`key`, 那么所有表单的token放在session中的key都是一样的，后面请求的token就会覆盖前面的token，会导致前面的表单无法提交。\n\n\n\n\n',
                                                      0, '2018-05-15 04:07:36', '2018-05-15 04:07:36');

update tb_article set created_username = 'admin', apply_status = 'COMPLETE', reply_msg = 'OK';

